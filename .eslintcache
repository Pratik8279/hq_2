[{"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/index.js":"1","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/App.js":"2","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/context/LayoutContext.js":"3","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/context/UserContext.js":"4","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/themes/index.js":"5","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Utils/AxiosInstance.js":"6","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/signInsignUp/Sign.js":"7","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/themes/default.js":"8","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/error/Error.js":"9","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Layout/Layout.js":"10","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/login/Login.js":"11","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/LiveQC.js":"12","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/data.js":"13","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/login/styles.js":"14","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Layout/styles.js":"15","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/error/styles.js":"16","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/BusinessList.js":"17","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/UsersList.js":"18","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/SiteTableBusiness.js":"19","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/SiteTable.js":"20","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/CheckList.js":"21","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/MasterClientDashboard.js":"22","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/SiteDashboard.js":"23","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/DHLDashboard.js":"24","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/NewTable/NewTable.js":"25","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/maps/Maps.js":"26","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/Charts.js":"27","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/tables/Tables.js":"28","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/Sidebar.js":"29","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/typography/Typography.js":"30","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/notifications/Notifications.js":"31","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Header/Header.js":"32","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/Dashboard.js":"33","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/mock.js":"34","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/component/AddUser.js":"35","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/component/EditUser.js":"36","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/AddBusiness/AddBusiness.js":"37","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Table/Table.js":"38","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditSite.js":"39","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditSiteNew.js":"40","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/AddSite/AddSite.js":"41","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/Dot.js":"42","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/NewTable/style.js":"43","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/PageTitle/PageTitle.js":"44","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Widget/Widget.js":"45","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/components/Charts/BarChartComponent.js":"46","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/EditCheckList/EditCheckList.js":"47","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddSection/AddSection.js":"48","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/components/Table/Table.js":"49","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Table/Table.js":"50","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/Table/Table.js":"51","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Table/Table.js":"52","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Wrappers/Wrappers.js":"53","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Table/BottomTable.js":"54","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/icons/Icons.js":"55","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddSection/Table.js":"56","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Widget/styles.js":"57","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/EditBusiness/EditBusiness.js":"58","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/icons/styles.js":"59","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/PageTitle/styles.js":"60","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/styles.js":"61","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddCheckList/AddCheckList.js":"62","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/TimeSlot.js":"63","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Edit/EditFormNew.js":"64","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Add/AddNewClient.js":"65","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/TimeSlot.js":"66","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Charts/QCDetailChart.js":"67","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Charts/QCTimeChart.js":"68","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Tickets/Tickets.js":"69","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/BigStat/BigStat.js":"70","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Header/styles.js":"71","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/notifications/styles.js":"72","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/typography/styles.js":"73","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/styles.js":"74","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/maps/styles.js":"75","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/SidebarLink/SidebarLink.js":"76","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/components/ApexLineChart.js":"77","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/components/ApexHeatmap.js":"78","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/styles.js":"79","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/UserAvatar/UserAvatar.js":"80","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Notification/Notification.js":"81","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/TwoWeeksChart.js":"82","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/dataShift.js":"83","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/BarLine.js":"84","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/test.js":"85","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/ColoumnChart.js":"86","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/piechart.js":"87","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/radialchart.js":"88","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Heatmap.js":"89","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/TrendLine.js":"90","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/BarChart.js":"91","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/TrendlineTd.js":"92","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/linechart.js":"93","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Heatmap_sec.js":"94","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/styles.js":"95","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/TableSection.js":"96","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/Table.js":"97","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/Table.js":"98","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/Table.js":"99","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditTimeSlot.js":"100","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/BigStat/styles.js":"101","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Tickets/Title.js":"102","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/SidebarLink/styles.js":"103","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/UserAvatar/styles.js":"104","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Notification/styles.js":"105","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/style.js":"106","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/datasource.js":"107","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/colors.js":"108","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/color.js":"109","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/Pricing.js":"110","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/ModalAlert/NotifyAlert.js":"111","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/BarchatComp.js":"112","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/TableS6.js":"113","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/UserModel.js":"114","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/styleCss.js":"115","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/component/AddRole/AddRole.js":"116","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/component/AddRole/Table.js":"117","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/Onboarding.js":"118","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Add_client.js":"119","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Table_business.js":"120","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Table.js":"121","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource3.js":"122","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource.js":"123","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource2.js":"124","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Tablesx.js":"125","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/styletheme.js":"126","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/ViewSiteTable.js":"127","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/AddSection.js":"128","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/Table.js":"129","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/ModalAlert/FailureAlert.js":"130","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddUser/AddUser.js":"131","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/TimeSlot.js":"132","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/TimeSlotTable.js":"133","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Site/AddTimeSlot.js":"134","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Site/EditTimeSlot.js":"135","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditTimeSlot.js":"136","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/changePassword/ChangePassword.js":"137","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/QueueTable.js":"138","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/CreatePlan.js":"139","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanDetails.js":"140","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanForm.js":"141","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanInfo.js":"142","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanEditForm.js":"143","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/PaymentPage/PaymentPage.js":"144","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/AuditReport.js":"145","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/RadioButtons.js":"146","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Table.js":"147","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Daily.js":"148","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Weekly.js":"149","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Monthly.js":"150","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/SubSectionTable.js":"151","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Quest.js":"152","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/AuditSlots.js":"153","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/PublicChecklist.js":"154","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/Table.js":"155","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/dummy.js":"156","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/PreviewDialog.js":"157","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/Accordian.js":"158","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/BlankTemplate.js":"159","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Common/Back.js":"160","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/TopHeader.js":"161","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Build.js":"162","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/InputChecklistName.js":"163","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/Accordion/NewChecklistAccordion.js":"164","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/Content/Content.js":"165","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Section.js":"166","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Question.js":"167","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Utils.js":"168","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/PopUp.js":"169","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/SubSection.js":"170","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/SubQuestion.js":"171"},{"size":791,"mtime":1611556642020,"results":"172","hashOfConfig":"173"},{"size":2659,"mtime":1614871517933,"results":"174","hashOfConfig":"173"},{"size":1392,"mtime":1611556642020,"results":"175","hashOfConfig":"173"},{"size":6473,"mtime":1614673828667,"results":"176","hashOfConfig":"173"},{"size":478,"mtime":1611556642044,"results":"177","hashOfConfig":"173"},{"size":935,"mtime":1613736262917,"results":"178","hashOfConfig":"173"},{"size":30964,"mtime":1616055705742,"results":"179","hashOfConfig":"173"},{"size":2951,"mtime":1611556642044,"results":"180","hashOfConfig":"173"},{"size":1572,"mtime":1613754881542,"results":"181","hashOfConfig":"173"},{"size":8880,"mtime":1616226767233,"results":"182","hashOfConfig":"173"},{"size":12459,"mtime":1611556642032,"results":"183","hashOfConfig":"173"},{"size":42103,"mtime":1615984146398,"results":"184","hashOfConfig":"173"},{"size":10433,"mtime":1611556642032,"results":"185","hashOfConfig":"173"},{"size":5666,"mtime":1611556642040,"results":"186","hashOfConfig":"173"},{"size":1406,"mtime":1616227270101,"results":"187","hashOfConfig":"173"},{"size":1334,"mtime":1611556642032,"results":"188","hashOfConfig":"173"},{"size":198,"mtime":1611556642024,"results":"189","hashOfConfig":"173"},{"size":11285,"mtime":1614348366537,"results":"190","hashOfConfig":"173"},{"size":7750,"mtime":1614434329038,"results":"191","hashOfConfig":"173"},{"size":8165,"mtime":1614316330817,"results":"192","hashOfConfig":"173"},{"size":192,"mtime":1611556642028,"results":"193","hashOfConfig":"173"},{"size":235,"mtime":1611556642028,"results":"194","hashOfConfig":"173"},{"size":24070,"mtime":1615184231573,"results":"195","hashOfConfig":"173"},{"size":22430,"mtime":1611556642028,"results":"196","hashOfConfig":"173"},{"size":27068,"mtime":1613703095315,"results":"197","hashOfConfig":"173"},{"size":971,"mtime":1611556642040,"results":"198","hashOfConfig":"173"},{"size":5556,"mtime":1611556642024,"results":"199","hashOfConfig":"173"},{"size":2159,"mtime":1611556642040,"results":"200","hashOfConfig":"173"},{"size":5140,"mtime":1616068409966,"results":"201","hashOfConfig":"173"},{"size":4506,"mtime":1611556642040,"results":"202","hashOfConfig":"173"},{"size":13470,"mtime":1611556642040,"results":"203","hashOfConfig":"173"},{"size":10415,"mtime":1614951002529,"results":"204","hashOfConfig":"173"},{"size":19875,"mtime":1611556642028,"results":"205","hashOfConfig":"173"},{"size":4086,"mtime":1611556642028,"results":"206","hashOfConfig":"173"},{"size":14029,"mtime":1615550477210,"results":"207","hashOfConfig":"173"},{"size":14165,"mtime":1615550113621,"results":"208","hashOfConfig":"173"},{"size":9309,"mtime":1614097846419,"results":"209","hashOfConfig":"173"},{"size":1274,"mtime":1611556642028,"results":"210","hashOfConfig":"173"},{"size":13135,"mtime":1611556642024,"results":"211","hashOfConfig":"173"},{"size":24692,"mtime":1614326270821,"results":"212","hashOfConfig":"173"},{"size":26201,"mtime":1613842800621,"results":"213","hashOfConfig":"173"},{"size":862,"mtime":1611556642020,"results":"214","hashOfConfig":"173"},{"size":1353,"mtime":1611556642028,"results":"215","hashOfConfig":"173"},{"size":427,"mtime":1611556642020,"results":"216","hashOfConfig":"173"},{"size":2500,"mtime":1611556642020,"results":"217","hashOfConfig":"173"},{"size":1640,"mtime":1611556642032,"results":"218","hashOfConfig":"173"},{"size":6113,"mtime":1611556642028,"results":"219","hashOfConfig":"173"},{"size":6452,"mtime":1611556642028,"results":"220","hashOfConfig":"173"},{"size":7648,"mtime":1611556642032,"results":"221","hashOfConfig":"173"},{"size":8219,"mtime":1614316417297,"results":"222","hashOfConfig":"173"},{"size":7088,"mtime":1614341971738,"results":"223","hashOfConfig":"173"},{"size":9643,"mtime":1615527450464,"results":"224","hashOfConfig":"173"},{"size":3790,"mtime":1611556642020,"results":"225","hashOfConfig":"173"},{"size":5063,"mtime":1613748236380,"results":"226","hashOfConfig":"173"},{"size":377833,"mtime":1611556642032,"results":"227","hashOfConfig":"173"},{"size":7496,"mtime":1611556642028,"results":"228","hashOfConfig":"173"},{"size":993,"mtime":1611556642020,"results":"229","hashOfConfig":"173"},{"size":9298,"mtime":1613823802420,"results":"230","hashOfConfig":"173"},{"size":780,"mtime":1611556642032,"results":"231","hashOfConfig":"173"},{"size":462,"mtime":1611556642020,"results":"232","hashOfConfig":"173"},{"size":2922,"mtime":1611556642028,"results":"233","hashOfConfig":"173"},{"size":8930,"mtime":1611556642028,"results":"234","hashOfConfig":"173"},{"size":28940,"mtime":1613934075347,"results":"235","hashOfConfig":"173"},{"size":9468,"mtime":1615229276685,"results":"236","hashOfConfig":"173"},{"size":9296,"mtime":1615374684457,"results":"237","hashOfConfig":"173"},{"size":20486,"mtime":1614327219028,"results":"238","hashOfConfig":"173"},{"size":1956,"mtime":1611556642028,"results":"239","hashOfConfig":"173"},{"size":1976,"mtime":1611556642028,"results":"240","hashOfConfig":"173"},{"size":736,"mtime":1611556642028,"results":"241","hashOfConfig":"173"},{"size":4039,"mtime":1611556642028,"results":"242","hashOfConfig":"173"},{"size":3868,"mtime":1611556642020,"results":"243","hashOfConfig":"173"},{"size":1858,"mtime":1611556642040,"results":"244","hashOfConfig":"173"},{"size":374,"mtime":1611556642044,"results":"245","hashOfConfig":"173"},{"size":1303,"mtime":1615385438894,"results":"246","hashOfConfig":"173"},{"size":171,"mtime":1611556642040,"results":"247","hashOfConfig":"173"},{"size":3654,"mtime":1611556642020,"results":"248","hashOfConfig":"173"},{"size":1328,"mtime":1611556642024,"results":"249","hashOfConfig":"173"},{"size":1794,"mtime":1611556642024,"results":"250","hashOfConfig":"173"},{"size":2870,"mtime":1611556642032,"results":"251","hashOfConfig":"173"},{"size":593,"mtime":1611556642020,"results":"252","hashOfConfig":"173"},{"size":3296,"mtime":1611556642020,"results":"253","hashOfConfig":"173"},{"size":1990,"mtime":1611824468000,"results":"254","hashOfConfig":"173"},{"size":366,"mtime":1611126726000,"results":"255","hashOfConfig":"173"},{"size":2193,"mtime":1611126726000,"results":"256","hashOfConfig":"173"},{"size":1717,"mtime":1611126726000,"results":"257","hashOfConfig":"173"},{"size":2410,"mtime":1614232355948,"results":"258","hashOfConfig":"173"},{"size":1924,"mtime":1611324388000,"results":"259","hashOfConfig":"173"},{"size":1342,"mtime":1611126726000,"results":"260","hashOfConfig":"173"},{"size":3099,"mtime":1611126726000,"results":"261","hashOfConfig":"173"},{"size":6545,"mtime":1611814106000,"results":"262","hashOfConfig":"173"},{"size":1598,"mtime":1614438942702,"results":"263","hashOfConfig":"173"},{"size":2588,"mtime":1614232383365,"results":"264","hashOfConfig":"173"},{"size":3907,"mtime":1611126726000,"results":"265","hashOfConfig":"173"},{"size":3145,"mtime":1611126726000,"results":"266","hashOfConfig":"173"},{"size":5320,"mtime":1611843818000,"results":"267","hashOfConfig":"173"},{"size":9427,"mtime":1611842720000,"results":"268","hashOfConfig":"173"},{"size":9121,"mtime":1614437462110,"results":"269","hashOfConfig":"173"},{"size":10252,"mtime":1615612284192,"results":"270","hashOfConfig":"173"},{"size":10045,"mtime":1614324364951,"results":"271","hashOfConfig":"173"},{"size":19700,"mtime":1614328422194,"results":"272","hashOfConfig":"173"},{"size":1027,"mtime":1611556642028,"results":"273","hashOfConfig":"173"},{"size":342,"mtime":1611556642028,"results":"274","hashOfConfig":"173"},{"size":1299,"mtime":1615385360879,"results":"275","hashOfConfig":"173"},{"size":276,"mtime":1611556642020,"results":"276","hashOfConfig":"173"},{"size":993,"mtime":1611556642020,"results":"277","hashOfConfig":"173"},{"size":558,"mtime":1611768772000,"results":"278","hashOfConfig":"173"},{"size":836,"mtime":1611126726000,"results":"279","hashOfConfig":"173"},{"size":1236,"mtime":1611843734000,"results":"280","hashOfConfig":"173"},{"size":1205,"mtime":1614439800354,"results":"281","hashOfConfig":"173"},{"size":9757,"mtime":1615195010771,"results":"282","hashOfConfig":"173"},{"size":1889,"mtime":1613755630248,"results":"283","hashOfConfig":"173"},{"size":3115,"mtime":1614232314952,"results":"284","hashOfConfig":"173"},{"size":15712,"mtime":1611846564000,"results":"285","hashOfConfig":"173"},{"size":21447,"mtime":1615528871814,"results":"286","hashOfConfig":"173"},{"size":1353,"mtime":1611942404685,"results":"287","hashOfConfig":"173"},{"size":5867,"mtime":1615612055565,"results":"288","hashOfConfig":"173"},{"size":6957,"mtime":1615612139979,"results":"289","hashOfConfig":"173"},{"size":5861,"mtime":1616062567168,"results":"290","hashOfConfig":"173"},{"size":6008,"mtime":1613934701551,"results":"291","hashOfConfig":"173"},{"size":20948,"mtime":1615543304405,"results":"292","hashOfConfig":"173"},{"size":17269,"mtime":1615829872277,"results":"293","hashOfConfig":"173"},{"size":461,"mtime":1612160598145,"results":"294","hashOfConfig":"173"},{"size":845,"mtime":1612160598141,"results":"295","hashOfConfig":"173"},{"size":522,"mtime":1612160598141,"results":"296","hashOfConfig":"173"},{"size":24180,"mtime":1615828383148,"results":"297","hashOfConfig":"173"},{"size":1607,"mtime":1615390593847,"results":"298","hashOfConfig":"173"},{"size":24205,"mtime":1615887855190,"results":"299","hashOfConfig":"173"},{"size":10571,"mtime":1615798494728,"results":"300","hashOfConfig":"173"},{"size":8386,"mtime":1615788688654,"results":"301","hashOfConfig":"173"},{"size":1888,"mtime":1613202500613,"results":"302","hashOfConfig":"173"},{"size":12056,"mtime":1612947829283,"results":"303","hashOfConfig":"173"},{"size":11070,"mtime":1613714853362,"results":"304","hashOfConfig":"173"},{"size":8031,"mtime":1615558628347,"results":"305","hashOfConfig":"173"},{"size":23667,"mtime":1615611965263,"results":"306","hashOfConfig":"173"},{"size":9331,"mtime":1615611825387,"results":"307","hashOfConfig":"173"},{"size":9436,"mtime":1613841719888,"results":"308","hashOfConfig":"173"},{"size":6163,"mtime":1615030103062,"results":"309","hashOfConfig":"173"},{"size":5118,"mtime":1614775007183,"results":"310","hashOfConfig":"173"},{"size":4088,"mtime":1615990298376,"results":"311","hashOfConfig":"173"},{"size":10624,"mtime":1614858630095,"results":"312","hashOfConfig":"173"},{"size":21870,"mtime":1614864519544,"results":"313","hashOfConfig":"173"},{"size":8042,"mtime":1614929389930,"results":"314","hashOfConfig":"173"},{"size":25921,"mtime":1616046835404,"results":"315","hashOfConfig":"173"},{"size":1293,"mtime":1614925153204,"results":"316","hashOfConfig":"173"},{"size":17805,"mtime":1615621043612,"results":"317","hashOfConfig":"173"},{"size":2753,"mtime":1615558281828,"results":"318","hashOfConfig":"173"},{"size":9010,"mtime":1615977150809,"results":"319","hashOfConfig":"173"},{"size":12297,"mtime":1615895310347,"results":"320","hashOfConfig":"173"},{"size":13578,"mtime":1615896123759,"results":"321","hashOfConfig":"173"},{"size":12265,"mtime":1615902747807,"results":"322","hashOfConfig":"173"},{"size":6835,"mtime":1615799194853,"results":"323","hashOfConfig":"173"},{"size":26107,"mtime":1615831620394,"results":"324","hashOfConfig":"173"},{"size":5940,"mtime":1615895146940,"results":"325","hashOfConfig":"173"},{"size":8002,"mtime":1616345111128,"results":"326","hashOfConfig":"173"},{"size":6229,"mtime":1616152239479,"results":"327","hashOfConfig":"173"},{"size":3237,"mtime":1616151341666,"results":"328","hashOfConfig":"173"},{"size":4319,"mtime":1616158133940,"results":"329","hashOfConfig":"173"},{"size":10465,"mtime":1616212843084,"results":"330","hashOfConfig":"173"},{"size":275,"mtime":1616246527797,"results":"331","hashOfConfig":"173"},{"size":1096,"mtime":1616230447088,"results":"332","hashOfConfig":"173"},{"size":4351,"mtime":1616236894425,"results":"333","hashOfConfig":"173"},{"size":2975,"mtime":1616471329949,"results":"334","hashOfConfig":"173"},{"size":3163,"mtime":1616495959516,"results":"335","hashOfConfig":"173"},{"size":1965,"mtime":1616476799879,"results":"336","hashOfConfig":"173"},{"size":9679,"mtime":1616502223052,"results":"337","hashOfConfig":"173"},{"size":8822,"mtime":1616583238737,"results":"338","hashOfConfig":"173"},{"size":8285,"mtime":1616583036490,"results":"339","hashOfConfig":"173"},{"size":1257,"mtime":1616558383138,"results":"340","hashOfConfig":"173"},{"size":3314,"mtime":1616570608784,"results":"341","hashOfConfig":"173"},{"size":6377,"mtime":1616583184225,"results":"342","hashOfConfig":"173"},{"size":2679,"mtime":1616567463534,"results":"343","hashOfConfig":"173"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},"rsn5cu",{"filePath":"347","messages":"348","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"346"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"346"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"346"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"346"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"346"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"346"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"346"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"346"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"346"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"346"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"346"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"346"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"346"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"346"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"346"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"346"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"346"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"346"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"346"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"346"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"346"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"346"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"346"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"346"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"346"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"346"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"346"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"346"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"346"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"346"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"346"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"346"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"346"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"346"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"346"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"346"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"346"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"346"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"346"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"346"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"346"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"346"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"346"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"346"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"346"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"346"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"346"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"346"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"346"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"346"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"346"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"346"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"346"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"346"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"346"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"346"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"346"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"603"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"346"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"346"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"346"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"346"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"346"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"346"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"346"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"346"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"346"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"346"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"346"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"346"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"662"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"346"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"346"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"346"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"346"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"346"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"346"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"346"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"688","messages":"689","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"346"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"346"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"346"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"346"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"346"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"346"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"346"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"346"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"346"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"346"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"346"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"346"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"727"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"346"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"346"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"346"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"346"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"346"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"346"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"346"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"346"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"346"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"346"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"346"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"346"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"346"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"346"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"778","usedDeprecatedRules":"346"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781","usedDeprecatedRules":"346"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784","usedDeprecatedRules":"346"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787","usedDeprecatedRules":"346"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"346"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"346"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"346"},"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/index.js",[],["801","802"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/App.js",["803","804","805","806","807","808","809"],"import React from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux'\n// components\nimport Layout from \"./Layout\";\n\n// pages\nimport Error from \"../pages/error\";\nimport Login from \"../pages/login\";\nimport Sign from \"../pages/signInsignUp/Sign\"\n\n// context\nimport { useUserState } from \"../context/UserContext\";\n\n// React Notification\nimport { NotificationContainer } from 'react-notifications';\nimport Pricing from \"../pages/priceplans/Pricing\";\nimport OnboardDashboard from \"../pages/masterclient_onboarding/Onboarding\"\nimport SiteDashboard from \"../pages/SiteDashboard/SiteDashboard\";\nimport ChangePassword from \"../pages/changePassword/ChangePassword\";\nimport PaymentPage from \"../pages/PaymentPage/PaymentPage\";\n\nfunction App() {\n  // global\n  var { isAuthenticated, role } = useUserState();\n \n  return (\n    <>\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/app\" />} />\n          <PrivateRoute path=\"/app\" component={Layout} />\n          <PublicRoute path=\"/login\" component={Sign} />\n          <PublicRoute path=\"/paymentResponse\" component={PaymentPage} />\n          {/* <PublicRoute path=\"/plans/:id\" component={Pricing}/> */}\n          {/* <PublicRoute path=\"/app/onboarding/:id\" component={OnboardDashboard}/> */}\n          {/* <PublicRoute path=\"/app/siteDashboard/:siteid\" component={SiteDashboard}/> */}\n          {/* <PublicRoute path=\"/app/changepwd\" component={ChangePassword}/> */}\n          <Route component={Error} />\n          <NotificationContainer />\n        </Switch>\n      </HashRouter>\n    </>\n  );\n\n  // #######################################################################\n\n  function PrivateRoute({ component, ...rest }) {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          isAuthenticated ?(\n            React.createElement(component, props)\n          ) : (\n              <Redirect\n                to={{\n                  pathname: \"/login\",\n                  state: {\n                    from: props.location,\n                  },\n                }}\n              />\n            )\n        }\n      />\n    );\n  }\n\n  function PublicRoute({ component, ...rest }) {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          isAuthenticated ? (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: {\n                  from: props.location,\n                },\n              }}\n            />\n          ) : (\n              React.createElement(component, props)\n            )\n        }\n      />\n    );\n  }\n}\n\nexport default App;","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/context/LayoutContext.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/context/UserContext.js",["810","811"],"import React from \"react\";\nimport axiosInstance from '../components/Utils/AxiosInstance'\n// React Notification\nimport { NotificationManager } from 'react-notifications';\nimport NotifyAlert from '../components/ModalAlert/NotifyAlert'\n\n\nvar UserStateContext = React.createContext();\nvar UserDispatchContext = React.createContext();\n\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return {\n        ...state,\n        isAuthenticated: true,\n        error: false,\n        errMessage: \"\",\n        role: localStorage.getItem(\"client_role\"),\n        message: \"Logged In Successfully !\"\n      };\n    case \"SIGN_OUT_SUCCESS\":\n      return {\n        ...state,\n        isAuthenticated: false,\n        error: false,\n        errMessage: \"\",\n        message: \"\"\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        ...state,\n        isAuthenticated: false,\n        error: true,\n        errMessage: \"Oops !! Something went wrong. Please try again with valid credentials.\",\n        message: \"\"\n      };\n    case \"SIGNUP_SUCCESS\":\n      return {\n        ...state,\n        isAuthenticated: true,\n        error: false,\n        errMessage: \"\",\n        role: localStorage.getItem(\"client_role\"),\n\n      }\n    case \"SIGNUP_FAILURE\":\n      return {\n        ...state,\n        isAuthenticated: false,\n        error: true,\n        errMessage: \"Sign Up Failure\",\n        message: \"\"\n      };\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction UserProvider({ children }) {\n  var [state, dispatch] = React.useReducer(userReducer, {\n    isAuthenticated: !!localStorage.getItem(\"client_userID\"),\n    role: localStorage.getItem(\"client_role\"),\n    error: false,\n    errMessage: \"\",\n    message: \"\"\n  });\n\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n  );\n}\n\nfunction useUserState() {\n  var context = React.useContext(UserStateContext);\n  if (context === undefined) {\n    throw new Error(\"useUserState must be used within a UserProvider\");\n  }\n  return context;\n}\n\nfunction useUserDispatch() {\n  var context = React.useContext(UserDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\n  }\n  return context;\n}\n\nexport { UserProvider, useUserState, useUserDispatch, loginUser, signOut, signUpUser };\n\n// ###########################################################\n\n\n\nfunction loginUser(dispatch, login, password, history, setIsLoading) {\n  setIsLoading(true);\n  let obj = {\n    \"SOLITARY_MOBILE\": login,\n    \"SOLITARY_PASS\": password\n  }\n  // let urlBeta = \"http://betaapp.hygienequotient.com/api/User_Login.svc/web_login\"\n  // let urlApp = \"http://app.hygienequotient.com/api/User_Login.svc/web_login\"\n  axiosInstance.post('api/User_Login.svc/web_login', obj)\n    .then(res => {\n      if (res.data.data) {\n        localStorage.setItem('client_ID', res.data.data[0]['CLIENT_ID']);\n        localStorage.setItem('client_name', res.data.data[0]['CLIENT_NAME']);\n        localStorage.setItem('client_email', res.data.data[0]['EMAIL']);\n        localStorage.setItem('client_fname', res.data.data[0]['F_NAME']);\n        localStorage.setItem('client_lname', res.data.data[0]['L_NAME']);\n        localStorage.setItem('client_role', res.data.data[0]['ROLE']);\n        localStorage.setItem('client_roleID', res.data.data[0]['ROLE_ID']);\n        localStorage.setItem('client_mobile', res.data.data[0]['SOLITARY_MOBILE']);\n        localStorage.setItem('client_pass', res.data.data[0]['SOLITARY_PASS']);\n        localStorage.setItem('client_status', res.data.data[0]['STATUS']);\n        localStorage.setItem('client_userID', res.data.data[0]['USER_GUID']);\n        setIsLoading(false);\n        console.log(res.data.data)\n        console.log(res.data.data[0]['ROLE'])\n        console.log(res.data.response[0]['MESSAGE']);\n        dispatch({ type: 'LOGIN_SUCCESS' });\n        if (res.data.data[0]['ROLE'] === \"Site Manager\") {\n          console.log(\"client ID:\" + res.data.data[0]['CLIENT_ID']);\n          history.push(`/app/siteDashboard/${res.data.data[0]['CLIENT_ID']}`);\n        }\n        else if (res.data.data[0]['ROLE'] === \"Business User\") {\n          history.push(`/app/masterClientList/business/${res.data.data[0]['CLIENT_ID']}`);\n        }\n        else if (res.data.data[0]['ROLE'] === \"Master Client\") {\n          console.log('masterclient' + res.data.data[0]['CLIENT_ID'])\n          history.push(`/app/onboarding`);\n        }\n        else {\n          console.log(\"hello redirected\");\n          history.push('/app/dashboard');\n        }\n\n      } else {\n        dispatch({ type: \"LOGIN_FAILURE\" });\n        setIsLoading(false)\n      }\n    })\n    .catch(err => {\n      dispatch({ type: \"LOGIN_FAILURE\" });\n      setIsLoading(false)\n    })\n}\n\nfunction signOut(dispatch, history) {\n  localStorage.removeItem(\"client_ID\");\n  localStorage.removeItem(\"client_name\");\n  localStorage.removeItem(\"client_email\");\n  localStorage.removeItem(\"client_fname\");\n  localStorage.removeItem(\"client_lname\");\n  localStorage.removeItem(\"client_role\");\n  localStorage.removeItem(\"client_roleID\");\n  localStorage.removeItem(\"client_mobile\");\n  localStorage.removeItem(\"client_pass\");\n  localStorage.removeItem(\"client_status\");\n  localStorage.removeItem(\"client_userID\");\n  dispatch({ type: \"SIGN_OUT_SUCCESS\" });\n  history.push(\"/login\");\n}\n\nfunction signUpUser(dispatch, obj, history, setIsLoading) {\n  setIsLoading(true);\n  axiosInstance.post('api/Self_Client_Onboarding.svc/insert_master_client', obj)\n    .then(res => {\n      if (res.data.data) {\n        localStorage.setItem('client_ID', res.data.data[0]['MASTER_GUID']);\n        localStorage.setItem('client_name', res.data.data[0]['NAME']);\n        localStorage.setItem('client_email', res.data.data[0]['EMAIL']);\n        localStorage.setItem('client_role', \"Master Client\");\n        localStorage.setItem('client_mobile', res.data.data[0]['MOBILE_NO']);\n        localStorage.setItem('client_userID', res.data.data[0]['MASTER_GUID']);\n        setIsLoading(false);\n        dispatch({ type: 'SIGNUP_SUCCESS' });\n        history.push(`/app/plans`);\n      } else {\n        dispatch({ type: \"SIGNUP_FAILURE\" });\n        setIsLoading(false)\n      }\n    })\n    .catch(err => {\n      dispatch({ type: \"SIGNUP_FAILURE\" });\n      setIsLoading(false)\n    })\n}\n\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/themes/index.js",["812"],"import defaultTheme from \"./default\";\n\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst overrides = {\n  typography: {\n    h1: {\n      fontSize: \"3rem\",\n    },\n    h2: {\n      fontSize: \"2rem\",\n    },\n    h3: {\n      fontSize: \"1.64rem\",\n    },\n    h4: {\n      fontSize: \"1.5rem\",\n    },\n    h5: {\n      fontSize: \"1.285rem\",\n    },\n    h6: {\n      fontSize: \"1.142rem\",\n    },\n  },\n};\n\nexport default {\n  default: createMuiTheme({ ...defaultTheme, ...overrides }),\n};\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Utils/AxiosInstance.js",["813","814"],"import axios from \"axios\";\n\nlet interceptorEnabled = false;\n\nif (process.env.NODE_ENV !== \"production\") {\n  interceptorEnabled = true;\n}\nlet urlBeta = \"http://betaapp.hygienequotient.com/\"\nlet urlApp = \"http://app.hygienequotient.com/\"\nlet urlDemo = \"http://demo.hygienequotient.com/\"\nconst axiosInstance = axios.create({\n  baseURL: urlBeta\n});\n\naxiosInstance.interceptors.request.use(request => {\n  if (interceptorEnabled) {\n    console.log(`Request: ${request.method} ${request.baseURL}${request.url}`);\n  }\n  return request;\n});\n\naxiosInstance.interceptors.response.use(\n  response => {\n    if (interceptorEnabled) {\n      console.log(\"Response Status: \", response.status);\n      console.log(\"Response Summary: \", response.data.summary);\n      console.log(\"Response Content: \", response.data.data);\n    }\n    return response;\n  },\n  error => {\n    console.log(\"Error\", error);\n    return error;\n  }\n);\n\nexport default axiosInstance;","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/signInsignUp/Sign.js",["815","816","817","818","819","820","821","822","823","824","825","826","827"],"import React, { useState } from 'react'\nimport OtpInput from 'react-otp-input';\nimport OTPInput, { ResendOTP } from 'otp-input-react';\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\n\n// import className from \"classname\";\n\nimport styles from './style.module.css';\n\n//import images\nimport logo from './img/logo.png';\nimport log from './img/log.svg';\nimport register from './img/register.svg';\nimport sendotp from './img/sendOTP.png';\n// context\nimport { useUserDispatch, loginUser, useUserState, notifyAlert, signUpUser } from \"../../context/UserContext\";\n\n// get our fontawesome imports\nimport { faHome, faUser, faKey, faAt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// components\nimport axiosInstance from '../../components/Utils/AxiosInstance';\nimport NotifyAlert from '../../components/ModalAlert/NotifyAlert';\n\nfunction Login(props) {\n\n    const [signUpMode, setSignUpMode] = useState()\n    // global\n    const userDispatch = useUserDispatch();\n    const history = useHistory();\n    // local\n    const { error } = useUserState()\n    const { errMessage, message } = useUserState()\n    const [isLoading, setIsLoading] = useState(false);\n    const [loginValue, setLoginValue] = useState(\"\");\n    const [passwordValue, setPasswordValue] = useState(\"\");\n    const [newPasswordValue, setNewPasswordValue] = useState(\"\");\n    const [confirmPasswordValue, setConfirmPasswordValue] = useState(\"\");\n    const [passwordErr, setPasswordErr] = useState(\"\")\n    const [otpVerified, setOtpVerified] = useState(false)\n    const [sendOTP, setSendOTP] = useState(false)\n    const [mobile, setMobile] = useState(\"\")\n    const [otp, setOTP] = useState(\"\")\n    const [disableReset, setDisableReset] = useState(true)\n    const [mobileErrors, setMobileErrors] = useState('')\n    const [email, setEmail] = useState('')\n    const [emailErrors, setEmailErrors] = useState('')\n    const [companyName, setCompanyName] = useState('')\n    const [compNameErr, setCompNameErr] = useState('')\n    const [contactPerson, setContactPerson] = useState('')\n    const [contactNameErr, setContactNameErr] = useState('')\n    const [sentOTPmessage, setSentOTPmessage] = useState('')\n    const [notifyOpen, setNotifyOpen] = useState(false)\n    const [openForgotPwd, setOpenForgotPwd] = useState(false)\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    let generateOTPurl, verifyOTPurl\n    const handleGenerateOTP = (value) => {\n        if (value === \"signup\") {\n            generateOTPurl = 'api/Self_Client_Onboarding.svc/send_otp'\n        } else if (value === \"forgotpwd\") {\n            generateOTPurl = 'api/Forgot_Password.svc/send_otp'\n        }\n        if (validateMobile()) {\n            // axiosInstance.post('api/Client_Onboarding.svc/send_otp', {\n            axiosInstance.post(generateOTPurl, {\n                \"MOBILE_NO\": mobile\n            })\n                .then(res => {\n                    console.log(res.data.response[0]['CODE'])\n                    if (res.data.response[0]['CODE'] === \"200\") {\n                        setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                        setNotifyOpen(true)\n                        console.log(\"before\", sendOTP)\n                        setSendOTP(true)\n                        console.log(\"after\", sendOTP)\n                    } else {\n                        setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                        setNotifyOpen(true)\n                        console.log(res.data)\n                    }\n\n                })\n                .catch(err => console.log(err))\n\n        }\n\n        console.log(mobile)\n\n\n    }\n\n    const handleVerifyOTP = (value) => {\n        console.log(otp)\n        if (value === \"signup\") {\n            verifyOTPurl = 'api/Self_Client_Onboarding.svc/verify_otp'\n        } else {\n            verifyOTPurl = 'api/Forgot_Password.svc/verify_otp'\n        }\n        axiosInstance.post(verifyOTPurl, {\n            // axios.post(verifyOTPurl, {\n            \"MOBILE_NO\": mobile,\n            \"OTP\": otp\n        })\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                    setNotifyOpen(true)\n                    console.log(\"before\", otpVerified)\n                    setOtpVerified(true)\n                    console.log(\"after\", otpVerified)\n                } else {\n                    setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                    setNotifyOpen(true)\n                    console.log(res.data)\n                }\n            })\n\n            .catch(err => console.log(err))\n\n    }\n    const handleSubmit = () => {\n        const obj = {\n            \"MOBILE_NO\": mobile,\n            \"NAME\": companyName,\n            \"CONTACT_PERSON\": contactPerson,\n            \"EMAIL\": email\n        }\n        console.log(obj)\n        if (validateCompanyName() && validateEmail() && validateContactPerson()) {\n            signUpUser(userDispatch, obj, props.history, setIsLoading)\n            // axiosInstance.post('api/Self_Client_Onboarding.svc/insert_master_client', obj)\n            //     .then(res => {\n            //         console.log(res.data)\n            //         if (res.data.response[0]['CODE'] === \"200\") {\n            //             setCompanyName('')\n            //             setEmail('')\n            //             setContactPerson('')\n            //             setSentOTPmessage(res.data.response[0]['MESSAGE'])\n            //             setNotifyOpen(true)\n            //             console.log('redirect to plans')\n            //             history.push(`/plans/${res.data.data[0]['MASTER_GUID']}`);\n            //         } else {\n            //             setSentOTPmessage(res.data.response[0]['MESSAGE'])\n            //             setNotifyOpen(true)\n            //         }\n            //     })\n            //     .catch(err => console.log(err))\n        } else {\n\n            setSentOTPmessage(`${compNameErr}, ${emailErrors}, ${contactNameErr}`)\n            setNotifyOpen(true)\n        }\n    }\n    const renderButton = buttonProps => {\n        console.log(buttonProps)\n        return (\n            <button {...buttonProps} className={buttonProps.disabled === false ? styles.resendBtn : styles.disableResendBtn} >\n                {buttonProps.remainingTime !== 0\n                    ? `Please wait for ${buttonProps.remainingTime} sec`\n                    : \"Resend\"}\n            </button>\n        );\n    };\n    const checkValidity = yup.object().shape({\n        \"EMAIL\": yup\n            .string()\n            .email(\"Email ID is not valid\")\n            .required(),\n        \"NAME\": yup\n            .string()\n            .required('Name is required'),\n        \"MOBILE_NO\": yup\n            .string()\n            .matches(mobileRegex, 'Mobile number is not valid'),\n        // .positive()\n        // .integer()\n        // .number()\n        \"CONTACT_PERSON\": yup\n            .string()\n            .required('Contact Person is required'),\n    },\n        [[\"EMAIL\", \"NAME\", \"MOBILE_NO\", \"CONTACT_PERSON\"]]\n    )\n    const yupOptions = {\n        strict: false,\n        abortEarly: false, // return all errors\n    }\n    function validateMobile() {\n        let isValid = true;\n        if (!mobile) {\n            isValid = false;\n            setMobileErrors(\"Please enter your phone number.\");\n        }\n        if (typeof mobile !== \"undefined\") {\n            var pattern = new RegExp(/^[6789]\\d{9}$/);\n            if (!pattern.test(mobile)) {\n                isValid = false;\n                setMobileErrors(\"Please enter valid phone number.\");\n            } else if (mobile.length != 10) {\n                isValid = false;\n                setMobileErrors(\"Please enter valid phone number.\");\n            }\n        }\n        return isValid;\n    }\n\n    function validateEmail() {\n        let isValid = true;\n        if (!email) {\n            isValid = false;\n            setEmailErrors(\"Please enter your email Address.\");\n        }\n        if (typeof email !== \"undefined\") {\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n            if (!pattern.test(email)) {\n                isValid = false;\n                setEmailErrors(\"Please enter valid email address.\");\n            }\n        }\n        return isValid\n    }\n    function validateCompanyName() {\n        let isValid = true;\n        if (!companyName) {\n            isValid = false;\n            setCompNameErr(\"Please enter your Company Name.\");\n        }\n        return isValid\n    }\n    function validateContactPerson() {\n        let isValid = true;\n        if (!contactPerson) {\n            isValid = false;\n            setContactNameErr(\"Please enter contact person name.\");\n        }\n        return isValid\n    }\n    function validatePassword() {\n        let isValid = true;\n        if (newPasswordValue !== confirmPasswordValue) {\n            isValid = false;\n            setPasswordErr(\"New Password doesnot match with Confirm Password\")\n        }\n        return isValid\n    }\n    const renderTime = () => React.Fragment;\n\n    const handleClose = () => {\n        setNotifyOpen(false)\n    }\n    const handleForgotPassword = () => {\n        setOpenForgotPwd(true)\n    }\n    const handleSubmitForgotPwd = () => {\n        const obj = {\n            \"MOBILE_NO\": mobile,\n            \"PASSWORD\": newPasswordValue\n        }\n        if (validatePassword()) {\n            axiosInstance.post('api/Forgot_Password.svc/set_new_password', obj)\n                .then((res) => {\n                    if (res.data.response[0]['CODE'] === \"200\") {\n                        setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                        setNotifyOpen(true)\n                        setOpenForgotPwd(false)\n                        setSendOTP(false)\n                        setOtpVerified(false)\n                        setMobile()\n                        setOTP()\n                        setNewPasswordValue()\n                        setConfirmPasswordValue()\n                        history.push('/login')\n                    } else {\n                        setSentOTPmessage(res.data.response[0]['MESSAGE'])\n                        setNotifyOpen(true)\n                        setOpenForgotPwd(false)\n                        setSendOTP(false)\n                        setOtpVerified(false)\n                        setMobile()\n                        setOTP()\n                    }\n                })\n                .catch(err => console.log(err))\n        } else {\n            setSentOTPmessage('New Password doesnot match with Confirm Password')\n            setNotifyOpen(true)\n            setNewPasswordValue('')\n            setConfirmPasswordValue('')\n        }\n    }\n    console.log(disableReset)\n    console.log(\"message\", message)\n    return (\n        <>\n            <div className={`${styles.container} ${signUpMode ? styles.signUpMode : \"\"}`} >\n                <div className={styles.formsContainer}>\n                    <div className={styles.signinSignup}>\n                        <form className={styles.signinform}>\n                            <div className={styles.logo}>\n                                <img src={logo} width=\"220px\" />\n                            </div>\n                            {!openForgotPwd ?\n                                <>\n                                    <h2 className={styles.title}>Sign in</h2>\n                                    {errMessage ? <div className={styles.errMessage}>\n                                        <h5>{errMessage}</h5>\n                                    </div> : \"\"}\n                                    <div className={styles.inputField}>\n                                        <FontAwesomeIcon icon={faUser} />\n                                        <input type=\"text\" placeholder=\"Username\" value={loginValue} onChange={e => setLoginValue(e.target.value)} />\n                                    </div>\n                                    <div className={styles.inputField}>\n                                        <FontAwesomeIcon icon={faKey} />\n                                        <input type=\"password\" placeholder=\"Password\" value={passwordValue} onChange={e => setPasswordValue(e.target.value)} />\n                                    </div>\n                                    <input\n                                        type=\"button\"\n                                        value=\"Sign In\"\n                                        className={`${styles.btn} ${styles.solid}`}\n                                        onClick={() => {\n                                            return (\n                                                loginUser(userDispatch, loginValue, passwordValue, props.history, setIsLoading)\n\n                                            )\n                                        }}\n                                    />\n                                    <div>\n                                        <Button\n                                            style={{ textTransform: 'none' }}\n                                            color=\"primary\"\n                                            onClick={() => handleForgotPassword()}\n                                        >Forgotten Password?\n                                        </Button>\n                                    </div>\n                                </>\n                                : openForgotPwd && !sendOTP && !otpVerified ?\n                                    <><div style={{ height: \"70px\", width: \"70px\", borderRadius: \"50px\", backgroundColor: \"#F0F0F0\", textAlign: \"center\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"10px\" }}>\n                                        <img src={sendotp} alt=\"\" height=\"40px\" />\n                                    </div>\n                                        <h3>Verification</h3>\n                                        <p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"11px\" }}>We will send you <b>One Time Password</b></p>\n                                        <p style={{ textAlign: \"center\", color: \"grey\", paddingBottom: \"60px\", fontSize: \"11px\" }}>on your phone number</p>\n                                        <div className={styles.inputField}>\n                                            <FontAwesomeIcon icon={faUser} />\n                                            <input\n                                                type=\"text\"\n                                                name=\"phone\"\n                                                placeholder=\"Enter your Mobile Number\"\n                                                value={mobile}\n                                                onChange={e => setMobile(e.target.value)}\n                                            />\n                                        </div>\n                                        {mobileErrors ? <div className={styles.errMessage}>\n                                            <h5>{mobileErrors}</h5>\n                                        </div> : \"\"}\n                                        <input\n                                            type=\"button\"\n                                            className={styles.btn}\n                                            value=\"Get OTP\"\n                                            onClick={() => handleGenerateOTP(\"forgotpwd\")} />\n                                    </>\n                                    : openForgotPwd && sendOTP && !otpVerified ?\n                                        <>\n                                            <div style={{ height: \"70px\", width: \"70px\", borderRadius: \"50px\", backgroundColor: \"#F0F0F0\", textAlign: \"center\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"10px\" }}>\n                                                <img src={sendotp} alt=\"\" height=\"40px\" />\n                                            </div>\n                                            <h3>Verification</h3>\n                                            <p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"11px\", paddingBottom: \"60px\" }}>You will get an OTP  via <b>SMS</b></p>\n                                            <div>\n                                                <OTPInput\n                                                    value={otp}\n                                                    onChange={setOTP}\n                                                    autoFocus\n                                                    OTPLength={4}\n                                                    otpType=\"number\"\n                                                    disabled={false}\n                                                    style={{ paddingLeft: \"22px\", paddingBottom: \"20px\" }}\n                                                    secure\n                                                />\n                                            </div>\n                                            <div >\n                                                <input\n                                                    type=\"button\"\n                                                    className={styles.btn}\n                                                    style={{ marginLeft: \"5px\" }}\n                                                    value=\"Verify OTP\"\n                                                    onClick={() => handleVerifyOTP('forgotpwd')} />\n                                            </div>\n                                            <div style={{ display: \"flex\", paddingBottom: \"60px\" }}>\n                                                <div><p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"12px\" }}>Didn't receive the verification OTP?</p></div>\n                                                <ResendOTP\n                                                    renderButton={renderButton}\n                                                    renderTime={renderTime}\n                                                    style={{ marginRight: \"5px\", paddingLeft: \"10px\", fontSize: \"12px\" }}\n                                                // onResendClick={handleReset}\n                                                // onTimerComplete={handleTimerComplete}\n                                                />\n\n                                            </div>\n                                        </>\n                                        : openForgotPwd && sendOTP && otpVerified ?\n                                            <>\n                                                <div className={styles.inputField}>\n                                                    <FontAwesomeIcon icon={faKey} />\n                                                    <input\n                                                        type=\"password\"\n                                                        placeholder=\"Set New Password\"\n                                                        value={newPasswordValue}\n                                                        onChange={e => {\n                                                            setNewPasswordValue(e.target.value)\n                                                        }} />\n                                                </div>\n                                                <div className={styles.inputField}>\n                                                    <FontAwesomeIcon icon={faKey} />\n                                                    <input\n                                                        type=\"password\"\n                                                        placeholder=\"Confirm Password\"\n                                                        value={confirmPasswordValue}\n                                                        onChange={e => {\n                                                            setConfirmPasswordValue(e.target.value)\n                                                        }} />\n                                                </div>\n                                                <input\n                                                    type=\"button\"\n                                                    value=\"Submit\"\n                                                    className={`${styles.btn} ${styles.solid}`}\n                                                    onClick={() => handleSubmitForgotPwd()}\n                                                />\n                                            </>\n                                            : \"\"\n                            }\n                        </form>\n                        <form className={styles.signupform}>\n                            {/* <div className={styles.logo} style={{marginBottom: \"20px\"}}>\n                                <img src={logo} alt=\"\" width=\"150px\" height=\"120px\"/>\n                            </div> */}\n                            {/* <h2 className={styles.title}>Sign up</h2> */}\n                            {!sendOTP && !otpVerified ?\n                                <>\n                                    <div style={{ height: \"70px\", width: \"70px\", borderRadius: \"50px\", backgroundColor: \"#F0F0F0\", textAlign: \"center\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"10px\" }}>\n                                        <img src={sendotp} alt=\"\" height=\"40px\" />\n                                    </div>\n                                    <h3>Verification</h3>\n                                    <p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"11px\" }}>We will send you <b>One Time Password</b></p>\n                                    <p style={{ textAlign: \"center\", color: \"grey\", paddingBottom: \"60px\", fontSize: \"11px\" }}>on your phone number</p>\n                                    <div className={styles.inputField}>\n                                        <FontAwesomeIcon icon={faUser} />\n                                        <input\n                                            type=\"text\"\n                                            name=\"phone\"\n                                            placeholder=\"Enter your Mobile Number\"\n                                            value={mobile}\n                                            onChange={e => setMobile(e.target.value)}\n                                        />\n                                    </div>\n                                    {mobileErrors ? <div className={styles.errMessage}>\n                                        <h5>{mobileErrors}</h5>\n                                    </div> : \"\"}\n                                    <input\n                                        type=\"button\"\n                                        className={styles.btn}\n                                        value=\"Get OTP\"\n                                        onClick={() => handleGenerateOTP('signup')} />\n                                </>\n                                : sendOTP && !otpVerified ?\n                                    <>\n                                        <div style={{ height: \"70px\", width: \"70px\", borderRadius: \"50px\", backgroundColor: \"#F0F0F0\", textAlign: \"center\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"10px\" }}>\n                                            <img src={sendotp} alt=\"\" height=\"40px\" />\n                                        </div>\n                                        <h3>Verification</h3>\n                                        <p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"11px\", paddingBottom: \"60px\" }}>You will get an OTP  via <b>SMS</b></p>\n                                        <div>\n                                            <OTPInput\n                                                value={otp}\n                                                onChange={setOTP}\n                                                autoFocus\n                                                OTPLength={4}\n                                                otpType=\"number\"\n                                                disabled={false}\n                                                style={{ paddingLeft: \"22px\", paddingBottom: \"30px\" }}\n                                                secure\n                                            />\n                                        </div>\n                                        <div >\n                                            <input\n                                                type=\"button\"\n                                                className={styles.btn}\n                                                style={{ marginLeft: \"5px\" }}\n                                                value=\"Verify OTP\"\n                                                onClick={() => handleVerifyOTP('signup')} />\n                                        </div>\n                                        <div style={{ display: \"flex\", paddingBottom: \"60px\" }}>\n                                            <div><p style={{ textAlign: \"center\", color: \"grey\", fontSize: \"12px\" }}>Didn't receive the verification OTP?</p></div>\n                                            <ResendOTP\n                                                renderButton={renderButton}\n                                                renderTime={renderTime}\n                                                style={{ marginRight: \"5px\", paddingLeft: \"10px\", fontSize: \"12px\" }}\n                                            // onResendClick={handleReset}\n                                            // onTimerComplete={handleTimerComplete}\n                                            />\n\n                                        </div>\n\n                                    </>\n\n                                    : sendOTP && otpVerified ?\n                                        <>\n                                            <h2 className={styles.title}>Sign up</h2>\n                                            <div className={styles.inputField}>\n                                                <FontAwesomeIcon icon={faUser} />\n                                                <input type=\"text\" placeholder=\"Company Name\" value={companyName} onChange={e => setCompanyName(e.target.value)} />\n                                            </div>\n                                            {compNameErr ?\n                                                <div className={styles.errMessage}>\n                                                    <h5>{compNameErr}</h5>\n                                                </div> : \"\"\n                                            }\n                                            <div className={styles.inputField}>\n                                                <FontAwesomeIcon icon={faAt} />\n                                                <input type=\"email\" placeholder=\"Email\" value={email} onChange={e => setEmail(e.target.value)} />\n                                            </div>\n                                            {emailErrors ?\n                                                <div className={styles.errMessage}>\n                                                    <h5>{emailErrors}</h5>\n                                                </div> : \"\"\n                                            }\n                                            <div className={styles.inputField}>\n                                                <FontAwesomeIcon icon={faKey} />\n                                                <input type=\"text\" placeholder=\"Contact Person\" value={contactPerson} onChange={e => setContactPerson(e.target.value)} />\n                                            </div>\n                                            {contactNameErr ?\n                                                <div className={styles.errMessage}>\n                                                    <h5>{contactNameErr}</h5>\n                                                </div> : \"\"\n                                            }\n                                            <input type=\"button\" className={styles.btn} value=\"Sign up\" onClick={handleSubmit} />\n                                        </>\n                                        : \"\"}\n                        </form >\n                        {notifyOpen && <NotifyAlert message={sentOTPmessage} open={notifyOpen} close={handleClose} />}\n                    </div >\n                </div >\n                <div className={styles.panelsContainer}>\n                    <div className={`${styles.panel} ${styles.leftPanel}`}>\n                        <div className={styles.content}>\n                            <h4>Don't have an account ?</h4>\n                            {/* <p>\n                                Lorem ipsum, dolor sit amet consectetur adipisicing elit. Debitis,\n                                ex ratione. Aliquid!\n                            </p> */}\n                            <button \n                                style={{marginTop:\"10px\"}}\n                                className={`${styles.btn} ${styles.transparent}`} \n                                onClick={() => {\n                                    setSignUpMode(true)\n                                    setOpenForgotPwd(false)\n                                    setSendOTP(false)\n                                    setOtpVerified(false)\n                                    setMobile()\n                                    setOTP()\n                                }}>\n                                Sign up\n                            </button>\n                        </div>\n                        <img src={log} className={styles.image} alt=\"\" />\n                    </div>\n                    <div className={`${styles.panel} ${styles.rightPanel}`}>\n                        <div className={styles.content}>\n                            <h4>Already have an account ?</h4>\n                            <button style={{marginTop: \"10px\"}} className={`${styles.btn} ${styles.transparent}`} onClick={() => setSignUpMode(false)}>\n                                Sign in\n                            </button>\n                        </div>\n                        <img src={register} className={styles.image} alt=\"\" />\n                    </div>\n                </div>\n            </div >\n        </>\n    )\n}\n\nexport default Login\n\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/themes/default.js",["828"],"import tinycolor from \"tinycolor2\";\n\nconst primary = \"#536DFE\";\nconst secondary = \"#FF5C93\";\nconst warning = \"#FFC260\";\nconst success = \"#3CD4A0\";\nconst info = \"#9013FE\";\n\nconst lightenRate = 7.5;\nconst darkenRate = 15;\n\nexport default {\n  palette: {\n    primary: {\n      main: primary,\n      light: tinycolor(primary)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(primary)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    secondary: {\n      main: secondary,\n      light: tinycolor(secondary)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(secondary)\n        .darken(darkenRate)\n        .toHexString(),\n      contrastText: \"#FFFFFF\",\n    },\n    warning: {\n      main: warning,\n      light: tinycolor(warning)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(warning)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    success: {\n      main: success,\n      light: tinycolor(success)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(success)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    info: {\n      main: info,\n      light: tinycolor(info)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(info)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    text: {\n      primary: \"#4A4A4A\",\n      secondary: \"#6E6E6E\",\n      hint: \"#B9B9B9\",\n    },\n    background: {\n      default: \"#F6F7FF\",\n      light: \"#F3F5FF\",\n    },\n  },\n  customShadows: {\n    widget:\n      \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n    widgetDark:\n      \"0px 3px 18px 0px #4558A3B3, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n    widgetWide:\n      \"0px 12px 33px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n  },\n  overrides: {\n    MuiBackdrop: {\n      root: {\n        backgroundColor: \"#4A4A4A1A\",\n      },\n    },\n    MuiMenu: {\n      paper: {\n        boxShadow:\n          \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n      },\n    },\n    MuiSelect: {\n      icon: {\n        color: \"#B9B9B9\",\n      },\n    },\n    MuiListItem: {\n      root: {\n        \"&$selected\": {\n          backgroundColor: \"#F3F5FF !important\",\n          \"&:focus\": {\n            backgroundColor: \"#F3F5FF\",\n          },\n        },\n      },\n      button: {\n        \"&:hover, &:focus\": {\n          backgroundColor: \"#F3F5FF\",\n        },\n      },\n    },\n    MuiTouchRipple: {\n      child: {\n        backgroundColor: \"white\",\n      },\n    },\n    MuiTableRow: {\n      root: {\n        height: 56,\n      },\n    },\n    MuiTableCell: {\n      root: {\n        borderBottom: \"1px solid rgba(224, 224, 224, .5)\",\n        paddingLeft: 24\n      },\n      head: {\n        fontSize: \"0.95rem\",\n      },\n      body: {\n        fontSize: \"0.95rem\",\n      },\n    },\n    PrivateSwitchBase: {\n      root: {\n        marginLeft: 10\n      }\n    }\n  },\n};\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/error/Error.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Layout/Layout.js",["829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845"],"import React from \"react\";\nimport {\n  Route,\n  Switch,\n  Redirect,\n  withRouter,\n} from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { Box, IconButton, Link } from '@material-ui/core'\nimport Icon from '@mdi/react'\nimport Typo from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n//icons\nimport {\n  mdiFacebook as FacebookIcon,\n  mdiTwitter as TwitterIcon,\n  mdiGithub as GithubIcon,\n} from '@mdi/js'\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport Header from \"../Header\";\nimport Sidebar from \"../Sidebar\";\n\n// pages\nimport Dashboard from \"../../pages/dashboard\";\nimport Typography from \"../../pages/typography\";\nimport Notifications from \"../../pages/notifications\";\nimport Maps from \"../../pages/maps\";\nimport Tables from \"../../pages/tables\";\nimport Icons from \"../../pages/icons\";\nimport Charts from \"../../pages/charts\";\n\n// context\nimport { useUserState } from \"../../context/UserContext\";\nimport { useLayoutState } from \"../../context/LayoutContext\";\nimport MasterClientDashboard from \"../../pages/clientManagement/masterClientList/MasterClientDashboard\";\nimport BusinessList from \"../../pages/clientManagement/business/BusinessList\";\nimport CheckList from \"../../pages/clientManagement/checklist/CheckList\";\nimport DHLDashboard from \"../../pages/dhlDashboard/DHLDashboard\";\nimport SiteDashboard from \"../../pages/SiteDashboard/SiteDashboard\";\nimport NewTable from \"../../pages/clientManagement/checklist/component/NewTable/NewTable\";\nimport SiteTable from \"../../pages/clientManagement/business/component/Site/SiteTable\";\nimport SiteTableBusiness from \"../../pages/clientManagement/business/component/Site/SiteTableBusiness\";\nimport UsersList from \"../../pages/clientManagement/business/component/UsersModule/UsersList.js\";\nimport LiveQC from \"../../pages/liveQC/LiveQC\"\nimport UserModel from \"../../pages/userModel/UserModel\"\nimport { RotateLeft } from \"@material-ui/icons\";\nimport Onboarding from \"../../pages/masterclient_onboarding/Onboarding\";\nimport ChangePassword from \"../../pages/changePassword/ChangePassword\";\nimport Pricing from \"../../pages/priceplans/Pricing\";\nimport CreatePlan from \"../../pages/priceplans/createPlan/CreatePlan\";\nimport PublicChecklist from \"../../pages/publicChecklist/PublicChecklist\";\n\n\n\nfunction Copyright() {\n    return (\n      <div>\n        <Typo variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          {'Copyright © '}\n          <Link color=\"inherit\" href=\"https://material-ui.com/\">\n            Hygiene Quotient by Equinox Labs\n        </Link>{' '}\n          {new Date().getFullYear()}\n          {'.'}\n        </Typo>\n      </div>\n\n    );\n  }\n\nfunction Layout(props) {\n    var classes = useStyles();\n\n    // global\n    var layoutState = useLayoutState();\n    var { role } = useUserState();\n    console.log(useUserState())\n    return (\n      <div className={classes.root}>\n        {role === \"Site Manager\" ?\n          <>\n            <Header history={props.history} />\n            <div\n              className={classes.content}\n            >\n              <div className={classes.fakeToolbar} />\n              <Switch>\n                <Route\n                  exact\n                  path=\"/app\"\n                  render={() => <Redirect to=\"/app/siteDashboard\" />}\n                />\n                <Route path=\"/app/siteDashboard/:clientID\" component={SiteDashboard} />\n                <Route path=\"/app/changepwd\" component={ChangePassword} />\n              </Switch>\n            </div>\n          </>\n          :\n          role === \"Master Client\" ?\n            <>\n              <Header history={props.history} />\n              <div className={classes.content}>\n                <div className={classes.fakeToolbar} />\n                <Switch>\n                  <Route\n                    exact\n                    path=\"/app\"\n                    render={() => <Redirect to=\"/app/onboarding\" />}\n                  />\n                  <Route exact path=\"/app/plans\" component={Pricing} />\n                  <Route exact path=\"/app/onboarding\" component={Onboarding} />\n                  <Route exact path=\"/app/siteDashboard/:siteID\" component={SiteDashboard} />\n                  <Route exact path=\"/app/userslist/sm/:siteID\" component={UsersList} />\n                  <Route exact path=\"/app/userslist/bm/:businessID\" component={UsersList} />\n                  <Route exact path=\"/app/changepwd\" component={ChangePassword} />\n                </Switch>\n              </div>\n            </>\n            :\n            role === \"Business User\" ?\n              <>\n                <Header history={props.history} />\n                <div className={classes.onlyContent} >\n                  <div className={classes.fakeToolbar} />\n                  <Switch>\n                    <Route\n                      exact\n                      path=\"/app\"\n                      render={() => <Redirect to=\"/app/masterClientList/business\" />}\n                    />\n                    <Route path=\"/app/masterClientList/business/:businessID\" component={SiteTableBusiness} />\n                    <Route path=\"/app/siteDashboard/:clientID\" component={SiteDashboard} />\n                    <Route path=\"/app/changepwd\" component={ChangePassword} />\n                  </Switch>\n                </div>\n              </>\n\n              :\n              <>\n                <Header history={props.history} />\n                <Sidebar />\n                <div\n                  className={classnames(classes.content, {\n                    [classes.contentShift]: layoutState.isSidebarOpened,\n                  })}\n                >\n                  <div className={classes.fakeToolbar} />\n                  <Switch>\n                    {/* <Route path=\"/app/typography\" component={Typography} />\n                  <Route path=\"/app/tables\" component={Tables} />\n                <Route path=\"/app/notifications\" component={Notifications} /> */}\n                    <Route\n                      exact\n                      path=\"/app\"\n                      render={() => <Redirect to=\"/app/dashboard\" />}\n                    />\n                    <Route exact path=\"/app/dashboard\" component={Dashboard} />\n                    <Route exact path=\"/app/masterClientList\" component={MasterClientDashboard} />\n                    <Route exact path=\"/app/onboarding\" component={Onboarding} />\n                    <Route exact path=\"/app/siteDashboard/:siteID\" component={SiteDashboard} />\n                    <Route exact path=\"/app/userslist/sm/:siteID\" component={UsersList} />\n                    <Route exact path=\"/app/userslist/bm/:businessID\" component={UsersList} />\n                    <Route exact path=\"/app/changepwd\" component={ChangePassword} />\n\n                    {/* <Route\n                    exact\n                    path=\"/app/cm\"\n                    render={() => <Redirect to=\"/app/cm/masterClientList\" />}\n                  />\n\n                  <Route exact path=\"/app/cm/masterClientList\" component={MasterClientDashboard} />\n                  <Route exact path=\"/app/cm/masterClientList/business/:masterID\" component={BusinessList} />\n                  <Route exact path=\"/app/cm/masterClientList/business/sitelist/:businessID\" component={SiteTable} />\n                  <Route path=\"/app/cm/masterClientList/business/userslist/sm/:siteID\" component={UsersList} />\n                  <Route path=\"/app/cm/masterClientList/business/userslist/bm/:businessID\" component={UsersList} />\n                  <Route exact path=\"/app/cm/masterClientList/checklist/:masterID\" component={CheckList} />\n                  <Route path=\"/app/cm/masterClientList/checklist/:masterID/:checklistID\" component={NewTable} /> */}\n                    <Route exact path=\"/app/siteDashboard/:clentID\" component={SiteDashboard} />\n                    <Route exact path=\"/app/liveQC\" component={LiveQC} />\n                    <Route exact path=\"/app/usermodel\" component={UserModel} />\n                    <Route exact path=\"/app/createPlan\" component={CreatePlan} />\n                    <Route exact path=\"/app/list\" component={PublicChecklist} />\n                    {/* <Route path=\"/app/cm/compassDashboard\" component={CompassDashboard} />\n            <Route path=\"/app/cm/dhlDashboard\" component={DhlDashboard} /> */}\n                  </Switch>\n                  <Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n                    <Box pt={1} pb={1} className={classes.footer}>\n                      <Copyright />\n                    </Box>\n                  </Container>\n                </div>\n              </>\n        }\n      </div>\n    );\n  }\n\nexport default withRouter(Layout);\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/login/Login.js",["846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n} from \"@material-ui/core\";\nimport { withRouter } from \"react-router-dom\";\nimport classnames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// logo\nimport logo from \"./logo.svg\";\nimport logoHQ from \"./logoHQ.png\";\nimport google from \"../../images/google.svg\";\nimport bgImgSide from \"./bgImgSide.png\";\nimport mobile from \"./images/mobile.png\"\nimport aa from \"./images/aa.png\"\nimport bb from \"./images/bb.png\"\nimport cc from \"./images/cc.png\"\nimport dd from \"./images/dd.png\"\n\n// context\nimport { useUserDispatch, loginUser, useUserState } from \"../../context/UserContext\";\n\n// React Notification\nimport { NotificationManager } from 'react-notifications';\n\nconst phoneRegex = RegExp(/^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4,6})$/)\n\nfunction Login(props) {\n  const classes = useStyles();\n\n  // global\n  const userDispatch = useUserDispatch();\n  const {error} = useUserState()\n  // local\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [activeTabId, setActiveTabId] = useState(0);\n  const [nameValue, setNameValue] = useState(\"\");\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n\n  const [fieldError, setFieldError] = useState(\"\")\n  const [isError, setIsError] = useState(false)\n  \n  const createNotification = (type) => {\n    return () => {\n      switch (type) {\n        case 'info':\n          NotificationManager.info('Info message');\n          break;\n        case 'success':\n          NotificationManager.success('Success message', 'Title here');\n          break;\n        case 'warning':\n          NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n          break;\n        case 'error':\n          NotificationManager.error('Error message', 'Click me!', 5000, () => {\n            alert('callback');\n          });\n          break;\n      }\n    };\n  }\n  \n  const formError = loginValue.length>0 && loginValue.length<11\n  ?phoneRegex.test(loginValue)\n    ?\"\"\n    :\"Please enter a valid phone number\"\n  :\"Please enter a valid phone number\"\n\n  console.log(useUserState())  \n  console.log(props)\n  return (\n    <Grid container className={classes.container}>\n      <div className={classes.logotypeContainer}>\n        {/* <img src={bgImgSide} alt=\"logo\" className={classes.sideImage} /> */}\n        <div className={classes.mobileImg}>\n          <img src={mobile} alt=\"\" height=\"80%\" width=\"60%\" />\n        </div>\n        <div className={classes.textImgBox}>\n          <div className={classes.textImg}>\n            <div className={classes.imgBox}><img src={aa} alt=\"\" height=\"100%\" width=\"100%\"/></div>\n            <div className={classes.textBox}>\n              <h5 className={classes.heading}>Real Time Feedback</h5>\n              <small className={classes.subheading}>Using LiveView technology your on ground teams will receive real time feedback on the evidence they submit </small>\n            </div>\n          </div>\n          <div className={classes.textImg}>\n            <div className={classes.imgBox}><img src={bb} alt=\"\"height=\"100%\" width=\"100%\"/></div>\n            <div className={classes.textBox}>\n              <h5 className={classes.heading}>Easy to Use</h5>\n              <small className={classes.subheading}>Once logged in, get access to the checklist by a single click of button to submit the evidence  </small>\n            </div>\n          </div>\n          <div className={classes.textImg}>\n            <div className={classes.imgBox}><img src={cc} alt=\"\" height=\"100%\" width=\"100%\"/></div>\n            <div className={classes.textBox}>\n              <h5 className={classes.heading}>Compliance Analysis </h5>\n              <small className={classes.subheading}>By using Hygiene Quotient you will be able to enforce a higher degree of compliance. </small>\n            </div>\n          </div>\n          <div className={classes.textImg}>\n            <div className={classes.imgBox}><img src={dd} alt=\"\" height=\"100%\" width=\"100%\"/></div>\n            <div className={classes.textBox}>\n              <h5 className={classes.heading}>Live Metrics </h5>\n              <small className={classes.subheading}>As the teams on ground get feedback, their business application will get a live metric for every site - The Hygiene Quotient.</small>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={classes.formContainer}>\n        <div className={classes.form}>\n          {/* <Tabs\n              value={activeTabId}\n              onChange={(e, id) => setActiveTabId(id)}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              centered\n            >\n              <Tab label=\"Login\" classes={{ root: classes.tab }} />\n              <Tab label=\"New User\" classes={{ root: classes.tab }} />\n            </Tabs>\n            {activeTabId === 0 && ( */}\n          <React.Fragment>\n            {/* <Typography variant=\"h3\" className={classes.greeting}>\n                  SIGN IN\n              </Typography> */}\n            <img src={logoHQ} alt=\"logo\" className={classes.logotypeImage} />\n            {/* <Button size=\"large\" className={classes.googleButton}>\n                  <img src={google} alt=\"google\" className={classes.googleIcon} />\n                &nbsp;Sign in with Google\n              </Button> */}\n            {/* <div className={classes.formDividerContainer}>\n                  <div className={classes.formDivider} />\n                  <Typography className={classes.formDividerWord}>or</Typography>\n                  <div className={classes.formDivider} />\n                </div> */}\n            {error === true ?<div>\n              <Typography color=\"secondary\" className={classes.errorMessage}>\n                Something is wrong with your mobile number or password :(\n                </Typography>\n            </div>:\"\"}\n            <TextField\n              id=\"Mobile\"\n              \n              InputProps={{\n                classes: {\n                  underline: classes.textFieldUnderline,\n                  input: classes.textField,\n                },\n              }}\n              value={loginValue}\n              onChange={e => setLoginValue(e.target.value)}\n              margin=\"normal\"\n              placeholder=\"Mobile Number\"\n              error={fieldError !== \"\"}\n              helperText={formError}\n              fullWidth\n            />\n            <TextField\n              id=\"password\"\n              InputProps={{\n                classes: {\n                  underline: classes.textFieldUnderline,\n                  input: classes.textField,\n                },\n              }}\n              value={passwordValue}\n              onChange={e => setPasswordValue(e.target.value)}\n              margin=\"normal\"\n              placeholder=\"Password\"\n              type=\"password\"\n              fullWidth\n            />\n            <div className={classes.formButtons}>\n              {isLoading ? (\n                <CircularProgress size={26} className={classes.loginLoader} />\n              ) : (\n                  <Button\n                    disabled={\n                      loginValue.length === 0 || passwordValue.length === 0 || loginValue.length !== 10\n                    }\n                    onClick={() =>\n                      loginUser(\n                        userDispatch,\n                        loginValue,\n                        passwordValue,\n                        props.history,\n                        setIsLoading,\n                        \n                      )\n                    }\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                  >\n                    Login\n                  </Button>\n                )}\n              <Button\n                color=\"primary\"\n                size=\"large\"\n                className={classes.forgetButton}\n              >\n                Forget Password\n                </Button>\n            </div>\n          </React.Fragment>\n          {/* )} */}\n          {/* {activeTabId === 1 && (\n              <React.Fragment>\n                <Typography variant=\"h1\" className={classes.greeting}>\n                  Welcome!\n              </Typography>\n                <Typography variant=\"h2\" className={classes.subGreeting}>\n                  Create your account\n              </Typography>\n                <Fade in={error}>\n                  <Typography color=\"secondary\" className={classes.errorMessage}>\n                    Something is wrong with your login or password :(\n                </Typography>\n                </Fade>\n                <TextField\n                  id=\"name\"\n                  InputProps={{\n                    classes: {\n                      underline: classes.textFieldUnderline,\n                      input: classes.textField,\n                    },\n                  }}\n                  value={nameValue}\n                  onChange={e => setNameValue(e.target.value)}\n                  margin=\"normal\"\n                  placeholder=\"Full Name\"\n                  type=\"text\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"email\"\n                  InputProps={{\n                    classes: {\n                      underline: classes.textFieldUnderline,\n                      input: classes.textField,\n                    },\n                  }}\n                  value={loginValue}\n                  onChange={e => setLoginValue(e.target.value)}\n                  margin=\"normal\"\n                  placeholder=\"Email Adress\"\n                  type=\"email\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"password\"\n                  InputProps={{\n                    classes: {\n                      underline: classes.textFieldUnderline,\n                      input: classes.textField,\n                    },\n                  }}\n                  value={passwordValue}\n                  onChange={e => setPasswordValue(e.target.value)}\n                  margin=\"normal\"\n                  placeholder=\"Password\"\n                  type=\"password\"\n                  fullWidth\n                />\n                <div className={classes.creatingButtonContainer}>\n                  {isLoading ? (\n                    <CircularProgress size={26} />\n                  ) : (\n                      <Button\n                        onClick={() =>\n                          loginUser(\n                            userDispatch,\n                            loginValue,\n                            passwordValue,\n                            props.history,\n                            setIsLoading,\n                            setError,\n                          )\n                        }\n                        disabled={\n                          loginValue.length === 0 ||\n                          passwordValue.length === 0 ||\n                          nameValue.length === 0\n                        }\n                        size=\"large\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        className={classes.createAccountButton}\n                      >\n                        Create your account\n                      </Button>\n                    )} */}\n        </div>\n        {/* <div className={classes.formDividerContainer}>\n                  <div className={classes.formDivider} />\n                  <Typography className={classes.formDividerWord}>or</Typography>\n                  <div className={classes.formDivider} />\n                </div>\n                <Button\n                  size=\"large\"\n                  className={classnames(\n                    classes.googleButton,\n                    classes.googleButtonCreating,\n                  )}\n                >\n                  <img src={google} alt=\"google\" className={classes.googleIcon} />\n                &nbsp;Sign in with Google\n              </Button> \n              </React.Fragment>\n            )}\n          </div>*/}\n        {/* <Typography color=\"primary\" className={classes.copyright}>\n          © 2014-2019 Flatlogic, LLC. All rights reserved.\n        </Typography> */}\n      </div>\n    </Grid>\n  );\n}\n\nexport default withRouter(Login);\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/LiveQC.js",["863","864","865","866","867","868","869","870","871","872","873","874","875"],"import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport AdjustIcon from '@material-ui/icons/Adjust';\nimport DnsIcon from '@material-ui/icons/Dns';\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axiosInstance from '../../components/Utils/AxiosInstance';\nimport ReactPlayer from 'react-player'\nimport HelpIcon from '@material-ui/icons/Help';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport dataObj from './data'\nimport like from './like.png'\nimport axios from 'axios'\nimport { Redirect, useHistory } from 'react-router-dom';\nimport Lightbox from \"react-awesome-lightbox\";\nimport \"react-awesome-lightbox/build/style.css\";\nimport QueueTable from './QueueTable';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: 5,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n\n    },\n    gridGalery: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n        width: \"95%\",\n    },\n    gridTile: {\n        textAlign: \"left\",\n        borderRadius: \"5px\",\n        margin: 5,\n        boxShadow: \"0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)\",\n        transition: \"box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n        backgroundColor: \"#fff\"\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to bottom, rgba(0,0,0,0) 0%, ' +\n            'rgba(0,0,0,0) 70%, rgba(0,0,0,0) 100%)',\n    },\n    titleBarHover: {\n        background:\n            'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n            'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    icon: {\n        color: 'rgb(255,165,0)',\n        backgroundColor: \"white\",\n        borderRadius: \"20px\"\n    },\n    check: {\n        color: 'green',\n        backgroundColor: \"white\",\n        borderRadius: \"20px\"\n    },\n    cancel: {\n        color: 'red',\n        backgroundColor: \"white\",\n        borderRadius: \"20px\"\n    },\n    question: {\n        color: \"rgb(220,220,220)\",\n        borderRadius: \"20px\",\n        backgroundColor: \"black\",\n        marginRight: \"5px\"\n    },\n    buttons: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    successBtn: {\n        color: \"white\",\n        backgroundColor: \"green\"\n    },\n    errorBtn: {\n        color: \"white\",\n        backgroundColor: \"red\"\n    },\n    naBtn: {\n        backgroundColor: \"rgb(169,169,169)\"\n    },\n    hfive: {\n        textAlign: \"left\",\n        margin: 2,\n    },\n    hthree: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"left\",\n        textAlign: \"left\",\n        margin: 2,\n        padding: 5,\n        borderRadius: 3,\n        backgroundColor: \"rgb(220,220,220)\",\n        color: \"black\",\n        height: \"30px\"\n    },\n    response: {\n        textAlign: \"left\"\n    },\n    reactPlayer: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n    },\n    playerWrapper: {\n        position: \"relative\",\n        // paddingTop: \"56.25%\",\n        height: \"70%\",\n        cursor: \"pointer\",\n        perspective: \"500px\",\n        textAlign: \"center\"\n    },\n    imageCustom: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: \"100%\",\n        width: \"100%\",\n        objectFit: \"cover\",\n        // cursor: \"pointer\"\n    },\n    comment: {\n        margin: 10,\n        padding: 5\n    },\n    noData: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }\n\n}));\n\nexport default function LiveQC() {\n    const classes = useStyles();\n\n    const [data, setData] = useState(null)\n    const [info, setInfo] = useState({})\n    const [imageArr, setImageArr] = useState([])\n    const [queue, setQueue] = useState([])\n    const [qcComment, setQcComment] = useState('')\n    const [submitted, setSubmitted] = useState(false)\n    const [imageView, setImageView] = useState(false)\n    const [imageUrl, setImageUrl] = useState(\"\")\n    const [cont, setCont] = useState(false)\n    const history = useHistory();\n    const [hover, setHover] = useState(false);\n    const onEnter = () => {\n        setHover(true);\n    };\n\n    const onLeave = () => {\n        setHover(false);\n    };\n\n    useEffect(() => {\n        getQCInfo()\n        getQCQueue()\n    }, [])\n    const getQCInfo = () => {\n        axiosInstance.get('api/Insert_Audit_Answer.svc/get_qc_information')\n            .then(res => {\n                if (res.data.data !== null) {\n                    console.log(\"data ::\", res.data)\n                    setData({ ...res.data['data'][0] })\n                    setInfo({ ...res.data['Site_Infomation'][0] })\n                    setImageArr([...res.data['data'][0]['Images']])\n                }\n                else {\n                    setData(null)\n                    setInfo({})\n                    setImageArr([])\n                    console.log(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    const getQCQueue = () => {\n        axiosInstance.get('api/Qc_Verification.svc/get_question_in_que')\n            .then(res => setQueue([...res.data.data]))\n            .catch(err => console.log(err))\n    }\n    // const stateData = (res) => {\n    //     setData({ ...res['data'][0] })\n    //     setInfo({ ...res['Site_Infomation'][0] })\n    //     setImageArr([...res['data'][0]['Images']])\n    // }\n    const handleChange = (e) => {\n        setQcComment([e.target.value])\n    }\n\n    const handleSubmit = (input) => {\n        console.log(input)\n        const gradingObj = {\n            \"ANSWER_WEIGHT\": \"\",\n            \"ANS_TYPE\": \"\",\n            \"ADDITIONAL_RESPONSE\": qcComment[0],\n            \"ANSWER_ID\": data['ANSWER_ID'],\n            \"LASTUPDATED_BY\": localStorage.getItem('client_userID')\n        }\n        switch (input) {\n            case \"compliance\":\n                gradingObj['ANSWER_WEIGHT'] = data['OPTION1'];\n                gradingObj['ANS_TYPE'] = \"Compliance\"\n                break;\n            case \"partially\":\n                gradingObj['ANSWER_WEIGHT'] = data['OPTION2'];\n                gradingObj['ANS_TYPE'] = \"Partially Compliance\"\n                break;\n            case \"nonCompliance\":\n                gradingObj['ANSWER_WEIGHT'] = data['OPTION3'];\n                gradingObj['ANS_TYPE'] = \"Non Compliance\"\n                break;\n            case \"notApplicable\":\n                gradingObj['ANSWER_WEIGHT'] = data[\"OPTION4\"];\n                gradingObj['ANS_TYPE'] = \"Not Applicable\"\n\n        }\n        console.log(gradingObj)\n        axiosInstance.post(\"api/Qc_Verification.svc/qc_verification\", gradingObj)\n            .then(res => {\n                console.log(res)\n                getQCInfo()\n                setSubmitted(true)\n                getQCQueue()\n            })\n            .then(setQcComment(''))\n            .catch(err => console.log(err))\n    }\n    // const handleSubmission = () => {\n    //     axiosInstance.get('api/Insert_Audit_Answer.svc/get_qc_information')\n    //         .then(res => stateData(res))\n    //         .catch(err => console.log(err))\n\n    //     setSubmitted(true)\n\n    // }\n    const handleAnswer = (input, imageID) => {\n        const obj = {\n            ANS_TYPE: input,\n            IMAGE_ID: imageID,\n            VERIFY_BY: \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n        }\n        console.log(obj)\n        axiosInstance.post('api/Qc_Verification.svc/qc_image_verification', obj)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    getQCInfo()\n                } else {\n                    console.log(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    console.log(\"data\", data)\n    console.log(\"info\", info)\n    console.log(\"imageArr\", imageArr)\n\n    const arrayInfo = [\n        { name: \"Master Client Name \", value: info[\"MASTER_CLIENT_NAME\"], icon: <AdjustIcon /> },\n        { name: \"Business Name\", value: info['BUSINESS_NAME'], icon: <DnsIcon /> },\n        { name: \"Site Name\", value: `${info['NAME']}(Site ID: ${info['SITE_ID']})`, icon: <AdjustIcon /> },\n        { name: \"Mobile No\", value: info[\"MOBILE\"], icon: <PhoneAndroidIcon /> },\n        { name: \"Contact Person\", value: info[\"CONTACT_PERSON\"], icon: <PersonPinIcon /> },\n        { name: \"Check List \", value: info[\"CHECK_LIST\"], icon: <PlaylistAddCheckIcon /> },\n        { name: \"Audit Slot\", value: info[\"AUDIT_SLOTS\"], icon: <AlarmOnIcon /> }\n    ]\n    const handleImageView = (img) => {\n        console.log(img)\n        setImageUrl(img)\n        setImageView(true)\n    }\n\n    const handleRedirect = () => {\n        setSubmitted(false)\n        setCont(true)\n        history.push('/app/dashboard')\n    }\n\n\n    return (\n        imageView ? <Lightbox\n            image={imageUrl}\n            showTitle={false}\n            buttonAlign=\"center\"\n            onClose={() => {\n                setImageView(false)\n                setHover(false)\n            }}\n        />\n            : submitted && data === null\n                ? <div className={classes.root}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} className={classes.noData}>\n                            <div><img src={like} alt=\"\" width=\"50px\" height=\"50px\" /></div>\n                            <div><h1 style={{ color: \"#0aad2d\" }}>GREAT</h1></div>\n                            <div><h2>YOU HAVE DONE ALL QC QUESTIONS</h2></div>\n                            <div><Button variant=\"contained\" color=\"primary\" onClick={handleRedirect}>Continue to Dashboard</Button></div>\n                        </Grid>\n                    </Grid>\n                </div>\n                : !submitted && data === null\n                    ? <Grid container spacing={2}>\n                        <Grid item xs={12} className={classes.noData}>\n                            <div><h2>No QC Questions are Available</h2></div>\n                            <div><Button variant=\"contained\" color=\"primary\" onClick={handleRedirect}>Continue to Dashboard</Button></div>\n                        </Grid>\n                    </Grid>\n                    :\n                    queue.length < 2 ?\n                        <div className={classes.root}>\n                            <Grid container spacing={1}>\n                                <Grid item container xs={12} >\n                                    <Paper elevation={1} className={classes.paper}>\n                                        <h4 className={classes.hthree}>Site Information</h4>\n                                        <Grid container style={{ paddingTop: \"10px\", fontSize: \"14px\" }}>\n                                            {arrayInfo && arrayInfo.map(e =>\n                                                <Grid item container spacing={1} xs={12} sm={6} md={4}>\n                                                    <Grid item >\n                                                        {e.icon}\n                                                    </Grid>\n                                                    <Grid item >\n                                                        <p><b>{e.name} :</b> {e.value}</p>\n                                                    </Grid>\n                                                </Grid>\n                                            )}\n                                        </Grid>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Paper className={classes.paper}>\n                                        <Grid item container xs={12}>\n                                            <Grid item xs={10}>\n                                                <h4 className={classes.hthree}>\n                                                    <HelpIcon className={classes.question} /> {data['QUESTION_TEXT']}\n                                                </h4>\n                                            </Grid>\n                                            <Grid item xs={2} >\n                                                <h4 className={classes.hthree}>{data['AUDIT_TYPE']}</h4>\n                                            </Grid>\n                                        </Grid>\n                                    </Paper>\n                                </Grid>\n                                {data['RESPONSE'] !== null || data['RESPONSE'] !== \"\"\n                                    ? <Grid item xs={12}>\n                                        <Paper className={classes.paper}>\n                                            <h4 className={classes.response}>\n                                                Question Comment : {data['RESPONSE']}\n                                            </h4>\n\n                                        </Paper>\n                                    </Grid>\n                                    : \"\"}\n\n                                <Grid item xs={12} >\n                                    <Grid item xs={12}>\n                                        <Paper className={classes.paper}>\n                                            <div className={classes.gridGalery}>\n                                                <GridList className={classes.gridList} cols={4} cellHeight={250}>\n                                                    {data['ANSWER_TYPE'] !== \"Not Applicable\" && imageArr ? imageArr.map((tile) => (\n                                                        <GridListTile\n                                                            key={tile[\"IMG_ID\"]}\n                                                            className={classes.gridTile}\n                                                            onMouseOver={onEnter}\n                                                            onMouseLeave={onLeave}\n                                                        >\n                                                            {tile[`EVEDANCE_TYPE`] === \"Video\"\n                                                                ? <div className={classes.playerWrapper}>\n                                                                    <ReactPlayer\n                                                                        className={classes.reactPlayer}\n                                                                        width='100%'\n                                                                        height='100%'\n                                                                        controls\n                                                                        stopOnUnmount={false}\n                                                                        url={[\n                                                                            { src: `${tile[\"IMG\"]}`, type: 'video/mp4' },\n                                                                            { src: `${tile[\"IMG\"]}`, type: 'video/webm' },\n                                                                        ]}\n                                                                    /></div>\n                                                                : tile[`EVEDANCE_TYPE`] === \"Image\"\n                                                                    ? <div className={classes.playerWrapper}>\n                                                                        <img\n                                                                            src={tile[\"IMG\"]}\n                                                                            alt=\"\"\n                                                                            className={classes.imageCustom}\n                                                                            role=\"button\"\n                                                                            onClick={() => handleImageView(tile[\"IMG\"])}\n                                                                        />\n                                                                        {/* <div className={classes.menuOption}>\n                                                                        <div><CheckCircleIcon className={classes.check} /></div>\n                                                                        <div><WatchLaterIcon className={classes.icon} /></div>\n                                                                        <div><CheckCircleIcon className={classes.check} /></div>\n                                                                    </div> */}\n                                                                    </div>\n                                                                    : \"\"}\n                                                            <GridListTileBar\n                                                                // title={tile[\"CREATED_ON\"]}\n                                                                titlePosition=\"top\"\n                                                                classes={{\n                                                                    root: classes.titleBar,\n                                                                    title: classes.icon,\n                                                                }}\n                                                                actionIcon={\n                                                                    <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`}>\n                                                                        {tile[\"ANSWER_TYPE\"] === \"Compliance\"\n                                                                            ? <CheckCircleIcon className={classes.check} />\n                                                                            : tile[\"ANSWER_TYPE\"] === \"Non Compliance\" && tile[\"VERIFICATION_STATUS\"] === \"0\"\n                                                                                ? <WatchLaterIcon className={classes.icon} />\n                                                                                : tile[\"ANSWER_TYPE\"] === \"Non Compliance\" && tile[\"VERIFICATION_STATUS\"] === \"1\"\n                                                                                    ? <CancelIcon className={classes.cancel} />\n                                                                                    : <WatchLaterIcon className={classes.icon} />\n                                                                        }\n                                                                    </IconButton>\n                                                                }\n                                                                actionPosition=\"left\"\n                                                            />\n                                                            {hover ? <GridListTileBar\n                                                                titlePosition=\"top\"\n                                                                classes={{\n                                                                    // root: classes.titleBarHover,\n                                                                    title: classes.icon,\n                                                                }}\n                                                                actionIcon={\n                                                                    <div style={{}}>\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Compliance\", tile[\"IMG_ID\"])}>\n                                                                            <CheckCircleIcon className={classes.check} />\n                                                                        </IconButton>\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Partially Compliance\", tile[\"IMG_ID\"])}>\n                                                                            <ErrorIcon className={classes.icon} />\n                                                                        </IconButton>\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Non Compliance\", tile[\"IMG_ID\"])}>\n                                                                            <CancelIcon className={classes.cancel} />\n                                                                        </IconButton>\n                                                                    </div>\n                                                                }\n                                                                actionPosition=\"right\"\n                                                            /> : \"\"}\n                                                            <Typography>\n                                                                <h5 className={classes.hfive} style={{ marginTop: 10 }}>Created On : <span>{tile['CREATED_ON']}</span></h5>\n                                                                {tile['VERIFICATION_STATUS'] === \"0\"\n                                                                    ? <h5 className={classes.hfive}>Site Comment : <span>{tile['SITE_RESPONSE']}</span></h5>\n                                                                    : <>\n                                                                        <h5 className={classes.hfive}>QC Comment : <span>{tile['QC_RESPONSE']}</span></h5>\n                                                                        <h5 className={classes.hfive}>Site Comment : <span>{tile['SITE_RESPONSE']}</span></h5>\n                                                                    </>\n                                                                }\n                                                            </Typography>\n                                                        </GridListTile>\n                                                    )) : \"\"}\n                                                </GridList>\n                                            </div>\n                                            <Grid item xs={12} className={classes.comment}>\n                                                <TextField\n                                                    autoFocus\n                                                    id=\"qcComment\"\n                                                    label=\"QC Comment\"\n                                                    multiline\n                                                    placeholder=\"Write Your Text Here\"\n                                                    rows={2}\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={qcComment}\n                                                    onChange={handleChange}\n                                                />\n                                                <div className={classes.buttons}>\n                                                    {data['ANSWER_TYPE'] === \"Not Applicable\"\n                                                        ? <Button variant=\"contained\" className={classes.naBtn} onClick={() => handleSubmit('notApplicable')}>Not Applicable</Button>\n                                                        : <>\n                                                            <Button variant=\"contained\" className={classes.successBtn} onClick={() => handleSubmit('compliance')}>Compliance</Button>\n                                                            <Button variant=\"contained\" color=\"primary\" onClick={() => handleSubmit('partially')}>Partially Compliance</Button>\n                                                            <Button variant=\"contained\" className={classes.errorBtn} onClick={() => handleSubmit('nonCompliance')}>Non Compliance</Button>\n                                                            <Button variant=\"contained\" className={classes.naBtn} onClick={() => handleSubmit('notApplicable')}>Not Applicable</Button>\n                                                        </>\n                                                    }\n\n                                                </div>\n                                            </Grid>\n                                        </Paper>\n\n                                    </Grid>\n                                </Grid>\n\n                            </Grid>\n                        </div >\n                        :\n                        <Grid container spacing={1} >\n                            <Grid item container xs={8} spacing={1}>\n                                <Grid item container xs={12} >\n                                    <Paper elevation={1} className={classes.paper}>\n                                        <h5 className={classes.hthree}>Site Information</h5>\n                                        <Grid container style={{ paddingTop: \"10px\", textAlign: \"left\", fontSize: \"10px\" }}>\n                                            {arrayInfo && arrayInfo.map(e =>\n                                                <Grid item xs={12} sm={6} md={4} >\n                                                    {/* <Grid item >\n                                                        {e.icon}\n                                                    </Grid> */}\n                                                    <Grid item>\n                                                        <b>{e.name} :</b> {e.value}\n                                                    </Grid>\n                                                </Grid>\n                                            )}\n                                        </Grid>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Paper className={classes.paper}>\n                                        <Grid item container xs={12}>\n                                            <Grid item xs={10}>\n                                                <h4 className={classes.hthree}>\n                                                    <HelpIcon className={classes.question} /> {data['QUESTION_TEXT']}\n                                                </h4>\n                                            </Grid>\n                                            <Grid item xs={2} style={{textAlign: \"center\"}}>\n                                                <h4 className={classes.hthree}>{data['AUDIT_TYPE']}</h4>\n                                            </Grid>\n                                        </Grid>\n                                    </Paper>\n                                </Grid>\n                                {data['RESPONSE'] !== null || data['RESPONSE'] !== \"\"\n                                    ? <Grid item xs={12}>\n                                        <Paper className={classes.paper}>\n                                            <h5 className={classes.response}>\n                                                Question Comment : {data['RESPONSE']}\n                                            </h5>\n                                        </Paper>\n                                    </Grid>\n                                    : \"\"}\n\n                                <Grid item xs={12} >\n                                    <Grid item xs={12}>\n                                        <Paper className={classes.paper}>\n                                            <div className={classes.gridGalery}>\n                                                <GridList className={classes.gridList} cols={3} cellHeight={200}>\n                                                    {data['ANSWER_TYPE'] !== \"Not Applicable\" && imageArr ? imageArr.map((tile) => (\n                                                        <GridListTile\n                                                            key={tile[\"IMG_ID\"]}\n                                                            className={classes.gridTile}\n                                                            onMouseOver={onEnter}\n                                                            onMouseLeave={onLeave}\n                                                        >\n                                                            {tile[`EVEDANCE_TYPE`] === \"Video\"\n                                                                ? <div className={classes.playerWrapper}>\n                                                                    <ReactPlayer\n                                                                        className={classes.reactPlayer}\n                                                                        width='100%'\n                                                                        height='100%'\n                                                                        controls\n                                                                        stopOnUnmount={false}\n                                                                        url={[\n                                                                            { src: `${tile[\"IMG\"]}`, type: 'video/mp4' },\n                                                                            { src: `${tile[\"IMG\"]}`, type: 'video/webm' },\n                                                                        ]}\n                                                                    /></div>\n                                                                : tile[`EVEDANCE_TYPE`] === \"Image\"\n                                                                    ? <div className={classes.playerWrapper}>\n                                                                        <img\n                                                                            src={tile[\"IMG\"]}\n                                                                            alt=\"\"\n                                                                            className={classes.imageCustom}\n                                                                            role=\"button\"\n                                                                            onClick={() => handleImageView(tile[\"IMG\"])}\n                                                                        />\n                                                                        {/* <div className={classes.menuOption}>\n                                                                    <div><CheckCircleIcon className={classes.check} /></div>\n                                                                    <div><WatchLaterIcon className={classes.icon} /></div>\n                                                                    <div><CheckCircleIcon className={classes.check} /></div>\n                                                                </div> */}\n                                                                    </div>\n                                                                    : \"\"}\n                                                            <GridListTileBar\n                                                                // title={tile[\"CREATED_ON\"]}\n                                                                titlePosition=\"top\"\n                                                                classes={{\n                                                                    root: classes.titleBar,\n                                                                    title: classes.icon,\n                                                                }}\n                                                                actionIcon={\n                                                                    <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`}>\n                                                                        {tile[\"ANSWER_TYPE\"] === \"Compliance\"\n                                                                            ? <CheckCircleIcon className={classes.check} />\n                                                                            : tile[\"ANSWER_TYPE\"] === \"Non Compliance\" && tile[\"VERIFICATION_STATUS\"] === \"0\"\n                                                                                ? <WatchLaterIcon className={classes.icon} />\n                                                                                : tile[\"ANSWER_TYPE\"] === \"Non Compliance\" && tile[\"VERIFICATION_STATUS\"] === \"1\"\n                                                                                    ? <CancelIcon className={classes.cancel} />\n                                                                                    : <WatchLaterIcon className={classes.icon} />\n                                                                        }\n                                                                    </IconButton>\n                                                                }\n                                                                actionPosition=\"left\"\n                                                            />\n                                                            {hover ? <GridListTileBar\n                                                                titlePosition=\"top\"\n                                                                classes={{\n                                                                    // root: classes.titleBarHover,\n                                                                    title: classes.icon,\n                                                                }}\n                                                                actionIcon={\n                                                                    <div >\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Compliance\", tile[\"IMG_ID\"])} style={{ padding: \"2px\", margin: \"2px\" }}>\n                                                                            <CheckCircleIcon className={classes.check} />\n                                                                        </IconButton>\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Partially Compliance\", tile[\"IMG_ID\"])} style={{ padding: \"2px\", margin: \"2px\" }}>\n                                                                            <ErrorIcon className={classes.icon} />\n                                                                        </IconButton>\n                                                                        <IconButton aria-label={`star ${tile[\"CREATED_ON\"]}`} onClick={() => handleAnswer(\"Non Compliance\", tile[\"IMG_ID\"])} style={{ padding: \"2px\", margin: \"2px\" }}>\n                                                                            <CancelIcon className={classes.cancel} />\n                                                                        </IconButton>\n                                                                    </div>\n                                                                }\n                                                                actionPosition=\"right\"\n                                                            /> : \"\"}\n                                                            <Typography>\n                                                                <h6 className={classes.hfive} style={{ marginTop: 10 }}>Created On : <span>{tile['CREATED_ON']}</span></h6>\n                                                                {tile['VERIFICATION_STATUS'] === \"0\"\n                                                                    ? <h6 className={classes.hfive}>Site Comment : <span>{tile['SITE_RESPONSE']}</span></h6>\n                                                                    : <>\n                                                                        <h6 className={classes.hfive}>QC Comment : <span>{tile['QC_RESPONSE']}</span></h6>\n                                                                        <h6 className={classes.hfive}>Site Comment : <span>{tile['SITE_RESPONSE']}</span></h6>\n                                                                    </>\n                                                                }\n                                                            </Typography>\n                                                        </GridListTile>\n                                                    )) : \"\"}\n                                                </GridList>\n                                            </div>\n                                            <Grid item xs={12} className={classes.comment}>\n                                                <TextField\n                                                    autoFocus\n                                                    id=\"qcComment\"\n                                                    label=\"QC Comment\"\n                                                    multiline\n                                                    placeholder=\"Write Your Text Here\"\n                                                    rows={1}\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={qcComment}\n                                                    onChange={handleChange}\n                                                />\n                                                <div className={classes.buttons}>\n                                                    {data['ANSWER_TYPE'] === \"Not Applicable\"\n                                                        ? <Button variant=\"contained\" className={classes.naBtn} onClick={() => handleSubmit('notApplicable')}>Not Applicable</Button>\n                                                        : <>\n                                                            <Button variant=\"contained\" size=\"small\" className={classes.successBtn} onClick={() => handleSubmit('compliance')}>Compliance</Button>\n                                                            <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => handleSubmit('partially')}>Partially Compliance</Button>\n                                                            <Button variant=\"contained\" size=\"small\" className={classes.errorBtn} onClick={() => handleSubmit('nonCompliance')}>Non Compliance</Button>\n                                                            <Button variant=\"contained\" size=\"small\" className={classes.naBtn} onClick={() => handleSubmit('notApplicable')}>Not Applicable</Button>\n                                                        </>\n                                                    }\n\n                                                </div>\n                                            </Grid>\n                                        </Paper>\n\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item container xs={4} >\n                                {/* <Grid item xs={12}>\n                                    <Paper className={classes.paper}>\n                                        <h3 className={classes.hthree}>\n                                            QC in Queue\n                                        </h3>\n                                    </Paper>\n                                </Grid> */}\n                                <Grid item xs={12}>\n                                    {/* <Paper className={classes.paper}> */}\n                                    <QueueTable data={queue} />\n                                    {/* </Paper> */}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/data.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/login/styles.js",["876","877","878"],"import { makeStyles } from \"@material-ui/styles\";\nimport bgImg from './bgImg.jpg'\nimport bg1 from \"./images/bg1.jpg\"\n\nexport default makeStyles(theme => ({\n  container: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    backgroundImage: `url(${bg1})`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: \"fixed\"\n  },\n  innerCard: {\n    height: \"80vh\",\n    width: \"80vw\",\n    position: \"absolute\",\n    overflow: \"hidden\",\n    borderRadius:\"20px\",\n    background: \"inherit\",\n  },\n  innerCard: {\n    \"&::before\":{\n      height: \"70vh\",\n      width: \"70vw\",\n      content: \"\",\n      position: \"absolute\",\n      background: \"inherit\",\n      boxShadow: \"inset 0 0 0 300px rgba(0,0,0,0.8)\",\n      filter: \"blur(10px)\",  \n    }\n  },\n  logotypeContainer: {\n    height: \"80%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    padding: \"10px\",\n    alignItems: \"center\",\n    // boxShadow: theme.customShadows.widget,\n    // borderRadius: 5,\n    // background: \"inherit\",\n    // boxShadow: \"inset 0 0 0 300px rgba(255,255,255,0.5)\",\n    [theme.breakpoints.down(\"lg\")]: {\n      width: \"70%\",\n      padding: 30\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"50%\",\n      marginLeft: 50\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  logotypeImage: {\n    width: 165,\n    marginBottom: theme.spacing(4),\n    marginTop: theme.spacing(4),\n  },\n  mobileImg: {\n    width: \"40%\",\n    height:\"100%\",\n    display:\"flex\",\n    alignItems: \"center\",\n    justifyContent:\"center\",\n    // margin: theme.spacing(2)\n  },\n  textImgBox:{\n    width: \"60%\",\n    height:\"100%\",\n    display:\"flex\",\n    flexDirection:\"column\",\n    alignItems:\"center\",\n    justifyContent:\"center\",\n    padding: 60,\n    // margin: theme.spacing(2)\n  },\n  textImg:{\n    display:\"flex\",\n    flexDirection:\"row\",\n    alignItems:\"center\",\n    justifyContent:\"center\",\n    backgroundColor:\"white\",\n    borderRadius: 50,\n    margin: \"5px 0px\",\n    boxShadow:\"2px 5px 10px #888888\"\n  },\n  imgBox:{\n    width: \"20%\",\n    padding: 10\n  },\n  textBox:{\n    width: \"80%\",\n    display:\"flex\",\n    flexDirection:\"column\",\n    alignItems:\"left\",\n    justifyContent:\"center\",\n    \n  },\n  heading:{\n    margin: 0,\n  },\n  subheading:{\n    margin: 0,\n    fontSize: 10\n  },\n  sideImage: {\n    width: \"90%\",\n    \n  },\n  logotypeText: {\n    color: \"white\",\n    fontWeight: 500,\n    fontSize: 84,\n    fontStyle: \"italic\",\n    fontFamily: 'Raleway',\n    textShadow: \"2px 2px 4px #000000\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: 48,\n    },\n  },\n  formContainer: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    color: \"white !important\",\n    boxShadow: theme.customShadows.widget,\n    background: \"inherit\",\n    boxShadow: \"inset 0 0 0 300px rgba(0,0,0,0.9)\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"lg\")]: {\n      width: \"30%\",\n     \n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"35%\",\n      \n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"40%\",\n      \n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      width: \"60%\",\n    },\n  },\n  form: {\n    padding:5,\n    height: \"100%\",\n    textAlign:\"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems:\"center\"\n  },\n  tab: {\n    fontWeight: 400,\n    fontSize: 18,\n  },\n  greeting: {\n    fontWeight: 500,\n    textAlign: \"center\",\n    marginTop: theme.spacing(4),\n    color: `white !important`\n  },\n  subGreeting: {\n    fontWeight: 500,\n    textAlign: \"center\",\n    marginTop: theme.spacing(2),\n    color: `white !important`\n  },\n  googleButton: {\n    marginTop: theme.spacing(6),\n    boxShadow: theme.customShadows.widget,\n    backgroundColor: \"white\",\n    width: \"100%\",\n    textTransform: \"none\",\n  },\n  googleButtonCreating: {\n    marginTop: 0,\n  },\n  googleIcon: {\n    width: 30,\n    marginRight: theme.spacing(2),\n  },\n  creatingButtonContainer: {\n    marginTop: theme.spacing(2.5),\n    height: 46,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  createAccountButton: {\n    height: 46,\n    textTransform: \"none\",\n  },\n  formDividerContainer: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  formDividerWord: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  formDivider: {\n    flexGrow: 1,\n    height: 1,\n    backgroundColor: theme.palette.text.hint + \"40\",\n  },\n  errorMessage: {\n    textAlign: \"center\",\n    border: \"1px solid red\",\n    color: \"white\"\n  },\n  textFieldUnderline: {\n    \"&:before\": {\n      borderBottomColor: theme.palette.primary.light,\n    },\n    \"&:after\": {\n      borderBottomColor: theme.palette.primary.main,\n    },\n    \"&:hover:before\": {\n      borderBottomColor: `${theme.palette.primary.light} !important`,\n    },\n  },\n  textField: {\n    borderBottomColor: theme.palette.background.light,\n    color: `white !important`\n  },\n  formButtons: {\n    width: \"100%\",\n    marginTop: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  forgetButton: {\n    textTransform: \"none\",\n    fontWeight: 400,\n  },\n  loginLoader: {\n    marginLeft: theme.spacing(4),\n  },\n  copyright: {\n    marginTop: theme.spacing(4),\n    whiteSpace: \"nowrap\",\n    [theme.breakpoints.up(\"md\")]: {\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n    },\n  },\n}));\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Layout/styles.js",["879"],"import { makeStyles } from \"@material-ui/styles\";\n\nexport default makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    maxWidth: \"100vw\",\n    overflowX: \"hidden\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    '&.onlyContent': {\n      paddingTop: \"5%\"\n    },\n    '&.siteContent': {\n      paddingTop: \"5%\",\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      width: `calc(100vw - 240px)`,\n      maxWidth: \"80vw\",\n    },\n\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(1),\n    width: `calc(100vw - 240px)`,\n    minHeight: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  onlyContent: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    maxWidth: \"80vw\",\n    minHeight: \"100%\",\n\n  },\n  contentShift: {\n    width: `calc(100vw - ${240 + theme.spacing(6)}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  fakeToolbar: {\n    ...theme.mixins.toolbar,\n    flex: \"1 0 auto\",\n  },\n  link: {\n    '&:not(:first-child)': {\n      paddingLeft: 15\n    }\n  },\n\n  footer: {\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n\n}));\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/error/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/BusinessList.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/UsersList.js",["880","881","882","883","884","885","886","887"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\n\n// components\nimport AddUser from './component/AddUser'\nimport EditUser from './component/EditUser'\n\n// data\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\n\n//toggle\nimport Switch from \"react-switch\";\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\nconst theme = createMuiTheme({\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },  \n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: 'white',\n                padding: \"5px 10px\",\n                '&:nth-child(2)': {\n                    width: 100\n                  }\n            },\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: useStyles.tableRowSelectColor\n                }\n            }\n        },\n    },\n})\n\nexport default function UsersList() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [dataTableData, setDataTableData] = useState([])\n    const [masterID, setMasterID] = useState('')\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [editData, setEditData] = useState({})\n    const [checked, setChecked] = useState(true)\n    const role = window.location.href.split('/').slice(-2).reverse().pop()\n    const businessID = window.location.href.split('/').slice(-1).pop()\n\n    useEffect(() => {\n        getData()\n    }, [businessID])\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(tableMeta)}>\n                            <EditRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"\",\n            label: \"\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    let status = tableMeta.tableData[tableMeta.rowIndex]['STATUS']\n                    console.log(status)\n                    return (\n                        <Switch\n                            checked={status === \"1\"? false : true}\n                            onChange={() => handleChange(tableMeta)}\n                            offColor=\"#ef1049\"\n                            width={68}\n                            uncheckedIcon={\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        alignItems: \"center\",\n                                        height: \"100%\",\n                                        fontSize: 10,\n                                        color: \"white\",\n                                        paddingRight: 2,\n                                    }}\n                                >\n                                    Inactive\n                                </div>\n                            }\n                            checkedIcon={\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        alignItems: \"center\",\n                                        height: \"100%\",\n                                        fontSize: 10,\n                                        color: \"white\",\n                                        paddingLeft: 2,\n                                    }}\n                                >\n                                    Active\n                                </div>\n                            }\n                            className=\"react-switch\"\n                            id=\"icon-switch\"\n                        />\n                    );\n                }\n            }\n        },\n        {\n            name: \"NAME\",\n            label: \"Name\",\n            options: {\n                filter: false,\n                sort: true,\n            }\n        },\n        {\n            name: \"ROLE\",\n            label: \"Role\",\n            options: {\n                filter: false,\n                sort: true,\n            }\n        },\n        {\n            name: \"MOBILE_NO\",\n            label: \"Mobile No.\",\n            options: {\n                filter: false,\n                sort: true,\n            }\n        },\n        {\n            name: \"EMAIL\",\n            label: \"Email\",\n            options: {\n                filter: false,\n                sort: true,\n            }\n        },\n        \n    ]\n\n\n    const handleEdit = (data) => {\n        // console.log(tableMeta.tableMeta[tableMeta.rowData])\n        console.log(data.tableData[data['rowIndex']])\n        setEditData(data.tableData[data['rowIndex']])\n        setOpen(true)\n        // setIndexData({ ...dataTableData[dataIndex] })\n\n    }\n    console.log(editData)\n    const handleClose = () => {\n        setOpen(false)\n    }\n    const handleAddNewUser = () => {\n        setOpenAdd(true)\n    }\n    const handleCloseAddButton = () => {\n        setOpenAdd(false)\n    }\n    const handleReload = () => {\n        axiosInstance.get(`api/User_Master.svc/get_user_list/${businessID}`)\n            .then(res => setDataTableData([...res.data.data]))\n            .catch(err => console.log(err))\n    }\n    const handleChange = (tableMeta) => {\n        console.log(tableMeta)\n        let userID = tableMeta.tableData[tableMeta.rowIndex]['USER_GUID']\n        let status = tableMeta.tableData[tableMeta.rowIndex]['STATUS']\n        const obj = {\n            \"USER_GUID\":userID,\n            \"STATUS\":status === \"1\"?\"0\":\"1\",\n            'CREATED_BY': localStorage.getItem('client_userID')\n        }\n        axiosInstance.post('api/User_Master.svc/active_deactive_user', obj)\n            .then(res => {\n                if(res.data.response[0]['CODE'] === \"200\"){\n                    alert(res.data.response[0]['MESSAGE'])\n                    getData()\n                }else{\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n\n    }\n    function getData() {\n        console.log(businessID)\n        axiosInstance.get(`api/User_Master.svc/get_user_list/${businessID}`)\n            .then(res => setDataTableData([...res.data.data]))\n            .catch(err => console.log(err))\n    }\n    console.log(dataTableData)\n    return (\n        <>\n            <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n                <Grid item xs={3} >\n\n                </Grid>\n                <Grid item xs={3} >\n\n                </Grid>\n            </Grid>\n            <Grid container>\n                <Grid item xs={12}>\n                    <MuiThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title=\"User List\"\n                            data={dataTableData}\n                            columns={columns}\n                            options={{\n                                filter: true,\n                                selectableRows: 'none',\n                                filterType: 'dropdown',\n                                responsive: 'standard',\n                                rowsPerPage: 10,\n                                download: true,\n                                downloadOptions: {\n                                    filename: 'tableDownload.csv',\n                                    separator: ',',\n                                    filterOptions: {\n                                        useDisplayedColumnsOnly: true || false,\n                                        useDisplayedRowsOnly: true || true\n                                    } || false\n                                },\n                                // tableBodyHeight: '500px',\n                                tableBodyMaxHeight: \"\",\n                                setTableProps: () => {\n                                    return {\n                                        padding: 'default'\n                                    }\n                                },\n                                customToolbar: () => {\n                                    return (\n                                        <>\n                                            <IconButton >\n                                                <Button\n                                                    variant=\"contained\"\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                    startIcon={<AddCircleIcon />}\n                                                    onClick={handleAddNewUser}\n                                                >\n                                                    Add User\n                                                </Button>\n                                            </IconButton>\n                                        </>\n                                    );\n                                }\n                            }}\n                        />\n                    </MuiThemeProvider>\n                </Grid>\n                {open ? <EditUser open={open} data={editData} close={handleClose} reload={handleReload} /> : \"\"}\n                {openAdd ? <AddUser open={openAdd} businessID={businessID} role={role} close={handleCloseAddButton} reload={handleReload} /> : \"\"}\n            </Grid>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/SiteTableBusiness.js",["888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditSite from \"./component/EditSite/EditSite\";\nimport EditSiteNew from \"./component/EditSite/EditSiteNew\"\nimport AddBusiness from \"../AddBusiness/AddBusiness\";\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\nimport AddSite from \"./component/AddSite/AddSite\"\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n        // '&:nth-child(1)':{width:\"10px\"},\n        // '&:nth-child(2)':{width:\"80px\"},\n        // '&:nth-child(3)':{width:\"100px\"},\n        // '&:nth-child(4)':{width:\"50px\"},\n        // '&:nth-child(5)':{width:\"50px\"},\n        // '&:nth-child(6)':{width:\"150px\"},\n        // '&:nth-child(7)':{width:\"200px\"},\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: 'white',\n        padding: \"5px 10px\",\n        // '&:nth-child(1)':{width:\"10px\"},\n        // '&:nth-child(2)':{width:\"80px\"},\n        '&:nth-child(3)':{width:\"100px\"},\n        // '&:nth-child(4)':{width:\"50px\"},\n        // '&:nth-child(5)':{width:\"50px\"},\n        // '&:nth-child(6)':{width:\"150px\"},\n        '&:nth-child(7)':{width:\"200px\"},\n\n      },\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function SiteTable() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const businessID = window.location.href.split('/').slice(-1).pop()\n  const role = localStorage.getItem('client_role')\n  // const masterID = window.location.href.split('/').slice(-2).reverse().pop()\n  useEffect(() => {\n    function getData() {\n      console.log(businessID)\n      axiosInstance.get(`api/Sites_Master.svc/sites_list/${businessID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  \n  const columns = [\n    {\n      name: \"\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\n              {/* <EditRoundedIcon /> */}\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"RES_ID\",\n      label: \"Res ID\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"NAME\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"Contact Person\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    // {\n    //   name: \"CITY\",\n    //   label: \"City\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //   }\n    // },\n    // {\n    //   name: \"AREA\",\n    //   label: \"Area\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //   }\n    // },\n    {\n        name: \"MOBILE_NO\",\n        label: \"Mobile No.\",\n        options: {\n          filter: false,\n          sort: true,\n        }\n      },\n      {\n        name: \"CREATED_ON\",\n        label: \"Added Date\",\n        options: {\n          filter: false,\n          sort: true,\n        }\n      },\n      {\n        name: \"Site Dashboard\",\n        options: {\n          filter: false,\n          sort: false,\n          empty: true,\n          customBodyRender: (value, tableMeta, updateValue) => {\n            return (\n              <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={()=> handleSiteDashboard(tableMeta)} >\n                SITE DASHBOARD\n              </Button>\n            );\n          }\n        }\n      },\n  ]\n  const handleEdit = (dataIndex) => {\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  const handleAddNewSite = () => {\n    setOpenAdd(true)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleUserManager = (data) => {\n    console.log(data.tableData[data.rowIndex]['SITE_GUID'])\n    let siteID = data.tableData[data.rowIndex]['SITE_GUID']\n    console.log(data.rowData[1])\n    let path = `/app/cm/masterClientList/business/userslist/${siteID}`;\n    history.push(path)\n  }\n  const handleReload = () => {\n    axiosInstance.get(`api/Site_Master.svc/get_site_master/${businessID}`)\n    .then(res => setDataTableData([...res.data.data]))\n    .catch(err => console.log(err))\n  }\n  const handleSiteDashboard = (tableMeta) => {\n    console.log(tableMeta.tableData[tableMeta.rowIndex]['SITE_GUID'])\n    let path = `/app/siteDashboard/${tableMeta.tableData[tableMeta.rowIndex]['SITE_GUID']}`;\n    history.push(path)\n  }\n  \n  console.log(dataTableData)\n  return (\n    <>\n      <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={3} >\n\n        </Grid>\n        <Grid item xs={3} >\n\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Site List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                // tableBodyHeight: '500px',\n                tableBodyMaxHeight: \"600px\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n      </Grid>\n    </>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/SiteTable.js",["909","910","911","912","913","914","915","916","917"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditSite from \"./component/EditSite/EditSite\";\nimport EditSiteNew from \"./component/EditSite/EditSiteNew\"\nimport AddBusiness from \"../AddBusiness/AddBusiness\";\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\nimport AddSite from \"./component/AddSite/AddSite\"\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: 'white',\n        padding: \"5px 10px\",\n      },\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function SiteTable() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const businessID = window.location.href.split('/').slice(-1).pop()\n  const role = localStorage.getItem('client_role')\n  // const masterID = window.location.href.split('/').slice(-2).reverse().pop()\n  useEffect(() => {\n    function getData() {\n      console.log(businessID)\n      axiosInstance.get(`api/Sites_Master.svc/sites_list/${businessID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  \n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\n              <EditRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"RES_ID\",\n      label: \"Res ID\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"NAME\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"Contact Person\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    // {\n    //   name: \"AREA\",\n    //   label: \"Area\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //   }\n    // },\n    {\n        name: \"MOBILE_NO\",\n        label: \"Mobile No.\",\n        options: {\n          filter: false,\n          sort: true,\n        }\n      },\n      {\n        name: \"CREATED_ON\",\n        label: \"Added Date\",\n        options: {\n          filter: false,\n          sort: true,\n        }\n      },\n    {\n      name: \"User Manager\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={()=> handleUserManager(tableMeta)} >\n              USER MANAGER\n            </Button>\n          );\n        }\n      }\n    },\n    {\n      name: \"Site Dashboard\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={()=> handleSiteDashboard(tableMeta)} >\n              SITE DASHBOARD\n            </Button>\n          );\n        }\n      }\n    },\n  ]\n  const handleEdit = (dataIndex) => {\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  const handleAddNewSite = () => {\n    setOpenAdd(true)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleUserManager = (data) => {\n    console.log(data.tableData[data.rowIndex]['SITE_GUID'])\n    let siteID = data.tableData[data.rowIndex]['SITE_GUID']\n    console.log(data.rowData[1])\n    let path = `/app/cm/masterClientList/business/userslist/sm/${siteID}`;\n    history.push(path)\n  }\n  const handleReload = () => {\n    axiosInstance.get(`api/Sites_Master.svc/sites_list/${businessID}`)\n    .then(res => setDataTableData([...res.data.data]))\n    .catch(err => console.log(err))\n  }\n  const handleSiteDashboard = (tableMeta) => {\n    console.log(tableMeta.tableData[tableMeta.rowIndex]['SITE_GUID'])\n    let path = `/app/siteDashboard/${tableMeta.tableData[tableMeta.rowIndex]['SITE_GUID']}`;\n    history.push(path)\n  }\n  \n  console.log(dataTableData)\n  return (\n    <>\n      <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={3} >\n\n        </Grid>\n        <Grid item xs={3} >\n\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Site List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                // tableBodyHeight: '500px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                customToolbar: () => {\n                  return (\n                    <>\n                      <IconButton >\n                        <Button\n                          variant=\"contained\"\n                          size=\"small\"\n                          color=\"primary\"\n                          startIcon={<AddCircleIcon />}\n                          onClick={handleAddNewSite}\n                        >\n                          Add New Site\n                        </Button>\n                      </IconButton>\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        {open?<EditSiteNew open={open} data={indexData} close={handleClose} reload={handleReload}/>:\"\"}\n        {openAdd?<AddSite open={openAdd} businessID={businessID} close={handleCloseAddButton} reload={handleReload}/>:\"\"}\n      </Grid>\n    </>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/CheckList.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/MasterClientDashboard.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/SiteDashboard.js",["918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n  Label\r\n} from \"recharts\";\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from \"moment\";\r\nimport { subDays, addDays, format } from 'date-fns';\r\n\r\n// styles\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useStyles from \"./styles\";\r\nimport './sitedb.css';\r\n\r\n// components\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\n\r\nimport { LineChart, LineChartMTD } from './components/linechart/linechart';\r\nimport TrendChart from './components/linechart/TrendLine'\r\nimport TrendChartTD from './components/linechart/TrendlineTd'\r\nimport Chart from './components/BarChart'\r\nimport ApexChartsR from './components/radialchart'\r\nimport ApexChartsP from './components/piechart'\r\nimport ReactApexChartR from './components/Heatmap'\r\nimport ReactApexChart1 from './components/Heatmap_sec'\r\nimport BarChart from './components/ColoumnChart'\r\nimport Barline from './components/linechart/BarLine'\r\nimport GaugeChart from 'react-gauge-chart'\r\nimport axios from 'axios'\r\nimport Shiftdata from './components/dataShift'\r\nimport ApexChartsL from './components/linechart/test'\r\nimport ApexChartsp from './components/piechart'\r\nimport TwoWeeksChart from './components/TwoWeeksChart'\r\nimport axiosInstance from \"../../components/Utils/AxiosInstance\";\r\nimport TableSection from \"./components/Table/TableSection\"\r\nimport BarChartComp from \"./components/BarchatComp\"\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport TableS6 from \"./components/Table/TableS6\"\r\n//import ReactSpeedometer from './components/ReactSpeedometer'\r\n\r\nconst xLabels = new Array(7).fill(0).map((_, i) => `${i}`);\r\n\r\n// Display only even labels\r\nconst xLabelsVisibility = new Array(24)\r\n  .fill(0)\r\n  .map((_, i) => (i % 2 === 0 ? true : false));\r\n\r\nconst yLabels = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\r\nconst data = new Array(yLabels.length)\r\n  .fill(0)\r\n  .map(() =>\r\n    new Array(xLabels.length).fill(0).map(() => Math.floor(Math.random() * 100))\r\n  );\r\n\r\n\r\n\r\n\r\n\r\nexport default function SiteDashboard() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  console.log(startDate)\r\n  localStorage.setItem('start_data', startDate)\r\n  const setSTatrtDateHandler = (date) => {\r\n    setStartDate(date)\r\n    // localStorage.setItem('start_data',date)\r\n  }\r\n\r\n  const [newData, setNewData] = useState([])\r\n  const [shiftone, setshiftone] = useState()\r\n  const [shifttwo, setshifttwo] = useState()\r\n  const [shiftthree, setshiftthree] = useState()\r\n  let clientID = window.location.href.split('/').slice(-1).pop()\r\n  console.log(clientID)\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    function getData() {\r\n      axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_shift_wise_score/${clientID}`)\r\n        .then(res => storeData(res.data.data))\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n\r\n  }, [clientID])\r\n\r\n  const storeData = (res) => {\r\n    console.log(res)\r\n    if (res !== null) {\r\n      setNewData(res)\r\n      setshiftone([res[0]['DONE'], res[0]['PENDING'], res[0]['QC_PENDING']]);\r\n      setshifttwo([res[1]['DONE'], res[1]['PENDING'], res[1]['QC_PENDING']]);\r\n      setshiftthree([res[2]['DONE'], res[2]['PENDING'], res[2]['QC_PENDING']]);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  console.log(shiftone)\r\n  console.log(shifttwo)\r\n  console.log(shiftthree)\r\n\r\n\r\n  const [newDataa, setNewDataa] = useState([])\r\n  const [shift1, setshift1] = useState()\r\n  const [shift2, setshift2] = useState()\r\n  const [shift3, setshift3] = useState()\r\n  const [shifttime1, setshifttime1] = useState()\r\n  const [shifttime2, setshifttime2] = useState()\r\n  const [shifttime3, setshifttime3] = useState()\r\n\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    function getData() {\r\n      axiosInstance.get(`api/App_Dashboard.svc/get_todays_audit_score/${clientID}`)\r\n        .then(res => storeDataa(res.data.data))\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n\r\n  }, [clientID])\r\n\r\n  const storeDataa = (res) => {\r\n    console.log(res)\r\n    if (res !== null) {\r\n      setNewDataa(res)\r\n      setshift1([res[0]['PERCENTAGE']]);\r\n      setshift2([res[1]['PERCENTAGE']]);\r\n      setshift3([res[2]['PERCENTAGE']]);\r\n\r\n      setshifttime1([res[0]['TIME']]);\r\n      setshifttime2([res[1]['TIME']]);\r\n      setshifttime3([res[2]['TIME']]);\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  console.log(shifttime1)\r\n  const [newData1, setNewData1] = useState([])\r\n  const [gaugeData, setGaugdata] = useState()\r\n  const [yesterday, setYesterday] = useState()\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    function getData() {\r\n      axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_todays_score/${clientID}`)\r\n        .then(res => storeData1(res.data.data))\r\n\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [clientID])\r\n\r\n  const storeData1 = (res) => {\r\n    console.log(res)\r\n    if (res !== null) {\r\n      setNewData1(res)\r\n      setGaugdata([res[0]['PERCENTAGE']]);\r\n      setYesterday([res[0]['YESTERDAY']]);\r\n\r\n    }\r\n  }\r\n  console.log(yesterday)\r\n\r\n  const [newData2, setNewData2] = useState([])\r\n  const [mtdScore, setmtdScore] = useState()\r\n  const [sevenday, setsevenday] = useState()\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    function getData() {\r\n      axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_mtd_score/${clientID}`)\r\n        .then(res => storeData2(res.data.data))\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [clientID])\r\n\r\n  const storeData2 = (res) => {\r\n    console.log(res)\r\n    if (res !== null) {\r\n      setNewData2(res)\r\n      setmtdScore([res[0]['PERCENTAGE']]);\r\n      setsevenday([res[0]['LAST7DAY']]);\r\n\r\n    }\r\n  }\r\n  console.log(sevenday)\r\n\r\n  const [auditday, setAuditday] = useState([])\r\n  const [percentagefirst, setPercentagefirst] = useState([])\r\n  const [percentagesecond, setPercentagesecond] = useState([])\r\n  const [percentagethird, setPercentagethird] = useState([])\r\n  const [percentagefourth, setPercentagefourth] = useState([])\r\n  const [percentagefifth, setPercentagefifth] = useState([])\r\n  const [percentagesixth, setPercentagesixth] = useState([])\r\n  const [error, setError] = useState('')\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    function getData() {\r\n      axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_weekly_score/${clientID}`)\r\n        .then(res => storeTwoWeeks(res.data))\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [clientID])\r\n\r\n\r\n\r\n\r\n  const storeTwoWeeks = (res) => {\r\n    console.log(res);\r\n    if (res !== null) {\r\n      let firstweek = res.first_week\r\n      let secondweek = res.second_week\r\n      let thirdweek = res.third_week\r\n      let fourthweek = res.four_week\r\n      let fifthweek = res.five_week\r\n      let sixthweek = res.six_week\r\n\r\n      let percentArrfirstWeek = firstweek && firstweek.map(item => item['PERCENTAGE'])\r\n      setPercentagefirst(percentArrfirstWeek)\r\n\r\n      let percentArrsecondtWeek = secondweek && secondweek.map(item => item['PERCENTAGE'])\r\n      setPercentagesecond(percentArrsecondtWeek)\r\n\r\n      let percentArrthirdWeek = thirdweek && thirdweek.map(item => item['PERCENTAGE'])\r\n      setPercentagethird(percentArrthirdWeek)\r\n\r\n\r\n      let percentArrfourthWeek = fourthweek && fourthweek.map(item => item['PERCENTAGE'])\r\n      setPercentagefourth(percentArrfourthWeek)\r\n\r\n      let percentArrfifthtWeek = fifthweek && fifthweek.map(item => item['PERCENTAGE'])\r\n      setPercentagefifth(percentArrfifthtWeek)\r\n\r\n      let percentArrsixthWeek = sixthweek && sixthweek.map(item => item['PERCENTAGE'])\r\n      setPercentagesixth(percentArrsixthWeek)\r\n\r\n\r\n\r\n      let auditdays = firstweek && firstweek.map(item => item['AUDIT_DAY'])\r\n      setAuditday(auditdays)\r\n    } else {\r\n      setError(res.data.response[\"MESSAGE\"])\r\n    }\r\n\r\n  }\r\n  const ExampleCustomInput = ({ value, onClick }) => (\r\n    <button className=\"example-custom-input\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n  const [days, setDays] = React.useState('');\r\n  const handleChange = (event) => {\r\n    setDays(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n\r\n  console.log(format(startDate, 'dd-MM-yyyy'))\r\n  return (\r\n    <>\r\n      <Grid container spacing={1}>\r\n        <Typography gutterBottom variant=\"h3\">\r\n          Site Dashboard\r\n      </Typography>\r\n        <Grid item container spacing={1}>\r\n          <Grid item md={4} sm={4} xs={12}>\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n              <div className=\"info_wrap\">\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Today's Score\r\n                </Typography>\r\n                {gaugeData\r\n                  ? <>\r\n                    <h1 style={{ color: gaugeData <= 30 ? \"red\" : gaugeData <= 80 ? \"#f5cd19\" : gaugeData > 80 ? \"green\" : \"black\" }}>{gaugeData}% </h1>\r\n                    <Typography gutterBottom variant=\"subtitle2\" style={{ fontWeight: \"500\", fontSize: \"16px\" }}>\r\n                      Yesterday's Score {yesterday}%\r\n                  </Typography>\r\n                  </>\r\n                  : <h5>Data Unavailable</h5>}\r\n                <div className={classes.chart}>\r\n                  <LineChart />\r\n                </div>\r\n              </div>\r\n            </Widget>\r\n          </Grid>\r\n          <Grid item md={4} sm={4} xs={12}>\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n              <div className=\"info_wrap\">\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  MTD Score\r\n                </Typography>\r\n                {mtdScore ? <><h1\r\n                  style={{ color: mtdScore <= 30 ? \"red\" : mtdScore <= 80 ? \"#f5cd19\" : \"green\" }}\r\n                >{mtdScore}%</h1>\r\n                  <Typography gutterBottom variant=\"subtitle2\" style={{ fontWeight: \"500\", fontSize: \"16px\" }}>\r\n                    Last Seven Days Score {sevenday}%\r\n                </Typography></> : <h5>Data Unavailable</h5>}\r\n\r\n                <div className={classes.chart}>\r\n                  <LineChartMTD />\r\n                </div>\r\n              </div>\r\n            </Widget>\r\n          </Grid>\r\n\r\n\r\n\r\n          <Grid item md={4} sm={4} xs={12}>\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n              <Grid container className=\"info_wrap\">\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Today's Overview\r\n                </Typography>\r\n                {newData ? (\r\n                <>\r\n                <Grid item xs={12} container className='chart_wrap_a' spacing={0}>\r\n                  <Grid item xs={3}>\r\n                    <h5>Shift 1</h5>\r\n                  </Grid>\r\n                  <Grid item xs={9}>\r\n                    <Chart\r\n                      props={shiftone? shiftone : []}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                  <Grid item xs={12} container className='chart_wrap_a' spacing={0}>\r\n                    <Grid item xs={3}>\r\n                      <h5>Shift 2</h5>\r\n                    </Grid>\r\n                    <Grid item xs={9}>\r\n                      <Chart\r\n                        props={shifttwo ? shifttwo : []}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs={12} container className='chart_wrap_a'>\r\n                    <Grid item xs={3}>\r\n                      <h5>Shift 3</h5>\r\n                    </Grid>\r\n                    <Grid item xs={9} >\r\n                      <Chart\r\n                        props={shiftthree ? shiftthree : []}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container spacing={1} className={classes.btm}>\r\n                    <Grid item xs={4}>\r\n                      <Paper className={classes.paperDone}> Done </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <Paper className={classes.paperDue}> Due </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <Paper className={classes.paperOa}> QA </Paper>\r\n                    </Grid>\r\n                  </Grid></>)\r\n                  : <h5>Data Unavailable</h5>}\r\n              </Grid>\r\n            </Widget>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={12} sm={12} md={5}>\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n              <Grid container className=\"radial_graph\">\r\n                <Grid item xs={12} id=\"chart_2\">\r\n                  {gaugeData ? <GaugeChart id=\"gauge-chart5\"\r\n                    nrOfLevels={100}\r\n                    arcsLength={[0.3, 0.5, 0.2]}\r\n                    colors={['#EA4228', '#F5CD19', '#5BE12C']}\r\n                    percent={gaugeData / 100 || 0}\r\n                    textColor={\"#000\"}\r\n                    arcPadding={0.02}\r\n                  /> : <h5>Data Unavailable</h5>}\r\n                  <Grid item>\r\n                    <Typography variant=\"h4\" gutterBottom>\r\n                      Overall\r\n                  </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Widget>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={7} >\r\n\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n              style={{ overflow: \"hidden\" }}\r\n            >\r\n\r\n              {newData ?\r\n                <Grid container className=\"radial_graph\">\r\n                  <Grid item xs={4}>\r\n                    <div id=\"chart_2\">\r\n                      <ApexChartsP\r\n                        props1={shift1 ? shift1 : []}\r\n                        labels={shifttime1? shifttime1 : []}\r\n\r\n                      />\r\n                      {/* <h5>6:00 AM</h5> */}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <div id=\"chart_2\">\r\n                      <ApexChartsP\r\n                        props1={shift2 ? shift2 : []}\r\n                        labels={shifttime2 ? shifttime2 : []}\r\n                      />\r\n                      <Grid item>\r\n                        <Typography variant=\"h5\" gutterBottom >\r\n                        Today's audit score\r\n                        </Typography>\r\n                      </Grid>\r\n                      {/* <h4 style={{ paddingBottom: \"20px\" }}></h4> */}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <div id=\"chart_2\">\r\n                      <ApexChartsP\r\n                        props1={shift3 ? shift3 : []}\r\n                        labels={shifttime3 ? shifttime3 : []}\r\n                      />\r\n                      {/* <h5>6:00 PM</h5> */}\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n                : <Typography variant=\"body2\" gutterBottom>\r\n                  Data Unavailable\r\n              </Typography>}\r\n            </Widget>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={12} sm={12} md={6}>\r\n\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n\r\n              <Grid container direction=\"column\" className=\"trendchart\">\r\n                <Grid item container xs={12}>\r\n                  <Grid item xs={6}>\r\n                    <h3>Select Value</h3>\r\n                    <Select\r\n                      labelId=\"demo-customized-select-label\"\r\n                      id=\"demo-customized-select\"\r\n                      defaultValue=\"LAST7DAY\"\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                      style={{ marginBottom: \"20px\" }}\r\n                    >\r\n\r\n                      <MenuItem value=\"LAST7DAY\">Last 7 Day's</MenuItem>\r\n                      <MenuItem value=\"MONTH\">Month</MenuItem>\r\n\r\n                    </Select>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item >\r\n                  <BarChart clientID={clientID} days={days || \"LAST7DAY\"} />\r\n                </Grid>\r\n                <Grid item style={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h5\" gutterBottom className={classes.thirdRowBtm}>\r\n                    Last Seven Days's Trend\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Widget>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={6}>\r\n            <Widget\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n              disableWidgetMenu={true}\r\n            >\r\n              <Grid container direction=\"column\" className=\"trendchart\">\r\n                <Grid item >\r\n                  <TwoWeeksChart error={error}\r\n                    first={percentagefirst}\r\n                    second={percentagesecond}\r\n                    third={percentagethird}\r\n                    fourth={percentagefourth}\r\n                    fifth={percentagefifth}\r\n                    sixth={percentagesixth}\r\n                    audit={auditday} />\r\n                </Grid>\r\n                <Grid item style={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h5\" gutterBottom className={classes.thirdRowBtm}>\r\n                    Last 2 Weeks Comparison\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Widget>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} >\r\n          <Widget\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n            disableWidgetMenu={true}\r\n          >\r\n            <Grid container direction=\"column\" className=\"trendChart\">\r\n              <Grid item >\r\n                <TrendChartTD clientID={clientID} />\r\n              </Grid>\r\n              <Grid item style={{ textAlign: 'center' }}>\r\n                <Typography variant=\"h5\" gutterBottom className={classes.thirdRowBtm}>\r\n                  Last 30 Day's Trend\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12} style={{ marginTop: \"15px\" }}>\r\n          <Widget\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n            disableWidgetMenu={true}\r\n          >\r\n            <Grid container direction=\"column\" className=\"tableQcs\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\" gutterBottom >\r\n                  Question Wise Performance\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item container spacing={1}>\r\n                <Grid item xs={2} className={classes.dateFilter}>\r\n                  <p>Select Date</p>\r\n                  <DatePicker\r\n                    selected={startDate}\r\n                    onChange={date => setSTatrtDateHandler(date)}\r\n                    style={{ background: \"#fff!important\" }}\r\n                    className=\"customdt\"\r\n                    // minDate={subDays(new Date(), 7)}\r\n                    // maxDate={addDays(new Date(), 0)}\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                  />\r\n\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                  <div className={classes.legend}>\r\n                    <p>Compliance :&nbsp;&nbsp;<span className={classes.green_box}></span></p>\r\n                    <p>Partially Compliance :&nbsp;&nbsp;<span className={classes.yellow_box}></span></p>\r\n                    <p>Non Compliance :&nbsp;&nbsp;<span className={classes.red_box}></span></p>\r\n                    <p>Unanswered :&nbsp;&nbsp;<span className={classes.white_box}></span></p>\r\n\r\n                  </div>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <Table clientID={clientID} date={startDate} />\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n\r\n\r\n\r\n        <Grid item xs={12} style={{ marginTop: \"15x\" }}>\r\n          <Widget\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n            disableWidgetMenu={true}\r\n          >\r\n            <Grid container direction=\"column\" className=\"tableQcs\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\" gutterBottom >\r\n                  SectionWise - ShiftWise Score\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item container spacing={1}>\r\n                <Grid item xs={1} className={classes.dateFilter}>\r\n\r\n                  {/* <DatePicker\r\n                    selected={startDate}\r\n                    onChange={date => setSTatrtDateHandler(date)}\r\n                    style={{background:\"#fff!important\"}}\r\n                    customInput={<ExampleCustomInput />}\r\n                    // minDate={subDays(new Date(), 7)}\r\n                    // maxDate={addDays(new Date(), 0)}\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                  /> */}\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                  <div className={classes.legend}>\r\n                    <p>80 to 100 :&nbsp;&nbsp;<span className={classes.green_box}></span></p>\r\n                    <p>50 to 80 :&nbsp;&nbsp;<span className={classes.yellow_box}></span></p>\r\n                    <p>0 to 50  :&nbsp;&nbsp;<span className={classes.red_box}></span></p>\r\n                    <p>not rated :&nbsp;&nbsp;<span className={classes.grey_box}></span></p>\r\n\r\n                  </div>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <TableSection clientID={clientID} date={startDate} />\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n\r\n\r\n\r\n      <Grid item xs={12} style={{ marginTop: \"20px\" }}>\r\n        <Widget\r\n          bodyClass={classes.fullHeightBody}\r\n          className={classes.card}\r\n          disableWidgetMenu={true}\r\n        >\r\n          <Grid container direction=\"column\" className=\"tableQcs\">\r\n            <Grid item>\r\n              <Typography variant=\"h5\" gutterBottom >\r\n                S6 Report\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container spacing={1}>\r\n              <Grid item xs={1}></Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <TableS6 clientID={clientID} />\r\n            </Grid>\r\n          </Grid>\r\n        </Widget>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/DHLDashboard.js",["960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  LinearProgress,\n  Select,\n  OutlinedInput,\n  MenuItem,\n  Button\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  AreaChart,\n  LineChart,\n  Line,\n  Area,\n  PieChart,\n  Pie,\n  Cell,\n  YAxis,\n  XAxis,\n  Label\n} from \"recharts\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/Table/Table\";\nimport BarChartComponent from \"./components/Charts/BarChartComponent\";\nimport axiosInstance from \"../../components/Utils/AxiosInstance\";\n\n\n\nconst mainChartData = getMainChartData();\nconst barChartData = [\n  {\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n  },\n  {\n    name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n  },\n  {\n    name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n  },\n  {\n    name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n  },\n  {\n    name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n  },\n  {\n    name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n  },\n  {\n    name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n  },\n]; \nconst PieChartData = [\n  { name: \"Group A\", value: 400, color: \"primary\" },\n  { name: \"Group B\", value: 300, color: \"secondary\" },\n  { name: \"Group C\", value: 300, color: \"warning\" },\n  { name: \"Group D\", value: 200, color: \"success\" },\n];\n\nexport default function DHLDashboard(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // local\n  const [mainChartState, setMainChartState] = useState(\"monthly\");\n  const [ticketData, setTicketData] = useState([\"A\", \"B\", \"C\", \"D\"])\n  const [timeChart, setTimeChart] = useState([])\n  const [qcDetailData, setQCDetailData] = useState([])\n\n\n  const handleTicketData = (obj) => {\n    setTicketData(Object.entries(obj))\n  }\n\n    useEffect(() => {\n  //     async function getTicketData() {\n  //       await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_dashboard_count/all')\n  //         .then(res => handleTicketData(res.data.data[0]))\n  //         .catch(err => console.log(err))\n  //     }\n      async function getTimeChartData() {\n        await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_image_waiting_time')\n          .then(res => setTimeChart([...res.data.data.reverse()]))\n          .catch(err => console.log(err))\n      }\n  //     async function getQCDetailData() {\n  //       await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_details')\n  //         .then(res => setQCDetailData(res.data.data.reverse()))\n  //         .catch(err => console.log(err))\n  //     }\n  //     getTicketData()\n      getTimeChartData()\n  //     getQCDetailData()\n    }, [])\n\n  return (\n    <>\n      <PageTitle\n      //   title=\"Dashboard\"\n      // button={<Button\n      //   variant=\"contained\"\n      //   size=\"medium\"\n      //   color=\"secondary\"\n      //   onClick={()=>console.log(timeChart)}\n      //   >\n      //   Latest Reports\n      //   </Button>} \n      />\n      <Grid container spacing={4}>\n        {ticketData.map((item, index) => {\n          //   let title = item[0]\n          //   switch (title) {\n          //     case \"PENDING\": title = \" In Queue\"; break;\n          //     case \"DONE\": title = \"QC Done\"; break;\n          //     case \"QCPENDINGTIME\": title = \"Average time in que\"; break;\n          //     case \"QCDONETIME\": title = \"Average QC time \"; break;\n          //   }\n          return (\n            <Grid item lg={3} md={4} sm={6} xs={12}>\n              <Widget\n                title={item}\n                upperTitle\n                bodyClass={classes.fullHeightBody}\n                className={classes.card}\n                disableWidgetMenu={true}\n              >\n                <div style={{ width: '100%', height: 200 }}>\n                  <ResponsiveContainer>\n                    <PieChart>\n                      <Pie \n                        dataKey=\"value\" \n                        data={PieChartData} \n                        innerRadius={50} \n                        outerRadius={70} \n                        fill=\"#8884d8\" label>\n                          {/* <Label \n                            width={30} \n                            position=\"center\" \n                            content={<CustomLabel value1={item}/>}>\n                          </Label> */}\n                      </Pie>\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </Widget>\n            </Grid>\n          )\n        }\n        )}\n        <Grid item sm={12} xs={12}>\n          <Widget\n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                >\n                  QC Time Chart\n                </Typography>\n              </div>\n            }\n          >\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={400}>\n              <BarChartComponent data={timeChart?timeChart:\"\"}/>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        <Grid item sm={12} xs={12}>\n          <Widget\n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                >\n                  QC Detail Chart\n                </Typography>\n              </div>\n            }\n          >\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\n              <ComposedChart\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\n                data={mainChartData}\n              >\n                <YAxis\n                  ticks={[0, 2500, 5000, 7500]}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <XAxis\n                  tickFormatter={i => i + 1}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <Area\n                  type=\"natural\"\n                  dataKey=\"desktop\"\n                  fill={theme.palette.background.light}\n                  strokeWidth={0}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"natural\"\n                  dataKey=\"mobile\"\n                  stroke={theme.palette.primary.main}\n                  strokeWidth={2}\n                  dot={false}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"linear\"\n                  dataKey=\"tablet\"\n                  stroke={theme.palette.warning.main}\n                  strokeWidth={2}\n                  dot={{\n                    stroke: theme.palette.warning.dark,\n                    strokeWidth: 2,\n                    fill: theme.palette.warning.main,\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        <Grid item xs={12}>\n          <Widget\n            title=\"Support Requests\"\n            upperTitle\n            noBodyPadding\n            bodyClass={classes.tableWidget}\n          >\n            <Table />\n          </Widget>\n        </Grid>\n        {/* <Grid item lg={3} md={4} sm={6} xs={12}>\n          <Widget\n            title=\"Visits Today\"\n            upperTitle\n            bodyClass={classes.fullHeightBody}\n            className={classes.card}\n          >\n            <div className={classes.visitsNumberContainer}>\n              <Grid container item alignItems={\"center\"}>\n                <Grid item xs={6}>\n                  <Typography size=\"xl\" weight=\"medium\" noWrap>\n                    12, 678\n              </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LineChart\n                    width={100}\n                    height={30}\n                    data={[\n                      { value: 10 },\n                      { value: 15 },\n                      { value: 10 },\n                      { value: 17 },\n                      { value: 18 },\n                    ]}\n                  >\n                    <Line\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.success.main}\n                      strokeWidth={2}\n                      dot={false}\n                    />\n                  </LineChart>\n                </Grid>\n              </Grid>\n            </div>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Registrations\n                </Typography>\n                <Typography size=\"md\">860</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Sign Out\n                </Typography>\n                <Typography size=\"md\">32</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Rate\n                </Typography>\n                <Typography size=\"md\">3.25%</Typography>\n              </Grid>\n            </Grid>\n          </Widget>\n        </Grid> */}\n        {/* <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"App Performance\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.performanceLegendWrapper}>\n              <div className={classes.legendElement}>\n                <Dot color=\"warning\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  Integration\n                </Typography>\n              </div>\n              <div className={classes.legendElement}>\n                <Dot color=\"primary\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  SDK\n                </Typography>\n              </div>\n            </div>\n            <div className={classes.progressSection}>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                Integration\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={77}\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\n                className={classes.progress}\n              />\n            </div>\n            <div>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                SDK\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={73}\n                classes={{ barColorPrimary: classes.progressBarWarning }}\n                className={classes.progress}\n              />\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"Server Overview\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                60% / 37°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.secondary.main}\n                      fill={theme.palette.secondary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                54% / 31°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.primary.main}\n                      fill={theme.palette.primary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                57% / 21°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.warning.main}\n                      fill={theme.palette.warning.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={4} sm={6} xs={12}>\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <ResponsiveContainer width=\"100%\" height={144}>\n                  <PieChart>\n                    <Pie\n                      data={PieChartData}\n                      innerRadius={30}\n                      outerRadius={40}\n                      dataKey=\"value\"\n                    >\n                      {PieChartData.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={theme.palette[entry.color].main}\n                        />\n                      ))}\n                    </Pie>\n                  </PieChart>\n                </ResponsiveContainer>\n              </Grid>\n              <Grid item xs={6}>\n                <div className={classes.pieChartLegendWrapper}>\n                  {PieChartData.map(({ name, value, color }, index) => (\n                    <div key={color} className={classes.legendItemContainer}>\n                      <Dot color={color} />\n                      <Typography style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\n                        &nbsp;{name}&nbsp;\n                      </Typography>\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\n                        &nbsp;{value}\n                      </Typography>\n                    </div>\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </Widget>\n        </Grid>\n        <Grid item xs={12}>\n          <Widget\n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                >\n                  Daily Line Chart\n                </Typography>\n                <div className={classes.mainChartHeaderLabels}>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"warning\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Tablet\n                    </Typography>\n                  </div>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"primary\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Mobile\n                    </Typography>\n                  </div>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"secondary\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Desktop\n                    </Typography>\n                  </div>\n                </div>\n                <Select\n                  value={mainChartState}\n                  onChange={e => setMainChartState(e.target.value)}\n                  input={\n                    <OutlinedInput\n                      labelWidth={0}\n                      classes={{\n                        notchedOutline: classes.mainChartSelectRoot,\n                        input: classes.mainChartSelect,\n                      }}\n                    />\n                  }\n                  autoWidth\n                >\n                  <MenuItem value=\"daily\">Daily</MenuItem>\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\n                </Select>\n              </div>\n            }\n          >\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\n              <ComposedChart\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\n                data={mainChartData}\n              >\n                <YAxis\n                  ticks={[0, 2500, 5000, 7500]}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <XAxis\n                  tickFormatter={i => i + 1}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <Area\n                  type=\"natural\"\n                  dataKey=\"desktop\"\n                  fill={theme.palette.background.light}\n                  strokeWidth={0}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"natural\"\n                  dataKey=\"mobile\"\n                  stroke={theme.palette.primary.main}\n                  strokeWidth={2}\n                  dot={false}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"linear\"\n                  dataKey=\"tablet\"\n                  stroke={theme.palette.warning.main}\n                  strokeWidth={2}\n                  dot={{\n                    stroke: theme.palette.warning.dark,\n                    strokeWidth: 2,\n                    fill: theme.palette.warning.main,\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        {mock.bigStat.map(stat => (\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\n            <BigStat {...stat} />\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <Widget\n            title=\"Support Requests\"\n            upperTitle\n            noBodyPadding\n            bodyClass={classes.tableWidget}\n          >\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n      </Grid>\n    </>\n  );\n}\n\n// #######################################################################\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (\n      randomValue <= min ||\n      randomValue >= max ||\n      (lastValue && randomValue - lastValue > maxDiff)\n    ) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n\n    return { value: randomValue };\n  });\n}\n\nfunction getMainChartData() {\n  var resultArray = [];\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\n\n  for (let i = 0; i < tablet.length; i++) {\n    resultArray.push({\n      tablet: tablet[i].value,\n      desktop: desktop[i].value,\n      mobile: mobile[i].value,\n    });\n  }\n\n  return resultArray;\n}\nfunction CustomLabel({viewBox, value1, value2}){\n  const {cx, cy} = viewBox;\n  return (\n   <text x={cx} y={cy} fill=\"#3d405c\" className=\"recharts-text recharts-label\" textAnchor=\"middle\" dominantBaseline=\"central\">\n      <tspan alignmentBaseline=\"middle\" fontSize=\"26\">{value1}</tspan>\n      {/* <tspan fontSize=\"14\">{value2}</tspan> */}\n   </text>\n  )\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/NewTable/NewTable.js",["977","978","979","980","981","982","983","984","985","986","987","988","989","990"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\nimport theme from \"./style\"\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditCheckList from \"../EditCheckList/EditCheckList\";\nimport AddSection from \"../AddSection/AddSection\";\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\n\n//parser\nimport parse from 'html-react-parser';\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\n\n\nexport default function NewTable() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [dataTableData, setDataTableData] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [section, setSection] = useState([])\n    const [questionID, setQuestionID] = useState('')\n    const sectionText = section.map(item => item.text)\n    const checkListID = window.location.href.split('/').slice(-1).pop()\n\n    useEffect(() => {\n       \n        function getData() {\n            axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\n                .then(res => setDataTableData([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        function getSectionList() {\n            axiosInstance.get(`api/Section_Sub_Section.svc/get_section_select2/${checkListID}`)\n                .then(res => setSection([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        getData()\n        getSectionList()\n    }, [])\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" >\n                            {open === true && tableMeta.rowIndex === 0\n                                ? <div style={{ display: \"flex\" }}>\n                                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n                                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n                                </div>\n                                : open === false && tableMeta.rowIndex === rowIndex\n                                    ? <div style={{ display: \"flex\" }}>\n                                        <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                                        <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                                    </div>\n                                    : <EditRoundedIcon onClick={() => {\n                                        return (\n                                            handleEdit(tableMeta, tableMeta.rowIndex)\n                                        )\n                                    }} />}\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"DELETE\",\n            label: \"Delete\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n                            <DeleteRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"QUESTION_TEXT\",\n            label: \"Question\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"SECTION\",\n            label: \"Section\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n\n                    return open && tableMeta.rowIndex === 0\n                        ? <FormControl>\n                            <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                {sectionText && sectionText.map((item, index) =>\n                                    <MenuItem key={index} value={item}>{item}</MenuItem>\n                                )}\n                            </Select>\n                        </FormControl>\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControl>\n                                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                    {sectionText && sectionText.map((item, index) =>\n                                        <MenuItem key={index} value={item}>{item}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                            : <div>{value}</div>\n\n\n                }\n            }\n        },\n        {\n            name: \"CRITICALITY\",\n            label: \"Criticality\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControl>\n                            <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                <MenuItem value=\"YES\">YES</MenuItem>\n                                <MenuItem value=\"NO\">NO</MenuItem>\n                            </Select>\n                        </FormControl>\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControl>\n                                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                    <MenuItem value=\"YES\">YES</MenuItem>\n                                    <MenuItem value=\"NO\">NO</MenuItem>\n                                </Select>\n                            </FormControl>\n                            : <div>{value}</div>\n                )\n\n            }\n        },\n        {\n            name: \"WEIGHTAGE\",\n            label: \"Weightage\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"POSITION\",\n            label: \"Position\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <div>{dataTableData.length}</div>\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"ANSWER_TYPE\",\n            label: \"Answer Type\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n\n                    return open && tableMeta.rowIndex === 0\n                        ? <FormControl>\n                            <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                <MenuItem value=\"CNN\">CNN</MenuItem>\n                                <MenuItem value=\"CC\">CC</MenuItem>\n                            </Select>\n                        </FormControl>\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControl>\n                                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                    <MenuItem value=\"CNN\">CNN</MenuItem>\n                                    <MenuItem value=\"CC\">CC</MenuItem>\n                                </Select>\n                            </FormControl>\n                            : <div>{value}</div>\n\n\n                }\n            }\n        },\n        {\n            name: \"OPTION1\",\n            label: \"Option1\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"OPTION2\",\n            label: \"Option2\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"OPTION3\",\n            label: \"Option3\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n\n        {\n            name: \"OPTION4\",\n            label: \"Option4\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"QUESTION_INFORMATION\",\n            label: \"Information\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    let parseValue = parse(`<div>${value}<div>`);\n                    return  (\n                        open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : parseValue\n                )}\n            }\n        },\n        {\n            name: \"QC_NOTES\",\n            label: \"QC Note\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        }\n\n    ]\n\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n        setQuestionID(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n        setRowIndex(rowIndex)\n\n    }\n    const handleDelete = (tableMeta, rowIndex) => {\n        console.log(tableMeta)\n        const obj = {\n            'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\n            'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\n        }\n        \n        axiosInstance.post('api/Question_Management.svc/delete_question', obj)\n            .then(res => alert(\"Question deleted successfully\"))\n            .then(getData())\n            .catch(err => console.log(err))\n        \n        function getData() {\n            axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\n                .then(res => setDataTableData([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n                \n    }\n    const handleClick = () => {\n        const newRowData = {\n            ANSWER_TYPE: \"\",\n            CHECK_LIST_ID: \"\",\n            COMPLIANCE_IMG: \"\",\n            COMPLIANCE_RESPONSE: \"\",\n            CRITICALITY: \"\",\n            MANDETORY: \"\",\n            NON_COMPLIANCE_IMG: \"\",\n            NON_COMPLIANCE_RESPONSE: \"\",\n            NOT_APPLICABLE_IMG: \"\",\n            NOT_APPLICABLE_RESPONSE: \"\",\n            NO_IMG: \"\",\n            NO_RESPONSE: \"\",\n            NUMBER_OF_IMG: \"\",\n            OPTION1: \"\",\n            OPTION2: \"\",\n            OPTION3: \"\",\n            OPTION4: \"\",\n            OPTION5: \"\",\n            OPTION6: \"\",\n            OPTION7: \"\",\n            PARTIALLY_COMPLIANCE_IMG: \"\",\n            PARTIALLY_COMPLIANCE_RESPONSE: \"\",\n            POSITION: \"\",\n            QUESTION_ID: \"\",\n            QUESTION_INFORMATION: \"\",\n            QUESTION_TEXT: \"\",\n            SECTION: \"\",\n            STATUS: \"\",\n            SUB_SECTION_ID: \"\",\n            WEIGHTAGE: \"\",\n            YES_IMG: \"\",\n            YES_RESPONSE: \"\"\n        }\n        setDataTableData([newRowData, ...dataTableData])\n        setOpen(true)\n        setRowIndex(\"0\")\n    }\n\n    const handleCancel = () => {\n        setRowIndex()\n    }\n    const handleCancelAdd = (rowIndex) => {\n        setOpen(false)\n        console.log(rowIndex)\n        // console.log(dataTableData[rowIndex])\n        dataTableData.shift()\n        setRowIndex()\n    }\n    const handleUpdateAdd = (tableMeta, rowIndex) => {\n        console.log(tableMeta)\n        console.log(tableMeta.rowData)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 1)\n        newDataArr[4] = dataTableData.length\n        console.log(newDataArr)\n        let sectionSelected = section && section.find(item => item.text === newDataArr[1])\n        console.log(sectionSelected, sectionSelected.id)\n        let newObj = {\n            ANSWER_TYPE: newDataArr[5],\n            CHECK_LIST_ID: \"\",\n            COMPLIANCE_IMG: \"\",\n            COMPLIANCE_RESPONSE: \"\",\n            CRITICALITY: newDataArr[2],\n            MANDETORY: \"\",\n            NON_COMPLIANCE_IMG: \"\",\n            NON_COMPLIANCE_RESPONSE: \"\",\n            NOT_APPLICABLE_IMG: \"\",\n            NOT_APPLICABLE_RESPONSE: \"\",\n            NO_IMG: \"\",\n            NO_RESPONSE: \"\",\n            NUMBER_OF_IMG: \"\",\n            OPTION1: newDataArr[6],\n            OPTION2: newDataArr[7],\n            OPTION3: newDataArr[8],\n            OPTION4: newDataArr[9],\n            OPTION5: \"\",\n            OPTION6: \"\",\n            OPTION7: \"\",\n            PARTIALLY_COMPLIANCE_IMG: \"\",\n            PARTIALLY_COMPLIANCE_RESPONSE: \"\",\n            POSITION: newDataArr[4],\n            QUESTION_ID: \"\",\n            QUESTION_INFORMATION: newDataArr[10],\n            QUESTION_TEXT: newDataArr[0],\n            SECTION: newDataArr[1],\n            STATUS: \"\",\n            SUB_SECTION_ID: \"\",\n            WEIGHTAGE: newDataArr[3],\n            YES_IMG: \"\",\n            YES_RESPONSE: \"\"\n        }\n        let obj = {\n            \"COMMAND\": \"INSERT\",\n            \"QUESTION\": newDataArr[0],\n            \"QUESTION_ID\": \"\",\n            \"CHECK_LIST_ID\": checkListID,\n            \"SECTION\": sectionSelected.id,\n            \"CRITICALITY\": newDataArr[2] === \"YES\" ? 1 : 0,\n            \"WEIGHTAGE\": newDataArr[3],\n            \"POSITION\": dataTableData.length,\n            \"ANSWER_TYPE\": newDataArr[5],\n            \"OPTION_1_WEIGHTAGE\": newDataArr[6],\n            \"OPTION_2_WEIGHTAGE\": newDataArr[7],\n            \"OPTION_3_WEIGHTAGE\": newDataArr[8],\n            \"OPTION_4_WEIGHTAGE\": newDataArr[9],\n            \"QUESTION_INFORMATION\": newDataArr[10],\n            \"QC_NOTES\": newDataArr[11],\n            \"CREATED_BY\": localStorage.getItem('client_userID')\n        }\n        dataTableData[rowIndex] = newObj\n        setDataTableData([...dataTableData])\n        setRowIndex()\n        setOpen(false)\n        console.log('add :', obj)\n        axiosInstance.post('api/Question_Management.svc/insert_question', obj)\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n    }\n    const handleUpdateEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.rowData)\n        console.log(tableMeta)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 1)\n        // let newDataArr = [updatedata[1], updatedata[2], updatedata[3], updatedata[4], updatedata[5], updatedata[6], updatedata[7], updatedata[8]]\n        let sectionSelected = section.find(item => item.text === newDataArr[1])\n        console.log(sectionSelected, sectionSelected.id)\n        console.log(\"update\", newDataArr)\n        let newObj = {\n            ANSWER_TYPE: newDataArr[5],\n            CHECK_LIST_ID: \"\",\n            COMPLIANCE_IMG: \"\",\n            COMPLIANCE_RESPONSE: \"\",\n            CRITICALITY: newDataArr[2],\n            MANDETORY: \"\",\n            NON_COMPLIANCE_IMG: \"\",\n            NON_COMPLIANCE_RESPONSE: \"\",\n            NOT_APPLICABLE_IMG: \"\",\n            NOT_APPLICABLE_RESPONSE: \"\",\n            NO_IMG: \"\",\n            NO_RESPONSE: \"\",\n            NUMBER_OF_IMG: \"\",\n            OPTION1: newDataArr[6],\n            OPTION2: newDataArr[7],\n            OPTION3: newDataArr[8],\n            OPTION4: newDataArr[9],\n            OPTION5: \"\",\n            OPTION6: \"\",\n            OPTION7: \"\",\n            PARTIALLY_COMPLIANCE_IMG: \"\",\n            PARTIALLY_COMPLIANCE_RESPONSE: \"\",\n            POSITION: newDataArr[4],\n            QUESTION_ID: \"\",\n            QUESTION_INFORMATION: newDataArr[10],\n            QUESTION_TEXT: newDataArr[0],\n            SECTION: newDataArr[1],\n            STATUS: \"\",\n            SUB_SECTION_ID: \"\",\n            WEIGHTAGE: newDataArr[3],\n            YES_IMG: \"\",\n            YES_RESPONSE: \"\"\n        }\n        dataTableData[rowIndex] = newObj\n        setDataTableData([...dataTableData])\n        setRowIndex()\n        let obj = {\n            \"COMMAND\": \"EDIT\",\n            \"QUESTION\": newDataArr[0],\n            \"QUESTION_ID\": questionID,\n            \"CHECK_LIST_ID\": checkListID,\n            \"SECTION\": sectionSelected.id,\n            \"CRITICALITY\": newDataArr[2] === \"YES\" ? 1 : 0,\n            \"WEIGHTAGE\": newDataArr[3],\n            \"POSITION\": newDataArr[4],\n            \"ANSWER_TYPE\": newDataArr[5],\n            \"OPTION_1_WEIGHTAGE\": newDataArr[6],\n            \"OPTION_2_WEIGHTAGE\": newDataArr[7],\n            \"OPTION_3_WEIGHTAGE\": newDataArr[8],\n            \"OPTION_4_WEIGHTAGE\": newDataArr[9],\n            \"QUESTION_INFORMATION\": newDataArr[10],\n            \"QC_NOTES\": newDataArr[11],\n            \"CREATED_BY\": localStorage.getItem('client_userID')\n        }\n        console.log('edit :' , obj )\n        axiosInstance.post('api/Question_Management.svc/insert_question', obj)\n        // axios.post('http://ce9a86918a2a.ngrok.io/api/Question_Management.svc/insert_question', obj)\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n    }\n    const handleCloseAddButton = () => {\n        setOpenAdd(false)\n    }\n\n    const handleOpenModal = () => {\n        setOpenModal(true)\n    }\n    const handleCloseModal = () => {\n        setOpenModal(false)\n    }\n    console.log(dataTableData)\n    console.log(section)\n    console.log(checkListID)\n    return (\n        <>\n            <Grid container spacing={4}>\n                <Grid item xs={12}>\n                    <MuiThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title=\"Questions\"\n                            data={dataTableData}\n                            columns={columns}\n                            options={{\n                                filter: true,\n                                selectableRows: 'none',\n                                filterType: 'dropdown',\n                                responsive: 'standard',\n                                pagination:false,\n                                download: true,\n                                downloadOptions: {\n                                    filename: 'tableDownload.csv',\n                                    separator: ',',\n                                    filterOptions: {\n                                        useDisplayedColumnsOnly: true || false,\n                                        useDisplayedRowsOnly: true || true\n                                    } || false\n                                },\n                                tableBodyHeight: '470px',\n                                tableBodyMaxHeight: \"\",\n                                setTableProps: () => {\n                                    return {\n                                        padding: 'default'\n                                    }\n                                },\n                                customToolbar: () => {\n                                    return (\n                                        <>\n                                            <IconButton onClick={() => handleClick()} disabled={open ? true : false}>\n                                                <Button\n                                                    variant=\"contained\"\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                    startIcon={<AddCircleIcon />}\n                                                >\n                                                    Question\n                                                        </Button>\n                                            </IconButton>\n                                            <IconButton onClick={handleOpenModal} >\n                                                <Button\n                                                    variant=\"contained\"\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                    startIcon={<AddCircleIcon />}\n                                                >\n                                                    Section\n                                                        </Button>\n                                            </IconButton>\n\n                                        </>\n                                    );\n                                }\n                            }}\n                        />\n                    </MuiThemeProvider>\n                </Grid>\n            </Grid>\n            {openModal ? <AddSection open={openModal} close={handleCloseModal} checkListID={checkListID} /> : \"\"}\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/maps/Maps.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/Charts.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/tables/Tables.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/Sidebar.js",["991","992","993","994","995","996","997"],"import React, { useState, useEffect } from \"react\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport {\n  Home as HomeIcon,\n  NotificationsNone as NotificationsIcon,\n  FormatSize as TypographyIcon,\n  FilterNone as UIElementsIcon,\n  BorderAll as TableIcon,\n  QuestionAnswer as SupportIcon,\n  LibraryBooks as LibraryIcon,\n  HelpOutline as FAQIcon,\n  ArrowBack as ArrowBackIcon,\n} from \"@material-ui/icons\";\nimport AccountBalanceWalletIcon  from '@material-ui/icons/AccountBalanceWallet';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\nimport Dot from \"./components/Dot\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../context/LayoutContext\";\n\nconst structure = [\n  { \n    id: 0, \n    label: \"Home\", \n    link: \"/app/dashboard\", \n    icon: <HomeIcon /> \n  },\n  { \n    id: 1, \n    label: \"Master Client List\",\n    link: \"/app/masterClientList\",\n    // link: \"/app/cm/masterClientList\",\n    icon: <DashboardIcon />\n  },\n  // {\n  //   id: 1,\n  //   label: \"Client Management\",\n  //   icon: <DashboardIcon />,\n  //   children: [\n  //     { label: \"Master Client List\", link: \"/app/cm/masterClientList\" },\n  //     // { label: \"Compass Dashboard\", link: \"/app/cm/compassDashboard\" },\n  //     // { label: \"DHL Dashboard\", link: \"/app/cm/dhlDashboard\" },\n  //   ],\n  // },\n  { id: 2, label: \"Live QC\", link: \"/app/liveQC\", icon: <TableIcon /> },\n  {\n    id: 3,\n    label: \"User Model\",\n    link: \"/app/usermodel\",\n    icon: <PeopleAltIcon/>,\n  },\n  {\n    id: 4,\n    label: \"Create Plan\",\n    link: \"/app/createPlan\",\n    icon: <AccountBalanceWalletIcon/>,\n  },\n  {\n    id: 5,\n    label: \"List\",\n    link: \"/app/list\",\n    icon: <AssessmentIcon/>,\n  },\n  // {\n  //   id: 4,\n  //   label: \"UI Elements\",\n  //   link: \"/app/ui\",\n  //   icon: <UIElementsIcon />,\n  //   children: [\n  //     { label: \"Icons\", link: \"/app/ui/icons\" },\n  //     { label: \"Charts\", link: \"/app/ui/charts\" },\n  //     { label: \"Maps\", link: \"/app/ui/maps\" },\n  //   ],\n  // },\n  // { id: 5, type: \"divider\" },\n  // { id: 6, type: \"title\", label: \"HELP\" },\n  // { id: 7, label: \"Library\", link: \"\", icon: <LibraryIcon /> },\n  // { id: 8, label: \"Support\", link: \"\", icon: <SupportIcon /> },\n  // { id: 9, label: \"FAQ\", link: \"\", icon: <FAQIcon /> },\n  // { id: 10, type: \"divider\" },\n  // { id: 11, type: \"title\", label: \"PROJECTS\" },\n  // {\n  //   id: 12,\n  //   label: \"My recent\",\n  //   link: \"\",\n  //   icon: <Dot size=\"small\" color=\"warning\" />,\n  // },\n  // {\n  //   id: 13,\n  //   label: \"Starred\",\n  //   link: \"\",\n  //   icon: <Dot size=\"small\" color=\"primary\" />,\n  // },\n  // {\n  //   id: 14,\n  //   label: \"Background\",\n  //   link: \"\",\n  //   icon: <Dot size=\"small\" color=\"secondary\" />,\n  // },\n];\n\nfunction Sidebar({ location }) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  // global\n  var { isSidebarOpened } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n\n  // local\n  var [isPermanent, setPermanent] = useState(true);\n\n  useEffect(function() {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n\n  return (\n    <Drawer\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\n      className={classNames(classes.drawer, {\n        [classes.drawerOpen]: isSidebarOpened,\n        [classes.drawerClose]: !isSidebarOpened,\n      })}\n      classes={{\n        paper: classNames({\n          [classes.drawerOpen]: isSidebarOpened,\n          [classes.drawerClose]: !isSidebarOpened,\n        }),\n      }}\n      open={isSidebarOpened}\n    >\n      <div className={classes.toolbar} />\n      <div className={classes.mobileBackButton}>\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\n          <ArrowBackIcon\n            classes={{\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\n            }}\n          />\n        </IconButton>\n      </div>\n      <List className={classes.sidebarList}>\n        {structure.map(link => (\n          <SidebarLink\n            key={link.id}\n            location={location}\n            isSidebarOpened={isSidebarOpened}\n            {...link}\n          />\n        ))}\n      </List>\n    </Drawer>\n  );\n\n  // ##################################################################\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/typography/Typography.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/notifications/Notifications.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Header/Header.js",["998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016"],"import React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  InputBase,\n  Menu,\n  MenuItem,\n  Fab,\n  Link\n} from \"@material-ui/core\";\nimport {\n  VpnKey as VpnKeyIcon,\n  Menu as MenuIcon,\n  MailOutline as MailIcon,\n  NotificationsNone as NotificationsIcon,\n  Person as AccountIcon,\n  Search as SearchIcon,\n  Send as SendIcon,\n  ArrowBack as ArrowBackIcon,\n} from \"@material-ui/icons\";\nimport classNames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport { Badge, Typography, Button } from \"../Wrappers\";\nimport Notification from \"../Notification/Notification\";\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../context/LayoutContext\";\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\n\n\nconst messages = [\n  {\n    id: 0,\n    variant: \"warning\",\n    name: \"Jane Hew\",\n    message: \"Hey! How is it going?\",\n    time: \"9:32\",\n  },\n  {\n    id: 1,\n    variant: \"success\",\n    name: \"Lloyd Brown\",\n    message: \"Check out my new Dashboard\",\n    time: \"9:18\",\n  },\n  {\n    id: 2,\n    variant: \"primary\",\n    name: \"Mark Winstein\",\n    message: \"I want rearrange the appointment\",\n    time: \"9:15\",\n  },\n  {\n    id: 3,\n    variant: \"secondary\",\n    name: \"Liana Dutti\",\n    message: \"Good news from sale department\",\n    time: \"9:09\",\n  },\n];\n\nconst notifications = [\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\n  {\n    id: 1,\n    color: \"success\",\n    type: \"info\",\n    message: \"What is the best way to get ...\",\n  },\n  {\n    id: 2,\n    color: \"secondary\",\n    type: \"notification\",\n    message: \"This is just a simple notification\",\n  },\n  {\n    id: 3,\n    color: \"primary\",\n    type: \"e-commerce\",\n    message: \"12 new orders has arrived today\",\n  },\n];\n\nexport default function Header(props) {\n  var classes = useStyles();\n  const history = useHistory();\n\n  // global\n  var layoutState = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n  var userDispatch = useUserDispatch();\n\n  // local\n  var [mailMenu, setMailMenu] = useState(null);\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\n  var [profileMenu, setProfileMenu] = useState(null);\n  var [isSearchOpen, setSearchOpen] = useState(false);\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar className={classes.toolbar}>\n        <IconButton\n          color=\"inherit\"\n          onClick={() => toggleSidebar(layoutDispatch)}\n          className={classNames(\n            classes.headerMenuButtonSandwich,\n            classes.headerMenuButtonCollapse,\n          )}\n        >\n          {layoutState.isSidebarOpened ? (\n            <ArrowBackIcon\n              classes={{\n                root: classNames(\n                  classes.headerIcon,\n                  classes.headerIconCollapse,\n                ),\n              }}\n            />\n          ) : (\n              <MenuIcon\n                classes={{\n                  root: classNames(\n                    classes.headerIcon,\n                    classes.headerIconCollapse,\n                  ),\n                }}\n              />\n            )}\n        </IconButton>\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\n          Admin Dashboard\n        </Typography>\n        <div className={classes.grow} />\n        {/* <Button component={Link} href=\"https://flatlogic.com/templates/react-material-admin-full\" variant={\"outlined\"} color={\"secondary\"} className={classes.purchaseBtn}>Unlock full version</Button> */}\n        {/* <div\n          className={classNames(classes.search, {\n            [classes.searchFocused]: isSearchOpen,\n          })}\n        >\n          <div\n            className={classNames(classes.searchIcon, {\n              [classes.searchIconOpened]: isSearchOpen,\n            })}\n            onClick={() => setSearchOpen(!isSearchOpen)}\n          >\n            <SearchIcon classes={{ root: classes.headerIcon }} />\n          </div>\n          <InputBase\n            placeholder=\"Search…\"\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n          />\n        </div> */}\n        {/* <IconButton\n          color=\"inherit\"\n          aria-haspopup=\"true\"\n          aria-controls=\"mail-menu\"\n          onClick={e => {\n            setNotificationsMenu(e.currentTarget);\n            setIsNotificationsUnread(false);\n          }}\n          className={classes.headerMenuButton}\n        >\n          <Badge\n            badgeContent={isNotificationsUnread ? notifications.length : null}\n            color=\"warning\"\n          >\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\n          </Badge>\n        </IconButton> */}\n        {/* <IconButton\n          color=\"inherit\"\n          aria-haspopup=\"true\"\n          aria-controls=\"mail-menu\"\n          onClick={e => {\n            setMailMenu(e.currentTarget);\n            setIsMailsUnread(false);\n          }}\n          className={classes.headerMenuButton}\n        >\n          <Badge\n            badgeContent={isMailsUnread ? messages.length : null}\n            color=\"secondary\"\n          >\n            <MailIcon classes={{ root: classes.headerIcon }} />\n          </Badge>\n        </IconButton> */}\n        <IconButton\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n          className={classes.headerMenuButton}\n          aria-controls=\"profile-menu\"\n          onClick={e => setProfileMenu(e.currentTarget)}\n        >\n          <AccountIcon classes={{ root: classes.headerIcon }} />\n        </IconButton>\n        {/* <Menu\n          id=\"mail-menu\"\n          open={Boolean(mailMenu)}\n          anchorEl={mailMenu}\n          onClose={() => setMailMenu(null)}\n          MenuListProps={{ className: classes.headerMenuList }}\n          className={classes.headerMenu}\n          classes={{ paper: classes.profileMenu }}\n          disableAutoFocusItem\n        >\n          <div className={classes.profileMenuUser}>\n            <Typography variant=\"h4\" weight=\"medium\">\n              New Messages\n            </Typography>\n            <Typography\n              className={classes.profileMenuLink}\n              component=\"a\"\n              color=\"secondary\"\n            >\n              {messages.length} New Messages\n            </Typography>\n          </div>\n          {messages.map(message => (\n            <MenuItem key={message.id} className={classes.messageNotification}>\n              <div className={classes.messageNotificationSide}>\n                <UserAvatar color={message.variant} name={message.name} />\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\n                  {message.time}\n                </Typography>\n              </div>\n              <div\n                className={classNames(\n                  classes.messageNotificationSide,\n                  classes.messageNotificationBodySide,\n                )}\n              >\n                <Typography weight=\"medium\" gutterBottom>\n                  {message.name}\n                </Typography>\n                <Typography color=\"text\" colorBrightness=\"secondary\">\n                  {message.message}\n                </Typography>\n              </div>\n            </MenuItem>\n          ))}\n          <Fab\n            variant=\"extended\"\n            color=\"primary\"\n            aria-label=\"Add\"\n            className={classes.sendMessageButton}\n          >\n            Send New Message\n            <SendIcon className={classes.sendButtonIcon} />\n          </Fab>\n        </Menu>*/}\n        <Menu\n          id=\"notifications-menu\"\n          open={Boolean(notificationsMenu)}\n          anchorEl={notificationsMenu}\n          onClose={() => setNotificationsMenu(null)}\n          className={classes.headerMenu}\n          disableAutoFocusItem\n        >\n          {notifications.map(notification => (\n            <MenuItem\n              key={notification.id}\n              onClick={() => setNotificationsMenu(null)}\n              className={classes.headerMenuItem}\n            >\n              <Notification {...notification} typographyVariant=\"inherit\" />\n            </MenuItem>\n          ))}\n        </Menu>\n        <Menu\n          id=\"profile-menu\"\n          open={Boolean(profileMenu)}\n          anchorEl={profileMenu}\n          onClose={() => setProfileMenu(null)}\n          className={classes.headerMenu}\n          classes={{ paper: classes.profileMenu }}\n          disableAutoFocusItem\n        >\n          {/* <div className={classes.profileMenuUser}>\n            <Typography variant=\"h4\" weight=\"medium\">\n              John Smith\n            </Typography>\n            <Typography\n              className={classes.profileMenuLink}\n              component=\"a\"\n              color=\"primary\"\n              href=\"https://flatlogic.com\"\n            >\n              Flalogic.com\n            </Typography>\n          </div> */}\n          <MenuItem\n            className={classNames(\n              classes.profileMenuItem,\n              classes.headerMenuItem,\n            )}\n            onClick={() => history.push('/app/changepwd')}\n          >\n            <VpnKeyIcon className={classes.profileMenuIcon} /> Change Password\n          </MenuItem>\n          <MenuItem\n            className={classNames(\n              classes.profileMenuItem,\n              classes.headerMenuItem,\n            )}\n            onClick={() => signOut(userDispatch, props.history)}\n          >\n              <AccountIcon className={classes.profileMenuIcon}/> Sign Out\n          </MenuItem>\n          {/* <MenuItem\n            className={classNames(\n              classes.profileMenuItem,\n              classes.headerMenuItem,\n            )}\n          >\n            <AccountIcon className={classes.profileMenuIcon} /> Messages\n          </MenuItem> */}\n          {/* <div className={classes.profileMenuUser}>\n            <Typography\n              className={classes.profileMenuLink}\n              color=\"primary\"\n              onClick={() => signOut(userDispatch, props.history)}\n            >\n              Sign Out\n            </Typography>\n          </div> */}\n        </Menu>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/Dashboard.js",["1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  LinearProgress,\n  Select,\n  OutlinedInput,\n  MenuItem,\n  Button\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  AreaChart,\n  LineChart,\n  Line,\n  Area,\n  PieChart,\n  Pie,\n  Cell,\n  YAxis,\n  XAxis,\n} from \"recharts\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport mock from \"./mock\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/Table/Table\";\nimport BigStat from \"./components/BigStat/BigStat\";\nimport Tickets from \"./components/Tickets/Tickets\";\nimport QCTimeChart from './components/Charts/QCTimeChart'\nimport QCDetailChart from './components/Charts/QCDetailChart'\nimport BottomTable from \"./components/Table/BottomTable\";\nimport axiosInstance from \"../../components/Utils/AxiosInstance\";\n\n//icons\nimport checked from \"./icons/checked.png\";\nimport pending from \"./icons/pending.png\";\nimport timer from \"./icons/timer.png\";\nimport que from \"./icons/que.png\";\n\nconst mainChartData = getMainChartData();\nconst PieChartData = [\n  { name: \"Group A\", value: 400, color: \"primary\" },\n  { name: \"Group B\", value: 300, color: \"secondary\" },\n  { name: \"Group C\", value: 300, color: \"warning\" },\n  { name: \"Group D\", value: 200, color: \"success\" },\n];\n\nexport default function Dashboard(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // local\n  const [mainChartState, setMainChartState] = useState(\"monthly\");\n  const [ticketData, setTicketData] = useState([])\n  const [timeChart, setTimeChart] = useState([])\n  const [qcDetailData, setQCDetailData] = useState([])\n\n\n  const handleTicketData = (obj) => {\n    setTicketData(Object.entries(obj))\n  }\n\n  useEffect(() => {\n    async function getTicketData() {\n      await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_dashboard_count/all')\n        .then(res => handleTicketData(res.data.data[0]))\n        .catch(err => console.log(err))\n    }\n    async function getTimeChartData() {\n      await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_image_waiting_time')\n        .then(res => setTimeChart([...res.data.data.reverse()]))\n        .catch(err => console.log(err))\n    }\n    async function getQCDetailData() {\n      await axiosInstance.get('api/Qc_Dashboard.svc/get_qc_details')\n        .then(res => setQCDetailData(res.data.data.reverse()))\n        .catch(err => console.log(err))\n    }\n    getTicketData()\n    getTimeChartData()\n    getQCDetailData()\n  }, [])\n\n  return (\n    <>\n      {/* <PageTitle\n        title=\"Dashboard\"\n      button={<Button\n        variant=\"contained\"\n        size=\"medium\"\n        color=\"secondary\"\n        onClick={()=>console.log(timeChart)}\n        >\n        Latest Reports\n        </Button>} \n      /> */}\n      <Grid container spacing={1}>\n        {ticketData ? ticketData.map((item, index) => {\n          let title = item[0];\n          let icon\n          switch (title) {\n            case \"PENDING\": title = \" In Queue\"; icon = pending; break;\n            case \"DONE\": title = \"QC Done\"; icon = checked; break;\n            case \"QCPENDINGTIME\": title = \"Average time in que\"; icon = que; break;\n            case \"QCDONETIME\": title = \"Average QC time \";icon = timer;  break;\n          }\n          return (\n            <Grid item lg={3} md={3} sm={6} xs={6}>\n              <Widget\n                bodyClass={classes.fullHeightBody}\n                className={classes.card}\n                disableWidgetMenu={true}\n              >\n                <Tickets data={item} title ={title} icon={icon}/>\n              </Widget>\n            </Grid>\n          )\n        }\n        ):<Grid item xs={12}>\n          <Widget\n            bodyClass={classes.fullHeightBody}\n            className={classes.card}\n            disableWidgetMenu={true}\n          >\n            <Typography variant=\"h3\">\n              Data Unavailable\n            </Typography>\n        </Widget>\n      </Grid>}\n        <Grid item lg={12} md={12} sm={12} xs={12}>\n          <Widget \n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  align=\"center\"\n                >\n                  QC Time Chart\n                </Typography>\n              </div>\n            }\n          >\n            <ResponsiveContainer  minWidth={580} height={400}>\n              <QCTimeChart data={timeChart?timeChart:\"\"}/>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        <Grid item lg={12} md={12} sm={12} xs={12}>\n          <Widget \n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                >\n                  QC Detail Chart\n                </Typography>\n              </div>\n            }\n          >\n            <ResponsiveContainer minWidth={580} height={500}>\n              <QCDetailChart data={qcDetailData?qcDetailData:\"\"}/>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        <Grid item xs={12}>\n            <BottomTable/>\n        </Grid>\n        {/* <Grid item lg={3} md={4} sm={6} xs={12}>\n          <Widget\n            title=\"Visits Today\"\n            upperTitle\n            bodyClass={classes.fullHeightBody}\n            className={classes.card}\n          >\n            <div className={classes.visitsNumberContainer}>\n              <Grid container item alignItems={\"center\"}>\n                <Grid item xs={6}>\n                  <Typography size=\"xl\" weight=\"medium\" noWrap>\n                    12, 678\n              </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LineChart\n                    width={100}\n                    height={30}\n                    data={[\n                      { value: 10 },\n                      { value: 15 },\n                      { value: 10 },\n                      { value: 17 },\n                      { value: 18 },\n                    ]}\n                  >\n                    <Line\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.success.main}\n                      strokeWidth={2}\n                      dot={false}\n                    />\n                  </LineChart>\n                </Grid>\n              </Grid>\n            </div>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Registrations\n                </Typography>\n                <Typography size=\"md\">860</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Sign Out\n                </Typography>\n                <Typography size=\"md\">32</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\n                  Rate\n                </Typography>\n                <Typography size=\"md\">3.25%</Typography>\n              </Grid>\n            </Grid>\n          </Widget>\n        </Grid> */}\n        {/* <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"App Performance\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.performanceLegendWrapper}>\n              <div className={classes.legendElement}>\n                <Dot color=\"warning\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  Integration\n                </Typography>\n              </div>\n              <div className={classes.legendElement}>\n                <Dot color=\"primary\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  SDK\n                </Typography>\n              </div>\n            </div>\n            <div className={classes.progressSection}>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                Integration\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={77}\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\n                className={classes.progress}\n              />\n            </div>\n            <div>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                SDK\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={73}\n                classes={{ barColorPrimary: classes.progressBarWarning }}\n                className={classes.progress}\n              />\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"Server Overview\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                60% / 37°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.secondary.main}\n                      fill={theme.palette.secondary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                54% / 31°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.primary.main}\n                      fill={theme.palette.primary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n                noWrap\n              >\n                57% / 21°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.warning.main}\n                      fill={theme.palette.warning.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={4} sm={6} xs={12}>\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <ResponsiveContainer width=\"100%\" height={144}>\n                  <PieChart>\n                    <Pie\n                      data={PieChartData}\n                      innerRadius={30}\n                      outerRadius={40}\n                      dataKey=\"value\"\n                    >\n                      {PieChartData.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={theme.palette[entry.color].main}\n                        />\n                      ))}\n                    </Pie>\n                  </PieChart>\n                </ResponsiveContainer>\n              </Grid>\n              <Grid item xs={6}>\n                <div className={classes.pieChartLegendWrapper}>\n                  {PieChartData.map(({ name, value, color }, index) => (\n                    <div key={color} className={classes.legendItemContainer}>\n                      <Dot color={color} />\n                      <Typography style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\n                        &nbsp;{name}&nbsp;\n                      </Typography>\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\n                        &nbsp;{value}\n                      </Typography>\n                    </div>\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </Widget>\n        </Grid>\n        <Grid item xs={12}>\n          <Widget\n            bodyClass={classes.mainChartBody}\n            header={\n              <div className={classes.mainChartHeader}>\n                <Typography\n                  variant=\"h5\"\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                >\n                  Daily Line Chart\n                </Typography>\n                <div className={classes.mainChartHeaderLabels}>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"warning\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Tablet\n                    </Typography>\n                  </div>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"primary\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Mobile\n                    </Typography>\n                  </div>\n                  <div className={classes.mainChartHeaderLabel}>\n                    <Dot color=\"secondary\" />\n                    <Typography className={classes.mainChartLegentElement}>\n                      Desktop\n                    </Typography>\n                  </div>\n                </div>\n                <Select\n                  value={mainChartState}\n                  onChange={e => setMainChartState(e.target.value)}\n                  input={\n                    <OutlinedInput\n                      labelWidth={0}\n                      classes={{\n                        notchedOutline: classes.mainChartSelectRoot,\n                        input: classes.mainChartSelect,\n                      }}\n                    />\n                  }\n                  autoWidth\n                >\n                  <MenuItem value=\"daily\">Daily</MenuItem>\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\n                </Select>\n              </div>\n            }\n          >\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\n              <ComposedChart\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\n                data={mainChartData}\n              >\n                <YAxis\n                  ticks={[0, 2500, 5000, 7500]}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <XAxis\n                  tickFormatter={i => i + 1}\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\n                  stroke={theme.palette.text.hint + \"80\"}\n                  tickLine={false}\n                />\n                <Area\n                  type=\"natural\"\n                  dataKey=\"desktop\"\n                  fill={theme.palette.background.light}\n                  strokeWidth={0}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"natural\"\n                  dataKey=\"mobile\"\n                  stroke={theme.palette.primary.main}\n                  strokeWidth={2}\n                  dot={false}\n                  activeDot={false}\n                />\n                <Line\n                  type=\"linear\"\n                  dataKey=\"tablet\"\n                  stroke={theme.palette.warning.main}\n                  strokeWidth={2}\n                  dot={{\n                    stroke: theme.palette.warning.dark,\n                    strokeWidth: 2,\n                    fill: theme.palette.warning.main,\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        {mock.bigStat.map(stat => (\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\n            <BigStat {...stat} />\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <Widget\n            title=\"Support Requests\"\n            upperTitle\n            noBodyPadding\n            bodyClass={classes.tableWidget}\n          >\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n      </Grid>\n    </>\n  );\n}\n\n// #######################################################################\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (\n      randomValue <= min ||\n      randomValue >= max ||\n      (lastValue && randomValue - lastValue > maxDiff)\n    ) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n\n    return { value: randomValue };\n  });\n}\n\nfunction getMainChartData() {\n  var resultArray = [];\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\n\n  for (let i = 0; i < tablet.length; i++) {\n    resultArray.push({\n      tablet: tablet[i].value,\n      desktop: desktop[i].value,\n      mobile: mobile[i].value,\n    });\n  }\n\n  return resultArray;\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/mock.js",["1043"],"export default {\n  tasks: [\n    {\n      id: 0,\n      type: \"Meeting\",\n      title: \"Meeting with Andrew Piker\",\n      time: \"9:00\"\n    },\n    {\n      id: 1,\n      type: \"Call\",\n      title: \"Call with HT Company\",\n      time: \"12:00\"\n    },\n    {\n      id: 2,\n      type: \"Meeting\",\n      title: \"Meeting with Zoe Alison\",\n      time: \"14:00\"\n    },\n    {\n      id: 3,\n      type: \"Interview\",\n      title: \"Interview with HR\",\n      time: \"15:00\"\n    }\n  ],\n  bigStat: [\n    {\n      product: \"Light Blue\",\n      total: {\n        monthly: 4232,\n        weekly: 1465,\n        daily: 199,\n        percent: { value: 3.7, profit: false }\n      },\n      color: \"primary\",\n      registrations: {\n        monthly: { value: 830, profit: false },\n        weekly: { value: 215, profit: true },\n        daily: { value: 33, profit: true }\n      },\n      bounce: {\n        monthly: { value: 4.5, profit: false },\n        weekly: { value: 3, profit: true },\n        daily: { value: 3.25, profit: true }\n      }\n    },\n    {\n      product: \"Sing App\",\n      total: {\n        monthly: 754,\n        weekly: 180,\n        daily: 27,\n        percent: { value: 2.5, profit: true }\n      },\n      color: \"warning\",\n      registrations: {\n        monthly: { value: 32, profit: true },\n        weekly: { value: 8, profit: true },\n        daily: { value: 2, profit: false }\n      },\n      bounce: {\n        monthly: { value: 2.5, profit: true },\n        weekly: { value: 4, profit: false },\n        daily: { value: 4.5, profit: false }\n      }\n    },\n    {\n      product: \"RNS\",\n      total: {\n        monthly: 1025,\n        weekly: 301,\n        daily: 44,\n        percent: { value: 3.1, profit: true }\n      },\n      color: \"secondary\",\n      registrations: {\n        monthly: { value: 230, profit: true },\n        weekly: { value: 58, profit: false },\n        daily: { value: 15, profit: false }\n      },\n      bounce: {\n        monthly: { value: 21.5, profit: false },\n        weekly: { value: 19.35, profit: false },\n        daily: { value: 10.1, profit: true }\n      }\n    }\n  ],\n  notifications: [\n    {\n      id: 0,\n      icon: \"thumbs-up\",\n      color: \"primary\",\n      content:\n        'Ken <span className=\"fw-semi-bold\">accepts</span> your invitation'\n    },\n    {\n      id: 1,\n      icon: \"file\",\n      color: \"success\",\n      content: \"Report from LT Company\"\n    },\n    {\n      id: 2,\n      icon: \"envelope\",\n      color: \"danger\",\n      content: '4 <span className=\"fw-semi-bold\">Private</span> Mails'\n    },\n    {\n      id: 3,\n      icon: \"comment\",\n      color: \"success\",\n      content: '3 <span className=\"fw-semi-bold\">Comments</span> to your Post'\n    },\n    {\n      id: 4,\n      icon: \"cog\",\n      color: \"light\",\n      content: 'New <span className=\"fw-semi-bold\">Version</span> of RNS app'\n    },\n    {\n      id: 5,\n      icon: \"bell\",\n      color: \"info\",\n      content:\n        '15 <span className=\"fw-semi-bold\">Notifications</span> from Social Apps'\n    }\n  ],\n  table: [\n    {\n      id: 0,\n      name: \"Mark Otto\",\n      email: \"ottoto@wxample.com\",\n      product: \"ON the Road\",\n      price: \"$25 224.2\",\n      date: \"11 May 2017\",\n      city: \"Otsego\",\n      status: \"Sent\"\n    },\n    {\n      id: 1,\n      name: \"Jacob Thornton\",\n      email: \"thornton@wxample.com\",\n      product: \"HP Core i7\",\n      price: \"$1 254.2\",\n      date: \"4 Jun 2017\",\n      city: \"Fivepointville\",\n      status: \"Sent\"\n    },\n    {\n      id: 2,\n      name: \"Larry the Bird\",\n      email: \"bird@wxample.com\",\n      product: \"Air Pro\",\n      price: \"$1 570.0\",\n      date: \"27 Aug 2017\",\n      city: \"Leadville North\",\n      status: \"Pending\"\n    },\n    {\n      id: 3,\n      name: \"Joseph May\",\n      email: \"josephmay@wxample.com\",\n      product: \"Version Control\",\n      price: \"$5 224.5\",\n      date: \"19 Feb 2018\",\n      city: \"Seaforth\",\n      status: \"Declined\"\n    },\n    {\n      id: 4,\n      name: \"Peter Horadnia\",\n      email: \"horadnia@wxample.com\",\n      product: \"Let's Dance\",\n      price: \"$43 594.7\",\n      date: \"1 Mar 2018\",\n      city: \"Hanoverton\",\n      status: \"Sent\"\n    }\n  ]\n};\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/component/AddUser.js",["1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../../../../components/Utils/AxiosInstance';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function AddUser(props) {\n\n    const classes = useStyles();\n    const data = {\n        role: \"\",\n        clientID: \"\",\n        email: \"\",\n        userName: \"\",\n        name: \"\",\n        mobileNo: \"\",\n        createdBy: \"\"\n    }\n    const [isLoading, setIsLoading] = useState(false)\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const [qcUser, setQCUser] = useState([]);\n    const [siteID, setSiteID] = useState('');\n  \n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'md'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add New User</DialogTitle>\n            <DialogContent>\n                <div className={classes.paper}>\n                    <Formik\n                        initialValues={data}\n                        onSubmit={(values, { setSubmitting }) => {\n                            console.log(values)\n                            setSubmitting(true);\n                            setIsLoading(true)\n                            const obj = {\n                                \"ROLE\": props.role === 'bm'? '20A3D20C-7B2D-4C0A-9AAF-840012548914': '42E0E468-68B7-4C14-AD05-E2790FC333D9',\n                                \"CLIENT_ID\":props.businessID,\n                                \"EMAIL\":values.email,\n                                \"USER_NAME\":values.userName,\n                                \"NAME\":values.name,\n                                \"MOBILE\":values.mobileNo,\n                                \"CREATED_BY\":localStorage.getItem('client_userID')\n                            }\n                            console.log(obj)\n                            axiosInstance.post('api/User_Management.svc/insert_client_user', obj)\n                            // axios.post('http://79d2b41a35c5.ngrok.io/User_Management.svc/insert_client_user',obj)\n                                .then(res => {\n                                    if (res.data.response[0]['CODE'] === \"200\"){\n                                        props.reload()\n                                        props.close()\n                                    }else{\n                                        alert(res.data.response[0]['MESSAGE'])\n                                    }\n                                    setIsLoading(false)\n                                })\n                                // .then(props.reload)\n                                // .then(alert(\"New User Added Successfully\"))\n                                .catch(err => {\n                                    console.log(err)\n                                    setIsLoading(false)\n                                })\n                        }}\n\n                        validationSchema={Yup.object().shape({\n                            name: Yup.string().required('Required'),\n                            // lastName: Yup.string().required('Required'),\n                            userName: Yup.string().required('Required'),\n                            mobileNo: Yup\n                                .string()\n                                .matches(mobileRegex, 'Mobile number is not valid')\n                                .required('Required'),\n                            email: Yup\n                                .string('Enter your email')\n                                .email('Enter a valid email')\n                                .required('Required'),\n\n\n                        })}\n                    >\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            dirty,\n                            isSubmitting,\n                            handleChange,\n                            handleBlur,\n                            handleReset,\n                        }) =>\n                        (\n                            <Form className={classes.form}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.name && touched.name}\n                                            autoComplete=\"name\"\n                                            name=\"name\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.name}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"name\"\n                                            label=\"Name\"\n                                            required\n                                            helperText={\n                                                errors.name && touched.name\n                                                    ? errors.name\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    {/* <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.lastName && touched.lastName}\n                                            autoComplete=\"lastName\"\n                                            name=\"lastName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.lastName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"lastName\"\n                                            label=\"Last Name\"\n                                            required\n                                            helperText={\n                                                errors.lastName && touched.lastName\n                                                    ? errors.lastName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid> */}\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.userName && touched.userName}\n                                            autoComplete=\"userName\"\n                                            name=\"userName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.userName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"userName\"\n                                            label=\"User Name\"\n                                            required\n                                            helperText={\n                                                errors.userName && touched.userName\n                                                    ? errors.userName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.mobileNo && touched.mobileNo}\n                                            autoComplete=\"mobileNo\"\n                                            name=\"mobileNo\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.mobileNo}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"mobileNo\"\n                                            label=\"Mobile Number\"\n                                            required\n                                            helperText={\n                                                errors.mobileNo && touched.mobileNo\n                                                    ? errors.mobileNo\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.email && touched.email}\n                                            autoComplete=\"email\"\n                                            name=\"email\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"email\"\n                                            label=\"Email\"\n                                            required\n                                            helperText={\n                                                errors.email && touched.email\n                                                    ? errors.email\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <DialogActions>\n                                    <Button\n                                        type=\"button\"\n                                        className=\"outline\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        onClick={handleReset}\n                                        disabled={!dirty || isSubmitting}\n                                    >\n                                        Reset\n                                            </Button>\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        disabled={isSubmitting}>\n                                        {isLoading? <CircularProgress size={24} style={{ color: \"blue\" }} />: \"Submit\"}\n                                    </Button>\n                                </DialogActions>\n                            </Form>\n                        )\n                        }\n                    </Formik>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/UsersModule/component/EditUser.js",["1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../../../../components/Utils/AxiosInstance';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function EditSite(props) {\n\n    const classes = useStyles();\n    const { data } = props\n    const updateData = {\n        mobileNo: data['MOBILE_NO'],\n        userName: data['USER_NAME'],\n        email: data['EMAIL'],\n        name: data['NAME'],\n        // name: data['F_NAME'],\n        // lastName: data['L_NAME']\n    }\n    \n    console.log(props.data)\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const [openTable, setOpenTable] = useState(false);\n    const [isLoading, setIsLoading] = useState(false)\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'md'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit User</DialogTitle>\n            <DialogContent>\n                <div className={classes.paper}>\n                    <Formik\n                        initialValues={updateData}\n                        onSubmit={(values, { setSubmitting }) => {\n                            console.log(values)\n                            setSubmitting(true);\n                            setIsLoading(true)\n                            const obj = {\n                                \"MOBILE\":values.mobileNo === undefined ? data['MOBILE_NO'] : values.mobileNo,\n                                \"USER_NAME\":values.userName === undefined ? data['USER_NAME'] : values.userName,\n                                \"CREATED_BY\":localStorage.getItem('client_userID'),\n                                \"EMAIL\":values.email === undefined ? data['EMAIL'] : values.email,\n                                \"NAME\":values.name === undefined ? data['NAME'] : values.name,\n                                // \"L_NAME\":values.lastName === undefined ? data['L_NAME'] : values.lastName,\n                                \"USER_GUID\":data['USER_GUID']\n                            }\n                            \n                            console.log(obj)\n                            axiosInstance.post('api/User_Management.svc/update_client_user', obj)\n                            // axios.post('http://79d2b41a35c5.ngrok.io/User_Management.svc/update_client_user',obj)\n                                .then(res => {\n                                    if (res.data.response[0]['CODE'] === \"200\"){\n                                        props.reload()\n                                        props.close()\n                                    }else{\n                                        alert(res.data.response[0]['MESSAGE'])\n                                    }\n                                    setIsLoading(false)\n                                })\n                                .catch(err => {\n                                    setIsLoading(false)\n                                    console.log(err)\n                                })\n                        }}\n\n                        validationSchema={Yup.object().shape({\n                            name: Yup.string().required('Required'),\n                            // lastName: Yup.string().required('Required'),\n                            userName: Yup.string().required('Required'),\n                            email: Yup\n                                .string('Enter your email')\n                                .email('Enter a valid email')\n                                .required('Required'),\n                            mobileNo: Yup\n                                .string()\n                                .matches(mobileRegex, 'Mobile number is not valid')\n                                .required('Required'),\n                        })}\n                    >\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            dirty,\n                            isSubmitting,\n                            handleChange,\n                            handleBlur,\n                            handleReset,\n                        }) =>\n                        (\n                            <Form className={classes.form}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.name && touched.name}\n                                            autoComplete=\"name\"\n                                            name=\"name\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.name}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"name\"\n                                            label=\"Name\"\n                                            required\n                                            helperText={\n                                                errors.name && touched.name\n                                                    ? errors.name\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    {/* <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.lastName && touched.lastName}\n                                            autoComplete=\"lastName\"\n                                            name=\"lastName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.lastName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"lastName\"\n                                            label=\"Last Name\"\n                                            required\n                                            helperText={\n                                                errors.lastName && touched.lastName\n                                                    ? errors.lastName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid> */}\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.userName && touched.userName}\n                                            autoComplete=\"userName\"\n                                            name=\"userName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.userName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"userName\"\n                                            label=\"User Name\"\n                                            required\n                                            helperText={\n                                                errors.userName && touched.userName\n                                                    ? errors.userName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.email && touched.email}\n                                            autoComplete=\"email\"\n                                            name=\"email\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"email\"\n                                            label=\"Email\"\n                                            required\n                                            helperText={\n                                                errors.email && touched.email\n                                                    ? errors.email\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} md={4}>\n                                        <TextField\n                                            error={errors.mobileNo && touched.mobileNo}\n                                            autoComplete=\"mobileNo\"\n                                            name=\"mobileNo\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.mobileNo}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"mobileNo\"\n                                            label=\"Mobile Number\"\n                                            required\n                                            helperText={\n                                                errors.mobileNo && touched.mobileNo\n                                                    ? errors.mobileNo\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n\n                                </Grid>\n                                <DialogActions>\n                                    <Button\n                                        type=\"button\"\n                                        className=\"outline\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        onClick={handleReset}\n                                        disabled={!dirty || isSubmitting}\n                                    >\n                                        Reset\n                                    </Button>\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        disabled={isSubmitting}>\n                                        {isLoading? <CircularProgress size={24} style={{ color: \"blue\" }} />: \"Submit\"}\n                                    </Button>\n                                </DialogActions>\n                            </Form>\n                        )\n                        }\n                    </Formik>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/AddBusiness/AddBusiness.js",["1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\nimport {\n  Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport NotifyAlert from '../../../../../components/ModalAlert/NotifyAlert';\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    margin: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\nexport default function AddBusiness(props) {\n\n  const classes = useStyles();\n  const data = {\n    clientName: \"\",\n    email: \"\",\n    mobileNo: \"\",\n    contactPerson: \"\"\n  }\n  const [message, setMessage] = useState('')\n  const [notifyOpen, setNotifyOpen] = useState(false)\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const history = useHistory();\n  const DialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  };\n  const handleClose = () => {\n    setNotifyOpen(false)\n  }\n  return (\n    <>\n      <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add Business</DialogTitle>\n        <DialogContent>\n          <div className={classes.paper}>\n            <Formik\n              initialValues={data}\n              onSubmit={(values, { setSubmitting }) => {\n                console.log(values)\n                setSubmitting(true);\n                const obj = {\n                  'MASTER_GUID': props.data,\n                  'MOBILE_NO': values.mobileNo,\n                  'NAME': values.clientName,\n                  'EMAIL': values.email,\n                  'CONTACT_PERSON': values.contactPerson,\n                  'CREATED_BY': localStorage.getItem('client_userID'),\n                }\n                axiosInstance.post('api/Business_Master.svc/insert_business', obj)\n                  .then(res => {\n                    setMessage(res.data.response[0]['MESSAGE'])\n                    setNotifyOpen(true)\n                    \n                  })\n                  .then(()=> {\n                    props.reload()\n                  })\n                  .catch(err => console.log(err))\n              }}\n\n              validationSchema={Yup.object().shape({\n                mobileNo: Yup\n                  .string()\n                  .matches(mobileRegex, 'Mobile number is not valid')\n                  .required('Required'),\n                clientName: Yup.string()\n                  .required('Required'),\n                email: Yup\n                  .string('Enter your email')\n                  .email('Enter a valid email')\n                  .required('Required'),\n                contactPerson: Yup\n                  .string()\n                  .required('Required'),\n              })}\n            >\n              {({\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleReset,\n              }) =>\n              (\n                <Form className={classes.form}>\n                  <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.clientName && touched.clientName}\n                        autoComplete=\"clientName\"\n                        name=\"clientName\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.clientName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"clientName\"\n                        label=\"Client Name\"\n                        autoFocus\n                        required\n                        helperText={\n                          errors.clientName && touched.clientName\n                            ? errors.clientName\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.email && touched.email}\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"email\"\n                        label=\"Email\"\n                        required\n                        helperText={\n                          errors.email && touched.email\n                            ? errors.email\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.mobileNo && touched.mobileNo}\n                        autoComplete=\"mobileNo\"\n                        name=\"mobileNo\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.mobileNo}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"mobileNo\"\n                        label=\"Mobile Number\"\n                        required\n                        helperText={\n                          errors.mobileNo && touched.mobileNo\n                            ? errors.mobileNo\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.contactPerson && touched.contactPerson}\n                        autoComplete=\"contactPerson\"\n                        name=\"contactPerson\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.contactPerson}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"contactPerson\"\n                        label=\"Contact Person\"\n                        required\n                        helperText={\n                          errors.contactPerson && touched.contactPerson\n                            ? errors.contactPerson\n                            : null\n                        }\n                      />\n                    </Grid>\n\n                  </Grid>\n                  <DialogActions>\n                    <Button\n                      type=\"button\"\n                      className=\"outline\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      onClick={handleReset}\n                      disabled={!dirty || isSubmitting}\n                    >\n                      Reset\n                        </Button>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      disabled={isSubmitting}>\n                      Submit\n                    </Button>\n                  </DialogActions>\n\n                </Form>\n              )\n              }\n            </Formik>\n          </div>\n        </DialogContent>\n        {notifyOpen && <NotifyAlert message={message} open={notifyOpen} close={handleClose} />}\n      </Dialog>\n    </>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Table/Table.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditSite.js",["1091","1092","1093","1094","1095","1096","1097","1098","1099","1100"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    Select,\n    MenuItem,\n    FormHelperText,\n    FormControl,\n    InputLabel,\n    Paper\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport TimeSlot from './TimeSlot'\nimport axiosInstance from '../../../../../../../components/Utils/AxiosInstance';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\n// React Notification\nimport { NotificationManager } from 'react-notifications';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        display: 'none',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    container: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        // width: 200\n    }\n}))\nexport default function EditSite(props) {\n    const classes = useStyles();\n    const { data } = props\n    const [qcUser, setQCUser] = useState([])\n    const [checkListArr, setCheckListArr] = useState([])\n    const [openTable, setOpenTable] = useState(false)\n    const [updateData, setUpdateData] = useState({\n        resID: data['RES_ID'],\n        siteName: data['NAME'],\n        contactPerson: data['CONTACT_PERSON'],\n        mobileNumber: data['MOBILE_NUMBER'],\n        altMobNumber: data['ALT_MOBILE_NUMBER'],\n        email: data['EMAIL'],\n        altEmail: data['ALT_EMAIL'],\n        imgAllow: data['IMG_ALLOW'],\n        qcPerson: data['QC_CODE']\n    })\n\n    const masterID = window.location.href.split('/').slice(-2).shift()\n    const handleChange = (input) => ({ target: { value } }) => {\n        console.log(input, value)\n        setUpdateData({\n            ...updateData,\n            [input]: value\n        })\n    }\n    useEffect(() => {\n        function getQCUser() {\n            axiosInstance.get(\"api/User_Master.svc/get_user_select2/4F7172D2-225D-4925-917D-A8153AC734B4\")\n                .then(res => setQCUser([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        getQCUser()\n    }, [])\n    const handleSave = () => {\n        console.log(updateData)\n        const obj = {\n            'RES_ID': updateData.resID === undefined ? data['RES_ID'] : updateData.resID,\n            'NAME': updateData.siteName === undefined ? data['NAME'] : updateData.siteName,\n            'CONTACT_PERSON': updateData.contactPerson === undefined ? data['CONTACT_PERSON'] : updateData.contactPerson,\n            'MOBILE_NUMBER': updateData.mobileNumber === undefined ? data['MOBILE_NUMBER'] : updateData.mobileNumber,\n            'ALT_MOBILE_NUMBER': updateData.altMobNumber === undefined ? data['MOBILE_NUMBER'] : updateData.altMobNumber,\n            'EMAIL': updateData.email === undefined ? data['EMAIL'] : updateData.email,\n            'ALT_EMAIL': updateData.altEmail === undefined ? data['ALT_EMAIL'] : updateData.altEmail,\n            'IMG_ALLOW': updateData.imgAllow === undefined ? data['IMG_ALLOW'] : updateData.imgAllow,\n            'QC_CODE': updateData.qcPerson === undefined ? qcUser.filter(item => item.text === data['QC_CODE'])[0]['id'] : qcUser.filter(item => item.text === updateData.qcPerson)[0]['id'],\n            'SITE_GUID': data['SITE_GUID'],\n            \"LASTUPDATED_BY\": localStorage.getItem('client_userID')\n        }\n        axiosInstance.post('api/Site_Master.svc/update_sites', obj)\n            .then(res => console.log(res))\n            .then(NotificationManager.success('Success message', 'Site Edited Successfully'))\n            .then(res => setOpenTable(true))\n            .catch(err => console.log(err))\n    }\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n    console.log(data)\n    console.log(props)\n    console.log(updateData)\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit Site</DialogTitle>\n            {!openTable ?\n                <>\n                    <DialogContent>\n                        <form className={classes.container} noValidate>\n                            <Paper style={{ padding: 16 }}>\n                                <Grid container xs={12} gnItems=\"flex-start\" spacing={2}>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            autoFocus\n                                            margin=\"normal\"\n                                            id=\"resID\"\n                                            label=\"Site ID\"\n                                            type=\"text\"\n                                            defaultValue={data['RES_ID']}\n                                            onChange={handleChange('resID')}\n                                            fullWidth\n                                            required\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"siteName\"\n                                            label=\"Name\"\n                                            type=\"text\"\n                                            defaultValue={data['NAME']}\n                                            onChange={handleChange('siteName')}\n                                            fullWidth\n                                            required\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"contactPerson\"\n                                            label=\"Contact Person\"\n                                            defaultValue={data['CONTACT_PERSON']}\n                                            onChange={handleChange('contactPerson')}\n                                            fullWidth\n                                            required\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"mobileNumber\"\n                                            label=\"Mobile Number\"\n                                            defaultValue={data['MOBILE_NUMBER']}\n                                            onChange={handleChange('mobileNumber')}\n                                            fullWidth\n                                            required\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"altMobNumber\"\n                                            label=\"Alternative Mobile Number\"\n                                            defaultValue={data['ALT_MOBILE_NUMBER']}\n                                            onChange={handleChange('altMobNumber')}\n                                            fullWidth\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"email\"\n                                            label=\"Email\"\n                                            type=\"email\"\n                                            defaultValue={data['EMAIL']}\n                                            onChange={handleChange('email')}\n                                            fullWidth\n                                            required\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"altEmail\"\n                                            label=\"Alternative Email\"\n                                            type=\"email\"\n                                            defaultValue={data['ALT_EMAIL']}\n                                            onChange={handleChange('altEmail')}\n                                            fullWidth\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <TextField\n                                            margin=\"normal\"\n                                            id=\"imgAllow\"\n                                            label=\"Images Allowed Per Day\"\n                                            defaultValue={data['IMG_ALLOW']}\n                                            onChange={handleChange('imgAllow')}\n                                            fullWidth\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4} md={3}>\n                                        <FormControl required className={classes.formControl}>\n                                            <InputLabel id=\"qc-person-input-label\">QC Person</InputLabel>\n                                            <Select\n                                                labelId=\"qc-person-input-label\"\n                                                id=\"qc-person-input-label\"\n                                                defaultValue={data['QC_CODE']}\n                                                onChange={handleChange('qcPerson')}\n                                                className={classes.selectEmpty}\n                                                fullWidth\n                                            >\n                                                {qcUser && qcUser.map(item => (\n                                                    <MenuItem key={item.text} value={item.text}>{item.text}</MenuItem>\n                                                ))}\n                                            </Select>\n                                            <FormHelperText>Required</FormHelperText>\n                                        </FormControl>\n                                    </Grid>\n                                </Grid>\n                            </Paper>\n                        </form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n                            Cancel\n                            </Button>\n                        <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n                            Save\n                            </Button>\n                    </DialogActions>\n                </>\n                : <DialogContent>\n                    <Grid container xs={12} spacing={2}>\n                        <TimeSlot siteID={data['SITE_GUID']} close={props.close} />\n                    </Grid>\n                </DialogContent>}\n        </Dialog >\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditSiteNew.js",["1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport TimeSlot from './TimeSlot'\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../../../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function EditSite(props) {\n\n    const classes = useStyles();\n    const { data } = props\n    const updateData = {\n        siteID: data['SITE_GUID'],\n        resID: data['RES_ID'],\n        name: data['NAME'],\n        contactPerson: data['CONTACT_PERSON'],\n        mobileNo: data['MOBILE_NO'],\n        email: data['EMAIL'],\n        // numberOfImagesAllowPerday: parseInt(data['IMG_ALLOW']),\n    }\n    console.log(props.data)\n    // console.log(data['IMG_ALLOW'])\n    // console.log(parseInt(data['IMG_ALLOW']))\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const [qcUser, setQCUser] = useState([]);\n    const [openTable, setOpenTable] = useState(false);\n    const [masterID, setMasterID] = useState('')\n    // useEffect(() => {\n    //     function getQCUser() {\n    //         axiosInstance.get(\"api/User_Master.svc/get_user_select2/4F7172D2-225D-4925-917D-A8153AC734B4\")\n    //             .then(res => setQCUser([...res.data.data]))\n    //             .catch(err => console.log(err))\n    //     }\n    //     getQCUser()\n    // }, [])\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit Site</DialogTitle>\n            {!openTable\n                ? (\n                    <DialogContent>\n                        <div className={classes.paper}>\n                            <Formik\n                                initialValues={updateData}\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values)\n                                    setSubmitting(true);\n                                    const obj = {\n                                        \"SITE_GUID\": data['SITE_GUID'],\n                                        \"RES_ID\":values.resID === undefined ? data['RES_ID'] : values.resID,\n                                        \"MOBILE_NO\":values.mobileNo === undefined ? data['MOBILE_NO'] : values.mobileNo,\n                                        \"NAME\":values.name === undefined ? data['NAME'] : values.name,\n                                        \"CONTACT_PERSON\":values.contactPerson === undefined ? data['CONTACT_PERSON'] : values.contactPerson,\n                                        \"EMAIL\":values.email === undefined ? data['EMAIL'] : values.email,\n                                        \"CREATED_BY\":localStorage.getItem('client_userID')\n                                    }\n                                    // const obj = {\n                                    //     'RES_ID': values.resID === undefined ? data['RES_ID'] : values.resID,\n                                    //     'NAME': values.name === undefined ? data['NAME'] : values.name,\n                                    //     'CONTACT_PERSON': values.contactPerson === undefined ? data['CONTACT_PERSON'] : values.contactPerson,\n                                    //     'MOBILE_NO': values.mobileNo === undefined ? data['MOBILE_NO'] : values.mobileNo,\n                                    //     // 'ALT_MOBILE_NUMBER': values.altMobileNo === undefined ? data['MOBILE_NUMBER'] : values.altMobileNo,\n                                    //     'EMAIL': values.email === undefined ? data['EMAIL'] : values.email,\n                                    //     // 'ALT_EMAIL': values.altEmail === undefined ? data['ALT_EMAIL'] : values.altEmail,\n                                    //     // 'IMG_ALLOW': values.numberOfImagesAllowPerday === undefined ? data['IMG_ALLOW'] : values.numberOfImagesAllowPerday,\n                                    //     // 'QC_CODE': values.qcPerson === undefined ? qcUser.filter(item => item.text === data['QC_CODE'])[0]['id'] : qcUser.filter(item => item.text === values.qcPerson)[0]['id'],\n                                    //     'SITE_GUID': values.siteID,\n                                    //     \"CREATED_BY\": localStorage.getItem('client_userID')\n                                    // }\n                                    console.log(obj)\n                                    axiosInstance.post('api/Sites_Master.svc/update_site', obj)\n                                        .then(res => {\n                                            if(res.data.response[0]['CODE'] === \"200\"){\n                                                setMasterID(res.data.data[0]['MASTER_GUID'])\n                                                setOpenTable(true)\n                                                props.reload()\n                                                alert(res.data.response[0]['MESSAGE'])\n                                            }else{\n                                                alert(res.data.response[0]['MESSAGE'])\n\n                                            }\n                                        })\n                                        .catch(err => alert(err))\n                                }}\n\n                                validationSchema={Yup.object().shape({\n                                    resID: Yup.string().required('Required'),\n                                    name: Yup.string().required('Required'),\n                                    contactPerson: Yup.string().required('Required'),\n                                    mobileNo: Yup\n                                        .string()\n                                        .matches(mobileRegex, 'Mobile number is not valid')\n                                        .required('Required'),\n                                    // altMobileNo: Yup\n                                    //     .string()\n                                    //     .matches(mobileRegex, 'Mobile number is not valid'),\n                                    email: Yup\n                                        .string('Enter your email')\n                                        .email('Enter a valid email')\n                                        .required('Required'),\n                                    // altEmail: Yup\n                                    //     .string('Enter your email')\n                                    //     .email('Enter a valid email'),\n                                    // numberOfImagesAllowPerday: Yup.number().required('Required').positive().integer(),\n                                    // qcPerson: Yup.string().required('Required'),\n\n                                })}\n                            >\n                                {({\n                                    values,\n                                    touched,\n                                    errors,\n                                    dirty,\n                                    isSubmitting,\n                                    handleChange,\n                                    handleBlur,\n                                    handleReset,\n                                }) =>\n                                (\n                                    <Form className={classes.form}>\n                                        <Grid container spacing={2}>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.resID && touched.resID}\n                                                    autoComplete=\"resID\"\n                                                    name=\"resID\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.resID}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"resID\"\n                                                    label=\"Res ID\"\n                                                    autoFocus\n                                                    required\n                                                    helperText={\n                                                        errors.resID && touched.resID\n                                                            ? errors.resID\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.name && touched.name}\n                                                    autoComplete=\"name\"\n                                                    name=\"name\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.name}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"name\"\n                                                    label=\"Name\"\n                                                    required\n                                                    helperText={\n                                                        errors.name && touched.name\n                                                            ? errors.name\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.contactPerson && touched.contactPerson}\n                                                    autoComplete=\"contactPerson\"\n                                                    name=\"contactPerson\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.contactPerson}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"contactPerson\"\n                                                    label=\"Contact Person\"\n                                                    required\n                                                    helperText={\n                                                        errors.contactPerson && touched.contactPerson\n                                                            ? errors.contactPerson\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.mobileNo && touched.mobileNo}\n                                                    autoComplete=\"mobileNo\"\n                                                    name=\"mobileNo\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.mobileNo}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"mobileNo\"\n                                                    label=\"Mobile Number\"\n                                                    required\n                                                    helperText={\n                                                        errors.mobileNo && touched.mobileNo\n                                                            ? errors.mobileNo\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.altMobileNo && touched.altMobileNo}\n                                                    autoComplete=\"altMobileNo\"\n                                                    name=\"altMobileNo\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.altMobileNo}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"altMobileNo\"\n                                                    label=\"Alternate Mobile Number\"\n                                                    helperText={\n                                                        errors.altMobileNo && touched.altMobileNo\n                                                            ? errors.altMobileNo\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.email && touched.email}\n                                                    autoComplete=\"email\"\n                                                    name=\"email\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.email}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"email\"\n                                                    label=\"Email\"\n                                                    required\n                                                    helperText={\n                                                        errors.email && touched.email\n                                                            ? errors.email\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.altEmail && touched.altEmail}\n                                                    autoComplete=\"altEmail\"\n                                                    name=\"altEmail\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.altEmail}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"altEmail\"\n                                                    label=\"Alternate Email\"\n                                                    helperText={\n                                                        errors.altEmail && touched.altEmail\n                                                            ? errors.altEmail\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.numberOfImagesAllowPerday && touched.numberOfImagesAllowPerday}\n                                                    autoComplete=\"numberOfImagesAllowPerday\"\n                                                    name=\"numberOfImagesAllowPerday\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.numberOfImagesAllowPerday}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"numberOfImagesAllowPerday\"\n                                                    label=\"No.Of Images Allow Per Day\"\n                                                    required\n                                                    helperText={\n                                                        errors.numberOfImagesAllowPerday && touched.numberOfImagesAllowPerday\n                                                            ? errors.numberOfImagesAllowPerday\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.qcPerson && touched.qcPerson}\n                                                    id=\"qcPerson\"\n                                                    select\n                                                    label=\"QC Person\"\n                                                    variant=\"outlined\"\n                                                    className={classes.textField}\n                                                    value={values.qcPerson}\n                                                    onChange={handleChange(\"qcPerson\")}\n                                                    fullWidth\n                                                    required\n                                                    helperText={\n                                                        errors.qcPerson && touched.qcPerson\n                                                            ? errors.qcPerson\n                                                            : null\n                                                    }\n                                                >\n                                                    <MenuItem value=\"\">\n                                                        <em>None</em>\n                                                    </MenuItem>\n                                                    {qcUser && qcUser.map(item => (\n                                                        <MenuItem key={item.text} value={item.text}>\n                                                            {item.text}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid> */}\n\n                                        </Grid>\n                                        <DialogActions>\n                                            <Button\n                                                type=\"button\"\n                                                className=\"outline\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                onClick={handleReset}\n                                                disabled={!dirty || isSubmitting}\n                                            >\n                                                Reset\n                        </Button>\n                                            <Button\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                disabled={isSubmitting}>\n                                                Submit\n                                            </Button>\n                                        </DialogActions>\n                                    </Form>\n                                )\n                                }\n                            </Formik>\n                        </div>\n                    </DialogContent>\n                ) : (\n                    <DialogContent>\n                    <Grid container xs={12} spacing={2}>\n                        <TimeSlot siteID={data['SITE_GUID']} masterID={masterID} close={props.close} />\n                    </Grid>\n                </DialogContent>\n                )}\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/AddSite/AddSite.js",["1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport axios from 'axios'\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport TimeSlot from '../TimeSlot'\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../../../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function AddSite(props) {\n\n    const classes = useStyles();\n    const data = {\n        businessID: props.businessID,\n        resID: \"\",\n        name: \"\",\n        contactPerson: \"\",\n        mobileNo: \"\",\n        email: \"\",\n        numberOfImagesAllowPerday: \"\",\n        // qcPerson: \"\"\n    }\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const [qcUser, setQCUser] = useState([]);\n    const [openTable, setOpenTable] = useState(false);\n    const [siteID, setSiteID] = useState('');\n    const [masterID, setMasterID] = useState('')\n    const [ids, setIDs] = useState({})\n    // useEffect(() => {\n    // function getQCUser() {\n    //     axiosInstance.get(\"api/User_Master.svc/get_user_select2/4F7172D2-225D-4925-917D-A8153AC734B4\")\n    //         .then(res => setQCUser([...res.data.data]))\n    //         .catch(err => console.log(err))\n    // }\n    // getQCUser()\n    // }, [])\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n    console.log(siteID, \"master\", masterID)\n    console.log('openTable :', openTable)\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add New Site</DialogTitle>\n            {!openTable\n                ? (\n                    <DialogContent>\n                        <div className={classes.paper}>\n                            <Formik\n                                initialValues={data}\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values)\n                                    setSubmitting(true);\n                                    const obj = {\n                                        \"BUSINESS_GUID\": values.businessID,\n                                        \"RES_ID\": values.resID,\n                                        \"NAME\": values.name,\n                                        \"CONTACT_PERSON\": values.contactPerson,\n                                        \"MOBILE_NO\": values.mobileNo,\n                                        \"EMAIL\": values.email,\n                                        \"IMG_ALLOW\": values.numberOfImagesAllowPerday,\n                                        // \"QC_CODE\": qcUser.filter(item => item.text === values.qcPerson)[0]['id'],\n                                        \"CREATED_BY\": localStorage.getItem('client_userID'),\n                                    }\n                                    console.log(obj)\n                                    axiosInstance.post('api/Sites_Master.svc/insert_site', obj)\n                                        // axios.post('http://23dc5bdeca0a.ngrok.io/Site_Master.svc/insert_sites', obj)\n                                        .then(res => {\n                                            console.log(res)\n                                            console.log(res.data)\n                                            console.log(res.data.data)\n                                            setIDs(res.data.data[0])\n                                        })\n                                        .then(setOpenTable(true))\n                                        .then(props.reload)\n                                        .then(alert(\"New Site Added Successfully\"))\n                                        .catch(err => console.log(err))\n                                }}\n\n                                validationSchema={Yup.object().shape({\n                                    resID: Yup.string().required('Required'),\n                                    name: Yup.string().required('Required'),\n                                    contactPerson: Yup.string().required('Required'),\n                                    mobileNo: Yup\n                                        .string()\n                                        .matches(mobileRegex, 'Mobile number is not valid')\n                                        .required('Required'),\n                                    // altMobileNo: Yup\n                                    //     .string()\n                                    //     .matches(mobileRegex, 'Mobile number is not valid'),\n                                    email: Yup\n                                        .string('Enter your email')\n                                        .email('Enter a valid email')\n                                        .required('Required'),\n                                    // altEmail: Yup\n                                    //     .string('Enter your email')\n                                    //     .email('Enter a valid email'),\n                                    // city: Yup.string().required('Required'),\n                                    // area: Yup.string().required('Required'),\n                                    numberOfImagesAllowPerday: Yup.number().required('Required').positive().integer(),\n                                    // qcPerson: Yup.string().required('Required'),\n\n                                })}\n                            >\n                                {({\n                                    values,\n                                    touched,\n                                    errors,\n                                    dirty,\n                                    isSubmitting,\n                                    handleChange,\n                                    handleBlur,\n                                    handleReset,\n                                }) =>\n                                (\n                                    <Form className={classes.form}>\n                                        <Grid container spacing={2}>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.resID && touched.resID}\n                                                    autoComplete=\"resID\"\n                                                    name=\"resID\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.resID}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"resID\"\n                                                    label=\"Res ID\"\n                                                    autoFocus\n                                                    required\n                                                    helperText={\n                                                        errors.resID && touched.resID\n                                                            ? errors.resID\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.name && touched.name}\n                                                    autoComplete=\"name\"\n                                                    name=\"name\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.name}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"name\"\n                                                    label=\"Name\"\n                                                    required\n                                                    helperText={\n                                                        errors.name && touched.name\n                                                            ? errors.name\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.contactPerson && touched.contactPerson}\n                                                    autoComplete=\"contactPerson\"\n                                                    name=\"contactPerson\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.contactPerson}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"contactPerson\"\n                                                    label=\"Contact Person\"\n                                                    required\n                                                    helperText={\n                                                        errors.contactPerson && touched.contactPerson\n                                                            ? errors.contactPerson\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.mobileNo && touched.mobileNo}\n                                                    autoComplete=\"mobileNo\"\n                                                    name=\"mobileNo\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.mobileNo}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"mobileNo\"\n                                                    label=\"Mobile Number\"\n                                                    required\n                                                    helperText={\n                                                        errors.mobileNo && touched.mobileNo\n                                                            ? errors.mobileNo\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.altMobileNo && touched.altMobileNo}\n                                                    autoComplete=\"altMobileNo\"\n                                                    name=\"altMobileNo\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.altMobileNo}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"altMobileNo\"\n                                                    label=\"Alternate Mobile Number\"\n                                                    helperText={\n                                                        errors.altMobileNo && touched.altMobileNo\n                                                            ? errors.altMobileNo\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.email && touched.email}\n                                                    autoComplete=\"email\"\n                                                    name=\"email\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.email}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"email\"\n                                                    label=\"Email\"\n                                                    required\n                                                    helperText={\n                                                        errors.email && touched.email\n                                                            ? errors.email\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.altEmail && touched.altEmail}\n                                                    autoComplete=\"altEmail\"\n                                                    name=\"altEmail\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.altEmail}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"altEmail\"\n                                                    label=\"Alternate Email\"\n                                                    helperText={\n                                                        errors.altEmail && touched.altEmail\n                                                            ? errors.altEmail\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.city && touched.city}\n                                                    autoComplete=\"city\"\n                                                    name=\"city\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.city}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"city\"\n                                                    label=\"City\"\n                                                    required\n                                                    helperText={\n                                                        errors.city && touched.city\n                                                            ? errors.city\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.area && touched.area}\n                                                    autoComplete=\"area\"\n                                                    name=\"area\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.area}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"area\"\n                                                    label=\"Area\"\n                                                    required\n                                                    helperText={\n                                                        errors.area && touched.area\n                                                            ? errors.area\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid> */}\n                                            <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.numberOfImagesAllowPerday && touched.numberOfImagesAllowPerday}\n                                                    autoComplete=\"numberOfImagesAllowPerday\"\n                                                    name=\"numberOfImagesAllowPerday\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.numberOfImagesAllowPerday}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    id=\"numberOfImagesAllowPerday\"\n                                                    label=\"No.Of Images Allow Per Day\"\n                                                    required\n                                                    helperText={\n                                                        errors.numberOfImagesAllowPerday && touched.numberOfImagesAllowPerday\n                                                            ? errors.numberOfImagesAllowPerday\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            {/* <Grid item xs={12} sm={6} md={4}>\n                                                <TextField\n                                                    error={errors.qcPerson && touched.qcPerson}\n                                                    id=\"qcPerson\"\n                                                    select\n                                                    label=\"QC Person\"\n                                                    variant =\"outlined\"\n                                                    className={classes.textField}\n                                                    value={values.qcPerson}\n                                                    onChange={handleChange(\"qcPerson\")}\n                                                    fullWidth\n                                                    required\n                                                    helperText={\n                                                        errors.qcPerson && touched.qcPerson\n                                                            ? errors.qcPerson\n                                                            : null\n                                                    }\n                                                >\n                                                    <MenuItem value=\"\">\n                                                        <em>None</em>\n                                                    </MenuItem>\n                                                    {qcUser && qcUser.map(item => (\n                                                        <MenuItem key={item.text} value={item.text}>\n                                                            {item.text}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid> */}\n\n                                        </Grid>\n                                        <DialogActions>\n                                            <Button\n                                                type=\"button\"\n                                                className=\"outline\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                onClick={handleReset}\n                                                disabled={!dirty || isSubmitting}\n                                            >\n                                                Reset\n                                            </Button>\n                                            <Button\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                disabled={isSubmitting}>\n                                                Submit\n                                            </Button>\n                                        </DialogActions>\n                                    </Form>\n                                )\n                                }\n                            </Formik>\n                        </div>\n                    </DialogContent>\n                ) : (\n                    <DialogContent>\n                        <Grid container xs={12} spacing={2}>\n                            <Grid item xs={12}>\n                                <p>New Site Added Successfully</p>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TimeSlot ids={ids} />\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                )}\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/Dot.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/NewTable/style.js",["1136","1137"],"import React from \"react\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: 'white',\n                padding: \"5px 10px\",\n            },\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        // MUIDataTablePagination: {\n        //     root: {\n        //         backgroundColor: useStyles.tableFooter,\n        //         color: useStyles.textPrimary\n        //     }\n        // },\n        // // handles row hover color and selected row color\n        // MuiTableRow: {\n        //     hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n        //     root: {\n        //         '&$selected': {\n        //             backgroundColor: useStyles.tableRowSelectColor\n        //         }\n        //     }\n        // },\n    },\n})\nexport default theme","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/PageTitle/PageTitle.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Widget/Widget.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/components/Charts/BarChartComponent.js",["1138"],"import React, { PureComponent } from 'react';\nimport {\n  BarChart, Bar, Brush, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList, ReferenceLine\n} from 'recharts';\n\n\nconst CustomizedAxisTick = props => (\n  <g transform={\"translate( \" + props.x + \",\" + props.y + \" )\"}>\n    <text x={60} y={10} fontFamily=\"Roboto\" fontSize=\"10px\" textAnchor=\"end\" fill={props.color || \"#8884d8\"} transform={\"rotate(\" + props.angle + \")\"} >\n      {props.payload.value}\n    </text>\n  </g>\n)\n\nexport default class BarChartComponent extends PureComponent {\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/q4eonc12/';\n  constructor(props){\n    super(props)\n    \n  }\n  \n  render() {\n   \n    console.log(this.props)\n    return this.props.data?(\n      <BarChart\n        width={900}\n        height={400}\n        data={this.props.data}\n        margin={{\n          top: 10, right: 30, left:10\n          // left: 10, bottom: 5,\n        }}\n        barSize={20}\n      >\n        <XAxis dataKey=\"CREATED_ON\" scale=\"point\" padding={{ left: 5, right: 5 }} interval={0} angle={30}  tick={<CustomizedAxisTick />}/>\n        <YAxis type=\"number\" domain={[0, 1500]} label={{ value: 'Time (in Sec)', angle: -90, position: 'insideLeft', textAnchor: 'middle' }}/> \n        <Tooltip />\n        <Legend />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <ReferenceLine y={35} stroke=\"red\" />\n        <Bar dataKey=\"QCPENDINGTIME\" fill=\"#8884d8\" background={{ fill: '#eee' }}>\n          <LabelList dataKey=\"QCPENDINGTIME\" position=\"top\" />\n        </Bar>\n        <Brush dataKey=\"CREATED_ON\" height={20} stroke=\"#8884d8\" y={380}/>\n      </BarChart>\n    ):\"\";\n  }\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/EditCheckList/EditCheckList.js",["1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  // .catch(err => console.log(err))\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    margin: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\nexport default function EditCheckList(props) {\n\n\n  const classes = useStyles();\n  const { data } = props\n  console.log(data['CHECK_LIST_NAME'])\n  const updateData= {\n    name:data['CHECK_LIST_NAME'],\n  }\n  const handleSave = () => {\n    console.log(updateData)\n    // const obj = {\n    //   'NAME': updateData.clientName === undefined?data['NAME']:updateData.clientName,\n    //   'EMAIL': updateData.email === undefined?data['EMAIL']:updateData.email,\n    //   'CONTACT_PERSON': updateData.contactPerson === undefined?data['CONTACT_PERSON']: updateData.contactPerson,\n    //   'CREATED_BY': localStorage.getItem('client_userID'),\n    //   'MASTER_GUID': data['MASTER_GUID']\n    // }\n    // axiosInstance.put('api/Master_Client.svc/update_master_client',{obj})\n    // .then(res => console.log(res))\n    // .catch(err => console.log(err))\n  }\n  // .catch(err => console.log(err))\n  console.log(data)\n  console.log(updateData)\n  const DialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  };\n  return (\n    <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit Check List</DialogTitle>\n      <DialogContent>\n        <div className={classes.paper}>\n          <Formik\n            initialValues={updateData}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log(values)\n              setSubmitting(true);\n              // const obj = {\n              //     'RES_ID': values.resID === undefined ? data['RES_ID'] : values.resID,\n              //     'NAME': values.name === undefined ? data['NAME'] : values.name,\n\n              // }\n              // console.log(obj)\n              // axiosInstance.post('api/Site_Master.svc/update_sites', obj)\n              //     .then(setOpenTable(true))\n              //     .then(props.reload)\n              //     .then(alert(\"Site Edited Successfully\"))\n              //     .catch(err => console.log(err))\n            }}\n\n            validationSchema={Yup.object().shape({\n              name: Yup.string().required('Required'),\n\n            })}\n          >\n            {({\n              values,\n              touched,\n              errors,\n              dirty,\n              isSubmitting,\n              handleChange,\n              handleBlur,\n              handleReset,\n            }) =>\n            (\n              <Form className={classes.form}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <TextField\n                      error={errors.name && touched.name}\n                      autoComplete=\"name\"\n                      name=\"name\"\n                      variant=\"outlined\"\n                      fullWidth\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      id=\"name\"\n                      label=\"Checklist Name\"\n                      required\n                      helperText={\n                        errors.name && touched.name\n                          ? errors.name\n                          : null\n                      }\n                    />\n                  </Grid>\n                </Grid>\n                <DialogActions>\n                  <Button\n                    type=\"button\"\n                    className=\"outline\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={handleReset}\n                    disabled={!dirty || isSubmitting}\n                  >\n                    Reset\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    disabled={isSubmitting}>\n                    Submit\n                  </Button>\n                </DialogActions>\n              </Form>\n            )\n            }\n          </Formik>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddSection/AddSection.js",["1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\n\n//component\nimport Table from './Table'\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        display: 'none',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n      },\n      closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n      },\n}))\n\nexport default function AddSection(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        sectionText: \"\",\n        sectionPosition: \"\",\n    })\n    const [dataTableData, setDataTableData] = useState([])\n    const [saveOpen, setSaveOpen] = useState(true)\n    const history = useHistory();\n    const [checkListID, setCheckListID] = useState()\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n          <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n              <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                <CloseIcon />\n              </IconButton>\n            ) : null}\n          </MuiDialogTitle>\n        );\n      };\n    useEffect(() => {\n        function getData() {\n            axiosInstance.get(`api/Section_Sub_Section.svc/get_question_section/${props.checkListID}`)\n                .then(res => setDataTableData([...res.data.data]))\n                .then(setSaveOpen(true))\n                .catch(err => console.log(err))\n        }\n        getData()\n    }, [props.checkListID])\n\n    const handleChange = (input) => ({ target: { value } }) => {\n        console.log(input, value)\n        setData({\n            ...data,\n            [input]: value\n        })\n    }\n    const handleSave = () => {\n        console.log(data)\n        setSaveOpen(true)\n        const newObj = {\n            'SECTION': data.sectionText, 'POSITION': data.sectionPosition\n        }\n        const obj = {\n            'CHECK_LIST_ID': props.checkListID,\n            'SECTION': data.sectionText,\n            'POSITION': data.sectionPosition,\n            'CREATED_BY': localStorage.getItem('client_userID'),\n            'LASTUPDATED_BY': localStorage.getItem('client_userID'),\n        }\n\n        axiosInstance.post('api/Section_Sub_Section.svc/Insert_question_section', obj)\n            .then(res => {\n                setTimeout(() => addNewData(newObj), 1000)\n            })\n            .catch(err => console.log(err))\n    }\n    const addNewData = () => {\n        function getData() {\n            axiosInstance.get(`api/Section_Sub_Section.svc/get_question_section/${props.checkListID}`)\n                .then(res => setDataTableData([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        getData()\n    }\n   const handleChangeSaveOpen =() => {\n    setSaveOpen(false)\n   }\n    console.log(props)\n    console.log(dataTableData)\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth=\"true\" maxWidth={'md'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add Section</DialogTitle>\n            <DialogContent spacing={2} >\n                <Grid container xs={12} spacing={2} style={{ display: \"flex\", direction: \"row\" }}>\n                    <Grid item xs={4} >\n                        <Grid container xs={12} style={{ display: \"flex\", direction: \"column\" }}>\n                            <TextField\n                                autoFocus\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                id=\"sectionText\"\n                                label=\"Section Text\"\n                                type=\"text\"\n                                value={data.sectionText}\n                                onChange={handleChange('sectionText')}\n                                fullWidth\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                id=\"sectionPosition\"\n                                label=\"Section Position\"\n                                type=\"text\"\n                                value={data.sectionPosition}\n                                onChange={handleChange('sectionPosition')}\n                                fullWidth\n                            />\n                        </Grid>\n                        <DialogActions>\n                            <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n                                Save\n                            </Button>\n                        </DialogActions>\n                    </Grid>\n                    <Grid container xs={8}>\n                        <Table data={dataTableData} checkListID={props.checkListID} saveOpen={saveOpen} changeSaveOpen={handleChangeSaveOpen}/>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n                    Cancel\n                </Button>\n            </DialogActions>\n\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/components/Table/Table.js",["1166","1167","1168","1169","1170","1171"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// components\nimport PageTitle from \"../../../../components/PageTitle/PageTitle\";\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n\n// data\n// import mock from \"../../../dashboard/mock\";\n// import EditForm from \"../Edit/EditForm\";\n// import AddClient from \"../Add/AddClient\";\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get('api/Master_Client.svc/get_master_client/all')\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  const columns = [\n    {\n      name: \"EDIT\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\n              <EditRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"NAME\",\n      label: \"NAME\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"MOBILE_NO\",\n      label: \"MOBILE\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"EMAIL\",\n      label: \"EMAIL\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"CONTACT PERSON\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"STATUS\",\n      label: \"STATUS\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          switch (value) {\n            case \"1\":\n              return (<div>Active</div>)\n            case \"0\":\n              return (<div>InActive</div>)\n          }\n        }\n      }\n    },\n    {\n      name: \"BUSINESS\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={() => handleBusinessPage(dataIndex, rowIndex)}>\n              BUSINESS\n            </Button>\n          );\n        }\n      }\n    },\n    {\n      name: \"CHECKLIST\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={() => handleCheckListPage(dataIndex, rowIndex)}>\n              CHECKLIST\n            </Button>\n          );\n        }\n      }\n    },\n    {\n      name: \"USERS\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\">\n              USERS\n            </Button>\n          );\n        }\n      }\n    },\n  ]\n  const handleBusinessPage = (dataIndex) => {\n    console.log(dataTableData[dataIndex]['MASTER_GUID'])\n    let path = `/app/cm/masterClientList/business/${dataTableData[dataIndex]['MASTER_GUID']}`;\n    history.push(path);\n  }\n\n  const handleCheckListPage = (dataIndex) => {\n    console.log(dataTableData[dataIndex]['MASTER_GUID'])\n    let path = `/app/cm/masterClientList/checklist/${dataTableData[dataIndex]['MASTER_GUID']}`;\n    history.push(path);\n  }\n\n  const handleEdit = (dataIndex) => {\n    // let path = `/app/cm/masterClientList/edit/${dataTableData[dataIndex]['MASTER_GUID']}`;\n    // history.push(path);\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleAddButton = () => {\n    setOpenAdd(true)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false) \n  }\n  console.log(indexData)\n  return (\n    <>\n      <PageTitle title=\"Tables\" />\n\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={3} >\n          <Button \n            variant=\"contained\" \n            size=\"small\" \n            color=\"primary\" \n            startIcon={<AddCircleIcon />}\n            onClick={handleAddButton}\n            >\n            Add Master Client\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Master Client List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '560px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        {/* <EditForm open={open} data={indexData} close={handleClose} /> */}\n        {/* <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n        {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n      </Grid>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Table/Table.js",["1172","1173","1174","1175","1176","1177"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance'\n\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditBusiness from \"../EditBusiness/EditBusiness\";\nimport AddBusiness from \"../AddBusiness/AddBusiness\"\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: 'white',\n        padding: \"5px 10px\",\n      },\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const masterID = window.location.href.split('/').slice(-1).pop()\n\n  useEffect(() => {\n\n    \n    function getData() {\n      console.log(masterID)\n      axiosInstance.get(`api/Business_Master.svc/business_list/${masterID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\n              <EditRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"NAME\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"Contact Person\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"MOBILE_NO\",\n      label: \"Mobile\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"EMAIL\",\n      label: \"Email\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"Site\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={()=>handleOpenSitePage(tableMeta)}>\n              SITE\n            </Button>\n          );\n        }\n      }\n    },\n    {\n      name: \"Users\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={()=>handleOpenUsersPage(tableMeta)}>\n              USERS\n            </Button>\n          );\n        }\n      }\n    },\n  ]\n  const handleChecklistBtn = () => {\n    \n    let path = `/app/cm/masterClientList/checklist/${masterID}`;\n    history.push(path);\n  }\n  const handleOpenSitePage =(tableMeta) => {\n    console.log(tableMeta)\n    // setBusinessID(dataTableData[tableMeta.rowIndex]['BUSINESS_GUID'])\n    let path = `/app/cm/masterClientList/business/sitelist/${dataTableData[tableMeta.rowIndex]['BUSINESS_GUID']}`;\n    history.push(path)\n  }\n  const handleOpenUsersPage =(tableMeta) => {\n    console.log(tableMeta)\n    // setBusinessID(dataTableData[tableMeta.rowIndex]['BUSINESS_GUID'])\n    let path = `/app/cm/masterClientList/business/userslist/bm/${dataTableData[tableMeta.rowIndex]['BUSINESS_GUID']}`;\n    history.push(path)\n  }\n  const handleEdit = (dataIndex) => {\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  const handleAddButton = () => {\n    setOpenAdd(true)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleReload = () => {\n    axiosInstance.get(`api/Business_Master.svc/business_list/${masterID}`)\n    .then(res => setDataTableData([...res.data.data]))\n    .catch(err => console.log(err))\n  }\n  console.log(masterID)\n  console.log(dataTableData)\n  return (\n    <>\n      <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={3} >\n\n        </Grid>\n        <Grid item xs={3} >\n\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Business List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '500px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                customToolbar: () => {\n                  return (\n                    <>\n                      <IconButton >\n                        <Button\n                          variant=\"contained\"\n                          size=\"small\"\n                          color=\"primary\"\n                          startIcon={<AddCircleIcon />}\n                          onClick={handleAddButton}\n                        >\n                          Add Business\n                        </Button>\n                      </IconButton>\n                      <IconButton >\n                        <Button\n                          variant=\"contained\"\n                          size=\"small\"\n                          color=\"primary\"\n                          startIcon={<AddCircleIcon />}\n                          onClick={handleChecklistBtn}\n                        >\n                          Checklist\n                        </Button>\n                      </IconButton>\n\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        {open?<EditBusiness open={open} data={indexData} close={handleClose} reload={handleReload}/>:\"\"}\n        {openAdd?<AddBusiness open={openAdd} data={masterID} close={handleCloseAddButton} reload={handleReload}/>:\"\"}\n      </Grid>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/Table/Table.js",["1178","1179","1180","1181","1182","1183"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\"\n\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditCheckList from \"../EditCheckList/EditCheckList\";\nimport AddCheckList from \"../AddCheckList/AddCheckList\"\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: 'white',\n        padding: \"5px 10px\",\n      },\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [masterID, setMasterID] = useState('')\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n\n  useEffect(() => {\n    function getMasterID() {\n      console.log(\"checkList =\" + window.location.href.split('/').slice(-1).pop())\n      setMasterID(window.location.href.split('/').slice(-1).pop())\n    }\n    function getData() {\n      console.log(masterID)\n      axiosInstance.get(`api/Check_List_Management.svc/get_checklist_details/all/${masterID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getMasterID()\n    getData()\n  }, [masterID])\n\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\n              <EditRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"CHECK_LIST_NAME\",\n      label: \"Checklist Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    // {\n    //   name: \"CHECK_LIST_NAME\",\n    //   label: \"Short Form\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //   }\n    // },\n    // {\n    //   name: \"FAILURE_CRITERIA\",\n    //   label: \"Description\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //   }\n    // },\n    {\n      name: \"View Question\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={() => handleQuestion(dataIndex, rowIndex)}>\n              VIEW QUESTION\n            </Button>\n          );\n        }\n      }\n    },\n\n  ]\n  const handleQuestion = (dataIndex, rowIndex) => {\n    console.log(dataTableData[dataIndex]['CHECK_LIST_ID'])\n    let checklistID = dataTableData[dataIndex]['CHECK_LIST_ID']\n    let path = `/app/cm/masterClientList/checklist/${masterID}/${checklistID}`;\n    history.push(path);\n  }\n  const handleAddChecklist = () => {\n    setOpenAdd(true)\n  }\n  const handleEdit = (dataIndex) => {\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  console.log(dataTableData)\n\n  const handleReloadData = () => {\n      axiosInstance.get(`api/Check_List_Management.svc/get_checklist_details/all/${masterID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n  }\n\n  return (\n    <>\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Check List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '560px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                customToolbar: () => {\n                  return (\n                      <>\n                          <IconButton >\n                              <Button\n                                 variant=\"contained\"\n                                 size=\"small\"\n                                 color=\"primary\"\n                                 startIcon={<AddCircleIcon />}\n                                 onClick={handleAddChecklist}\n                                 >\n                                   Add Checklist\n                              </Button>\n                          </IconButton>\n                      </>\n                  );\n              }}}\n              />\n          </MuiThemeProvider>\n        </Grid>\n      </Grid>\n      <EditCheckList open={open} data={indexData} close={handleClose} />\n      <AddCheckList open={openAdd} close={handleCloseAddButton} masterClientID={masterID} reload={handleReloadData}/>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Table/Table.js",["1184","1185","1186","1187","1188","1189"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\n\n// data\nimport mock from \"../../../../dashboard/mock\";\nimport EditFormNew from \"../Edit/EditFormNew\"\nimport AddNewClient from \"../Add/AddNewClient\"\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  },\n\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n    MUIDataTableBodyCell: {\n      root: {\n        margin: \"8px 3px\",\n        padding: \"0px\",\n        '&:nth-child(1)': { width: \"100px\" },\n        // '&:nth-child(2)': { width: \"10px\" },\n        // '&:nth-child(3)': { width: \"180px\" , border: \"1px solid red\"},\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowSelectColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n   \n  },\n})\n\nexport default function Tables() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [viewOptions, setViewOptions] = useState(false)\n  const [indexValue, setIndexValue] = useState()\n  var timerId\n\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get('api/Master_Client.svc/get_master_client/all')\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  const columns = [\n    {\n      name: \"\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            indexValue === rowIndex ?\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <Tooltip title=\"Edit\">\n                  {/* <IconButton color=\"primary\" size=\"small\" > */}\n                  <EditRoundedIcon\n                    color=\"primary\"\n                    fontSize=\"small\" \n                    style={{ backgroundColor: \"rgb(224,224,224)\", marginLeft: \"5px\", padding: \"2px\", borderRadius:\"50px\", cursor:\"pointer\"}} \n                    onClick={() => handleEdit(dataIndex)} />\n                  {/* </IconButton> */}\n                </Tooltip>\n                <Tooltip title=\"View\">\n                  {/* <IconButton color=\"primary\" size=\"small\" > */}\n                  <VisibilityRounded\n                    color=\"primary\"\n                    fontSize=\"small\" \n                    style={{ backgroundColor: \"rgb(224,224,224)\", marginLeft: \"5px\", padding: \"2px\", borderRadius:\"50px\", cursor:\"pointer\" }} \n                    onClick={() => handleBusinessPage(dataIndex, rowIndex)}\n                  />\n                  {/* </IconButton> */}\n                </Tooltip>\n              </div>\n              : <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n\n              </div>\n          );\n        }\n      }\n    },\n    // {\n    //   name: viewOptions ? \"View\" : \"\",\n    //   options: {\n    //     filter: false,\n    //     sort: false,\n    //     empty: true,\n    //     customBodyRenderLite: (dataIndex, rowIndex) => {\n    //       return (\n    //         indexValue === rowIndex ?\n    //           <IconButton color=\"primary\" size=\"small\" onClick={() => handleBusinessPage(dataIndex, rowIndex)}>\n    //             <VisibilityRounded\n    //               color=\"primary\"\n    //               fontSize=\"small\"\n    //             />\n    //           </IconButton>\n    //           : \"\"\n    //       );\n    //     }\n    //   }\n    // },\n    {\n      name: \"NAME\",\n      label: \"Name\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"Contact Person\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"MOBILE_NO\",\n      label: \"Mobile No.\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"EMAIL\",\n      label: \"Email\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    // {\n    //   name: \"STATUS\",\n    //   label: \"Status\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //     customBodyRender: (value, tableMeta, updateValue) => {\n    //       switch (value) {\n    //         case \"1\":\n    //           return (<div>Active</div>)\n    //         case \"0\":\n    //           return (<div>InActive</div>)\n    //       }\n    //     }\n    //   }\n    // },\n\n  ]\n  const handleBusinessPage = (dataIndex) => {\n    console.log(dataTableData[dataIndex]['MASTER_GUID'])\n    // let path = `/app/cm/masterClientList/business/${dataTableData[dataIndex]['MASTER_GUID']}`;\n    localStorage.setItem('client_ID', dataTableData[dataIndex]['MASTER_GUID'])\n    let path = `/app/onboarding`;\n    history.push(path);\n  }\n\n  const handleEdit = (dataIndex) => {\n    // let path = `/app/cm/masterClientList/edit/${dataTableData[dataIndex]['MASTER_GUID']}`;\n    // history.push(path);\n    setOpen(true)\n    setIndexData({ ...dataTableData[dataIndex] })\n\n  }\n  const handleAddButton = () => {\n    setOpenAdd(true)\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  const handleReload = () => {\n    axiosInstance.get('api/Master_Client.svc/get_master_client/all')\n      .then(res => setDataTableData([...res.data.data]))\n      .catch(err => console.log(err))\n  }\n  const callOnce = (rowIndex) => {\n    setIndexValue(rowIndex)\n    setViewOptions(true)\n  }\n  const debounceFunction = (func, delay) => {\n    clearTimeout(timerId)\n    timerId = setTimeout(func, delay)\n  }\n\n\n  console.log(indexData)\n  return (\n    <>\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Master Client List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                rowsPerPage: 10,\n                download: true,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '560px',\n                tableBodyMaxHeight: \"\",\n                rowHover: true,\n                setRowProps: (row, dataIndex, rowIndex) => {\n                  return {\n                    onMouseOver: () => {\n                      debounceFunction(callOnce(rowIndex), 1000)\n                    },\n                    onMouseLeave: () => {\n                      setIndexValue()\n                      setViewOptions(false)\n                    }\n                  }\n                },\n                setTableProps: () => {\n                  return {\n                    size: \"small\"\n                  }\n                },\n\n                customToolbar: () => {\n                  return (\n                    <>\n                      <IconButton >\n                        <Button\n                          variant=\"contained\"\n                          size=\"small\"\n                          color=\"primary\"\n                          startIcon={<AddCircleIcon />}\n                          onClick={handleAddButton}\n                        >\n                          Add Master Client\n                        </Button>\n                      </IconButton>\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        <EditFormNew open={open} data={indexData} close={handleClose} reload={handleReload} />\n        <AddNewClient open={openAdd} close={handleCloseAddButton} reload={handleReload} />\n      </Grid>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Wrappers/Wrappers.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Table/BottomTable.js",["1190","1191","1192","1193"],"import React from \"react\";\nimport MUIDataTable from \"mui-datatables\";\n\n\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { CircularProgress, Typography, Button } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n\n\nconst theme = createMuiTheme({\n    palette: {\n        /* ... */\n    },\n    overrides: {\n        MUIDataTableBodyCell: {\n            root: {\n                \n            }\n        },\n        MUIDataTableHeadCell: {\n            root: {\n                padding: \"0em 2em\",\n                visibility: 'hidden'\n            }\n        },\n    },\n});\n\n\nclass BottomTable extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            data: [],\n            openModal: false,\n            columns: this.columns,\n            error: false,\n            errorMessage:\"\",\n            options: {\n                filter: false,\n                search: false,\n                print: false,\n                download: false,\n                viewColumns: false,\n                customToolbar: null,\n                selectableRows: 'none',\n                pagination: false,\n                responsive: 'standard',\n                \n            }\n\n        }\n    }\n\n\n    componentDidMount() {\n        this.getData(\"api/Qc_Dashboard.svc/get_team_member\")\n    }\n\n\n    getData = async (url) => {\n        this.setState({ isLoading: true });\n        await axiosInstance.get(url)\n            .then(res => {\n                console.log(res)\n                if(res.data !== null || res.data !== undefined){\n                    if(res.data.data !== null){\n                     this.setState({ data: [...res.data.data], isLoading: false })\n                    }else{\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Data Unavailable'\n                        })\n                    }\n                }else{\n                    this.setState({\n                        error: true,\n                        errorMessage: 'Network Error'\n                    })\n                }\n            })\n            .catch(err => {\n                this.setState({\n                    error: true,\n                    errorMessage: err\n                })\n            })\n    }\n\n    openModalFunc = (rowIndex) => {\n        this.setState({\n            openModal: true\n        })\n    }\n    handleCloseModal = () => {\n        this.setState({\n            openModal: false\n        })\n    }\n    columns = [\n        {\n            name: \"TEAM_MEMBER\",\n\n        },\n        {\n            name: \"DONE\",\n            options: {\n                customBodyRenderLite: (dataIndex) => {\n                    let value = this.state.data[dataIndex]['DONE'];\n                    return <Chip label={\"QC Done : \" + value} style={{backgroundColor:'green', color: 'white'}}/>;\n                },\n            }\n        },\n        {\n            name: \"PENDING\",\n            options: {\n                customBodyRenderLite: (dataIndex) => {\n                    let value = this.state.data[dataIndex]['PENDING'];\n                    return <Chip label={\"Images Pending : \" + value} style={{backgroundColor:'red', color: 'white'}}/>;\n                },\n            }\n        },\n        {\n            name: \"QCDONETIME\",\n            options: {\n                customBodyRenderLite: (dataIndex) => {\n                    let value = this.state.data[dataIndex]['QCDONETIME'];\n                    return <Chip label={\"Average Time : \" + value} style={{backgroundColor:'blue', color: 'white'}}/>;\n                },\n            }\n        },\n        {\n            name: \"QCPENDINGTIME\",\n            options: {\n                customBodyRenderLite: (dataIndex) => {\n                    let value = this.state.data[dataIndex]['QCPENDINGTIME'];\n                    return <Chip label={\"Waiting Time : \" + value} style={{backgroundColor:'yellow'}}/>;\n                },\n            }\n        }\n    ]\n    render() {\n        const { data, columns, options, isLoading, error, errorMessage } = this.state\n        console.log(data)\n        return (\n            <>\n                <MuiThemeProvider theme={theme}>\n                    {data?<MUIDataTable\n                        title={<Typography variant=\"h6\">\n                            {isLoading && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }}>Loading...</CircularProgress>}\n                            </Typography>}\n                        data={data}\n                        columns={columns}\n                        options={options}\n                    />: <Typography variant=\"h5\">\n                        {errorMessage}\n                    </Typography>}\n                </MuiThemeProvider>\n            </>\n        );\n    }\n}\n\nexport default BottomTable;","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/icons/Icons.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddSection/Table.js",["1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\n// components\nimport PageTitle from \"../../../../../components/PageTitle/PageTitle\";\nimport Widget from \"../../../../../components/Widget/Widget\";\nimport Table from \"../../../../dashboard/components/Table/Table\";\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [indexData, setIndexData] = useState({})\n  const [data, setData] = useState([])\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [sectionID, setSectionID] = useState('') \n\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\">\n              {tableMeta.rowIndex === rowIndex\n                  ? <div style={{ display: \"flex\" }}>\n                    <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                    <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                  </div>\n                  : <EditRoundedIcon onClick={() => {\n                    return (\n                      handleEdit(tableMeta, tableMeta.rowIndex)\n                    )\n                  }} />}\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"SECTION\",\n      label: \"Section Text\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n              tableMeta.rowIndex === rowIndex\n                  ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                  : <div>{value}</div>\n      )\n      }\n    },\n    {\n      name: \"POSITION\",\n      label: \"Section Position\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n              tableMeta.rowIndex === rowIndex\n                  ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                  : <div>{value}</div>\n      )\n      }\n    },\n    {\n      name: \"DELETE\",\n      label: \"Delete\",\n      options: {\n        filter: false,\n        sort: true,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(dataIndex)}>\n              <DeleteRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n  ]\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0 && index<updatedata.length-1)\n    console.log(newDataArr)\n    \n    let obj = {\n      \"SECTIONS_ID\":sectionID,\n      \"SECTION\":newDataArr[0],\n      \"POSITION\":newDataArr[1],\n      \"LASTUPDATED_BY\":localStorage.getItem('client_userID')\n    }\n    axiosInstance.post('api/Section_Sub_Section.svc/update_question_section', obj)\n        .then(res => getUpdatedData())\n        .catch(err => console.log(err))\n}\n\n\n  const getUpdatedData =() => {\n    setRowIndex()\n    axiosInstance.get(`api/Section_Sub_Section.svc/get_question_section/${props.checkListID}`)\n    .then(res => setData([...res.data.data]))\n    .then(props.changeSaveOpen)\n    .catch(err => console.log(err))\n  }\n\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    setSectionID(tableMeta.tableData[rowIndex]['SECTIONS_ID'])\n    setRowIndex(rowIndex)\n   \n  }\n  const handleCancel = () => {\n    setRowIndex()\n  }\n  const handleDelete = () => {\n    \n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  console.log(indexData)\n  console.log(props.data)\n  console.log(props)\n  return (\n    <>\n\n      <Grid item xs={12} spacing={2}>\n        <MuiThemeProvider theme={theme}>\n          <MUIDataTable\n            title=\"Section List\"\n            data={props.saveOpen?props.data?props.data:'isLoading...':data}\n            columns={columns}\n            options={{\n              filter: true,\n              selectableRows: 'none',\n              filterType: 'dropdown',\n              responsive: 'standard',\n              rowsPerPage: 5,\n              download: true,\n              downloadOptions: {\n                filename: 'tableDownload.csv',\n                separator: ',',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true || false,\n                  useDisplayedRowsOnly: true || true\n                } || false\n              },\n              tableBodyHeight: '560px',\n              tableBodyMaxHeight: \"\",\n              setTableProps: () => {\n                return {\n                  padding: 'default'\n                }\n              },\n            }}\n          />\n        </MuiThemeProvider>\n      </Grid>\n      {/* <EditForm open={open} data={indexData} close={handleClose} />\n        <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n      {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Widget/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/EditBusiness/EditBusiness.js",["1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\nimport {\n  Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    margin: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\nexport default function EditBusiness(props) {\n\n  const classes = useStyles();\n  const {data} = props\n  const updateData = {\n    clientName: data['NAME'],\n    email:data['EMAIL'],\n    mobileNo: data['MOBILE_NO'],\n    contactPerson: data['CONTACT_PERSON'],\n    businessId: data['BUSINESS_GUID']\n  }\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const history = useHistory();\n  const DialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  };\n \n\n  return (\n    <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit Business</DialogTitle>\n      <DialogContent>\n        \n          <div className={classes.paper}>\n            <Formik\n              initialValues={updateData}\n              onSubmit={(values, { setSubmitting }) => {\n                console.log(values)\n                   setSubmitting(true);\n                   const obj = {\n                    'NAME': values.clientName === undefined?updateData.clientName : values.clientName,\n                    'EMAIL': values.email === undefined?updateData.email : values.email,\n                    'MOBILE_NO':values.mobileNo === undefined?updateData.mobileNo : values.mobileNo,\n                    'CONTACT_PERSON': values.contactPerson === undefined?updateData.contactPerson: values.contactPerson,\n                    'CREATED_BY': localStorage.getItem('client_userID'),\n                    'BUSINESS_GUID': updateData.businessId\n                  }\n                  console.log(obj)\n                   axiosInstance.post('api/Business_Master.svc/update_business', obj)\n                   .then(res => console.log(res))\n                   .then(props.reload)\n                   .then(props.close)\n                   .then(alert(\"Edited Successfully\"))\n                   .catch(err => console.log(err))\n              }}\n\n              validationSchema={Yup.object().shape({\n                mobileNo: Yup\n                  .string()\n                  .matches(mobileRegex, 'Mobile number is not valid')\n                  .required('Required'),\n                clientName: Yup.string()\n                  .required('Required'),\n                email: Yup\n                  .string('Enter your email')\n                  .email('Enter a valid email')\n                  .required('Required'),\n                contactPerson: Yup\n                  .string()\n                  .required('Required'),\n              })}\n            >\n              {({\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleReset,\n              }) =>\n              (\n                <Form className={classes.form}>\n                  <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.clientName && touched.clientName}\n                        autoComplete=\"clientName\"\n                        name=\"clientName\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.clientName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"clientName\"\n                        label=\"Client Name\"\n                        autoFocus\n                        required\n                        helperText={\n                          errors.clientName && touched.clientName\n                            ? errors.clientName\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.email && touched.email}\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"email\"\n                        label=\"Email\"\n                        required\n                        helperText={\n                          errors.email && touched.email\n                            ? errors.email\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.mobileNo && touched.mobileNo}\n                        autoComplete=\"mobileNo\"\n                        name=\"mobileNo\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.mobileNo}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"mobileNo\"\n                        label=\"Mobile Number\"\n                        required\n                        helperText={\n                          errors.mobileNo && touched.mobileNo\n                            ? errors.mobileNo\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.contactPerson && touched.contactPerson}\n                        autoComplete=\"contactPerson\"\n                        name=\"contactPerson\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.contactPerson}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"contactPerson\"\n                        label=\"Contact Person\"\n                        required\n                        helperText={\n                          errors.contactPerson && touched.contactPerson\n                            ? errors.contactPerson\n                            : null\n                        }\n                      />\n                    </Grid>\n\n                  </Grid>\n                  <DialogActions>\n                    <Button\n                      type=\"button\"\n                      className=\"outline\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      onClick={handleReset}\n                      disabled={!dirty || isSubmitting}\n                    >\n                      Reset\n                        </Button>\n                    <Button \n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      disabled={isSubmitting}>\n                      Submit\n                    </Button>\n                  </DialogActions>\n                </Form>\n              )\n              }\n            </Formik>\n          </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/icons/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/PageTitle/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/checklist/component/AddCheckList/AddCheckList.js",["1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton\n} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function AddCheckList(props) {\n\n    const classes = useStyles();\n    const data = {\n        checklistName: \"\",\n    }\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n    // const handleChange = (input) => ({ target: { value } }) => {\n    //     console.log(input, value)\n    //     setData({\n    //         ...data,\n    //         [input]: value\n    //     })\n    // }\n    const handleSave = () => {\n        console.log(props)\n        console.log(data)\n        const obj = {\n            'MASTER_CLIENT_ID': props.masterClientID,\n            'CHECK_LIST_NAME': data.checklistName,\n            'CREATED_BY': localStorage.getItem('client_userID'),\n        }\n        console.log(obj)\n        console.log(history)\n        axiosInstance.post('api/Check_List_Management.svc/insert_checklist', obj)\n            .then(res => console.log(res))\n            .then(props.close)\n            .then(props.reload)\n            .catch(err => console.log(err))\n    }\n\n    return (\n        <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add Checklist</DialogTitle>\n            <DialogContent>\n                <div className={classes.paper}>\n                    <Formik\n                        initialValues={data}\n                        onSubmit={(values, { setSubmitting }) => {\n                            console.log(values)\n                            setSubmitting(true);\n                            const obj = {\n                                'MASTER_CLIENT_ID': props.masterClientID,\n                                'CHECK_LIST_NAME': values.checklistName,\n                                'CREATED_BY': localStorage.getItem('client_userID'),\n                            }\n                            axiosInstance.post('api/Check_List_Management.svc/insert_checklist', obj)\n                                .then(res => console.log(res))\n                                .then(props.reload)\n                                .then(props.close)\n                                .then(alert(\"New Checklist Added Successfully\"))\n                                .catch(err => console.log(err))\n                        }}\n\n                        validationSchema={Yup.object().shape({\n\n                            checklistName: Yup.string()\n                                .required('Required'),\n                        })}\n                    >\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            dirty,\n                            isSubmitting,\n                            handleChange,\n                            handleBlur,\n                            handleReset,\n                        }) =>\n                        (\n                            <Form className={classes.form}>\n                                <Grid container spacing={2}>\n\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            error={errors.checklistName && touched.checklistName}\n                                            autoComplete=\"checklistName\"\n                                            name=\"checklistName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.checklistName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"checklistName\"\n                                            label=\"Checklist Name\"\n                                            autoFocus\n                                            required\n                                            helperText={\n                                                errors.checklistName && touched.checklistName\n                                                    ? errors.checklistName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <DialogActions>\n                                    <Button\n                                        type=\"button\"\n                                        className=\"outline\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        onClick={handleReset}\n                                        disabled={!dirty || isSubmitting}\n                                    >\n                                        Reset\n                        </Button>\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        disabled={isSubmitting}>\n                                        Submit\n                    </Button>\n                                </DialogActions>\n                                {/* <Grid container xs={12} spacing={2}>\n                    \n                    <Grid item xs={12} sm={12} md={12}>\n                        <TextField\n                            margin=\"normal\"\n                            id=\"name\"\n                            label=\"Checklist name\"\n                            type=\"text\"\n                            value = {data['checklistName']}\n                            onChange={handleChange('checklistName')}\n                            fullWidth\n                        />\n                    </Grid>\n                </Grid> */}\n                            </Form>\n                        )\n                        }\n                    </Formik>\n                </div>\n            </DialogContent>\n            {/* <DialogActions>\n                <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n                    Cancel\n        </Button>\n                <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n                    Save\n        </Button>\n            </DialogActions> */}\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/TimeSlot.js",["1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\n//component\nimport EditTimeSlot from './EditTimeSlot';\n\n//component\nimport Table from './Table'\nimport axiosInstance from '../../../../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function TimeSlot(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n        siteID: props.siteID\n    })\n    const [dataTableData, setDataTableData] = useState([])\n    const [saveOpen, setSaveOpen] = useState(true)\n    const [editEnable, setEditEnable] = useState(false)\n    const [checkListArr, setCheckListArr] = useState([])\n    const [editData, setEditData] = useState()\n    // const [updateData, setUpdateData] = useState({\n    //     start: editData['TIME'],\n    //     end: editData['END_TIME'],\n    //     flag: editData['AUDIT_CLOSE_FLAG'],\n    //     checklistName: editData['CHECK_LIST_NAME']\n    // })\n    // const masterID = window.location.href.split('/').slice(-2).shift()\n    // const masterID = props.masterID\n    const history = useHistory();\n    useEffect(() => {\n        getCheckList()\n    }, [])\n\n    useEffect(() => {\n        console.log(props.ids)\n        getData()\n    }, [props.ids['SITE_GUID']])\n\n    function getCheckList() {\n        axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n            .then(res => setCheckListArr([...res.data.data]))\n            .catch(err => console.log(err))\n\n    }\n    function getData() {\n        axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.ids['SITE_GUID']}`)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    if (res.data.data !== null) {\n                        setDataTableData([...res.data.data])\n                    } else {\n                        alert(res.data.response[0]['MESSAGE'])\n                    }\n                } else {\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .then(setSaveOpen(true))\n            .catch(err => console.log(err))\n    }\n\n    const handleChangeSaveOpen = () => {\n        setSaveOpen(false)\n    }\n    const handleActiveEdit = (arg) => {\n        console.log(arg)\n        setEditData({\n            start: arg['START_TIME'],\n            end: arg['END_TIME'],\n            flag: arg['AUDIT_CLOSE_FLAG'] === \"0\" ? \"No\" : arg['AUDIT_CLOSE_FLAG'] === \"1\" ? \"Yes\" : \"\",\n            checklistName: arg['CHECK_LIST_NAME'],\n            shiftID: arg['SHIFT_ID'],\n        })\n        setEditEnable(true)\n    }\n    const handelCancel = () => {\n        setEditEnable(false)\n    }\n\n    console.log(props)\n    console.log(dataTableData)\n    console.log(editData)\n    return (\n        <>\n\n            <Grid container spacing={1}>\n                <Grid item xs={4} >\n                    {!editEnable ?\n                        <Grid container>\n                            <Grid item xs={12} alignContent=\"space-around\" justify=\"center\">\n                                <h3>Insert New Slot</h3>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.paper}>\n                                    <Formik\n                                        initialValues={data}\n                                        onSubmit={(values, { setSubmitting, handleReset }) => {\n                                            console.log(values)\n                                            setSubmitting(true);\n                                            setSaveOpen(true)\n\n                                            const obj = {\n                                                \"SITE_GUID\": props.ids['SITE_GUID'],\n                                                \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                                                \"START_TIME\": values.startTime,\n                                                \"END_TIME\": values.endTime,\n                                                \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : 0,\n                                                \"CREATED_BY\": localStorage.getItem('client_userID')\n                                            }\n\n                                            console.log(obj)\n                                            axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                                                .then(res => {\n                                                    if (res.data.response[0]['CODE'] === \"200\") {\n                                                        setTimeout(() => getData(), 500)\n                                                    } else {\n                                                        alert(res.data.response[0]['MESSAGE'])\n                                                    }\n                                                })\n                                                .then(setSubmitting(false))\n                                                .catch(err => console.log(err))\n                                        }}\n\n                                        validationSchema={Yup.object().shape({\n\n                                            startTime: Yup.string()\n                                                .required('Required'),\n                                            endTime: Yup.string()\n                                                .required('Required'),\n                                            auditCloseFlag: Yup.string()\n                                                .required('Required'),\n                                            selectChecklist: Yup.string()\n                                                .required('Required'),\n                                        })}\n                                    >\n                                        {({\n                                            values,\n                                            touched,\n                                            errors,\n                                            dirty,\n                                            isSubmitting,\n                                            handleChange,\n                                            handleBlur,\n                                            handleReset,\n                                        }) =>\n                                        (\n                                            <Form className={classes.form}>\n                                                <Grid container spacing={2}>\n\n                                                    <Grid item xs={12} sm={6}>\n                                                        <TextField\n                                                            error={errors.startTime && touched.startTime}\n                                                            autoComplete=\"startTime\"\n                                                            id=\"startTime\"\n                                                            label='Start Time'\n                                                            type=\"time\"\n                                                            name=\"startTime\"\n                                                            variant=\"outlined\"\n                                                            fullWidth\n                                                            value={values.startTime}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            InputLabelProps={{\n                                                                shrink: true,\n                                                            }}\n                                                            inputProps={{\n                                                                style: {\n                                                                    paddingRight: 2\n                                                                }\n                                                            }}\n                                                            helperText={\n                                                                errors.startTime && touched.startTime\n                                                                    ? errors.startTime\n                                                                    : null\n                                                            }\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={6}>\n                                                        <TextField\n                                                            error={errors.endTime && touched.endTime}\n                                                            autoComplete=\"endTime\"\n                                                            id=\"endTime\"\n                                                            label=\"End Time\"\n                                                            type=\"time\"\n                                                            name=\"endTime\"\n                                                            variant=\"outlined\"\n                                                            fullWidth\n                                                            value={values.endTime}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            InputLabelProps={{\n                                                                shrink: true,\n\n                                                            }}\n                                                            inputProps={{\n                                                                style: {\n                                                                    paddingRight: 2\n                                                                }\n                                                            }}\n                                                            helperText={\n                                                                errors.endTime && touched.endTime\n                                                                    ? errors.endTime\n                                                                    : null\n                                                            }\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} >\n                                                        <TextField\n                                                            error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                                            id=\"auditCloseFlag\"\n                                                            select\n                                                            label=\"Audit Close Flag\"\n                                                            variant=\"outlined\"\n                                                            className={classes.textField}\n                                                            value={values.auditCloseFlag}\n                                                            onChange={handleChange(\"auditCloseFlag\")}\n                                                            fullWidth\n                                                            required\n                                                            helperText={\n                                                                errors.auditCloseFlag && touched.auditCloseFlag\n                                                                    ? errors.auditCloseFlag\n                                                                    : null\n                                                            }\n                                                        >\n                                                            <MenuItem value=\"\">\n                                                                <em>None</em>\n                                                            </MenuItem>\n                                                            <MenuItem value=\"Yes\">Yes</MenuItem>\n                                                            <MenuItem value=\"No\">No</MenuItem>\n                                                        </TextField>\n                                                    </Grid>\n                                                    <Grid item xs={12} >\n                                                        <TextField\n                                                            error={errors.selectChecklist && touched.selectChecklist}\n                                                            id=\"selectChecklist\"\n                                                            select\n                                                            label=\"Checklist Name\"\n                                                            variant=\"outlined\"\n                                                            className={classes.textField}\n                                                            value={values.selectChecklist}\n                                                            onChange={handleChange(\"selectChecklist\")}\n                                                            fullWidth\n                                                            required\n                                                            helperText={\n                                                                errors.selectChecklist && touched.selectChecklist\n                                                                    ? errors.selectChecklist\n                                                                    : null\n                                                            }\n                                                        >\n                                                            <MenuItem value=\"\">\n                                                                <em>None</em>\n                                                            </MenuItem>\n                                                            {checkListArr && checkListArr.map(item => (\n                                                                <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                                            ))}\n                                                        </TextField>\n                                                    </Grid>\n                                                </Grid>\n                                                <DialogActions>\n                                                    <Button\n                                                        type=\"button\"\n                                                        className=\"outline\"\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        className={classes.submit}\n                                                        onClick={handleReset}\n                                                        disabled={!dirty || isSubmitting}\n                                                    >\n                                                        Reset\n                                                </Button>\n                                                    <Button\n                                                        type=\"submit\"\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        className={classes.submit}\n                                                        disabled={isSubmitting}>\n                                                        Submit\n                                                </Button>\n                                                </DialogActions>\n                                            </Form>\n                                        )\n                                        }\n                                    </Formik>\n                                </div>\n                            </Grid>\n                        </Grid>\n                        :\n\n                        <Grid container xs={12} >\n                            <Grid item xs={12}>\n                                <h3>Edit Slot</h3>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <EditTimeSlot\n                                    checkListArr={checkListArr}\n                                    editData={editData}\n                                    siteID={props.ids['SITE_GUID']}\n                                    close={props.close}\n                                    reloadTable={getData}\n                                    cancel={handelCancel} />\n                            </Grid>\n                        </Grid>\n                    }\n                </Grid>\n                <Grid item xs={8}>\n                    <Table\n                        data={dataTableData}\n                        siteID={props.ids['SITE_GUID']}\n                        saveOpen={saveOpen}\n                        changeSaveOpen={handleChangeSaveOpen}\n                        activeEdit={handleActiveEdit}\n                        reloadTable={getData}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//     input: {\n//         display: 'none',\n//     },\n//     formControl: {\n//         margin: theme.spacing(1),\n//         minWidth:120\n//     },\n//     root: {\n//         margin: 0,\n//         padding: theme.spacing(2),\n//     },\n//     closeButton: {\n//         position: 'absolute',\n//         right: theme.spacing(1),\n//         top: theme.spacing(1),\n//         color: theme.palette.grey[500],\n//     },\n//     selectEmpty: {\n//         marginTop: theme.spacing(2),\n//     },\n// }))\n\n// export default function TimeSlot(props) {\n\n\n//     const classes = useStyles();\n//     const [data, setData] = useState({\n//         startTime: \"\",\n//         endTime: \"\",\n//         auditCloseFlag: \"\",\n//         selectChecklist: \"\"\n//     })\n//     const [dataTableData, setDataTableData] = useState([])\n//     const [saveOpen, setSaveOpen] = useState(true)\n//     const [checkListID, setCheckListID] = useState()\n//     const [checkListArr, setCheckListArr] = useState([])\n//     const history = useHistory();\n//     console.log(props.ids)\n//     useEffect(() => {\n//         function getCheckList() {\n//             axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n//                 .then(res => setCheckListArr([...res.data.data]))\n//                 .catch(err => console.log(err))\n//         }\n//         getCheckList()\n//     }, [])\n\n//     useEffect(() => {\n//         function getData() {\n//             axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.ids['SITE_GUID']}`)\n//                 .then(res => setDataTableData([...res.data.data]))\n//                 .then(setSaveOpen(true))\n//                 .catch(err => console.log(err))\n//         }\n//         getData()\n//     }, [props.ids['SITE_GUID']])\n\n//     const handleChange = (input) => ({ target: { value } }) => {\n//         console.log(input, value)\n//         setData({\n//             ...data,\n//             [input]: value\n//         })\n//     }\n//     const handleSave = () => {\n//         console.log(data)\n//         setSaveOpen(true)\n//         const newObj = {\n//             \"TIME\": data.startTime,\n//             \"END_TIME\": data.endTime,\n//             \"AUDIT_CLOSE_FLAG\": data.auditCloseFlag === \"Yes\" ? 1 : 0,\n//             \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === data.selectChecklist)[0]['CHECK_LIST_ID'],\n//         }\n\n//         const obj = {\n//             \"SITE_GUID\": props.ids['SITE_GUID'],\n//             \"START_TIME\": data.startTime,\n//             \"END_TIME\": data.endTime,\n//             \"AUDIT_CLOSE_FLAG\": data.auditCloseFlag === \"Yes\" ? 1 : 0,\n//             \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === data.selectChecklist)[0]['CHECK_LIST_ID'],\n//             \"CREATED_BY\": localStorage.getItem('client_userID'),\n//         }\n//         console.log(obj)\n//         axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n//             .then(res => {\n//                 setTimeout(() => addNewData(newObj), 1000)\n//             })\n//             .then(setData({\n//                 ...data,\n//                 startTime: \"\",\n//                 endTime: \"\",\n//                 auditCloseFlag: \"\",\n//                 selectChecklist: \"\"\n//             }))\n//             .catch(err => console.log(err))\n//     }\n//     const addNewData = () => {\n//         function getData() {\n//             axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.ids['SITE_GUID']}`)\n//                 .then(res => setDataTableData([...res.data.data]))\n//                 .catch(err => console.log(err))\n//         }\n//         getData()\n//     }\n//     const handleChangeSaveOpen = () => {\n//         setSaveOpen(false)\n//     }\n//     console.log(props)\n//     console.log(dataTableData)\n//     return (\n//         <>\n//             <Grid container xs={12} spacing={2} style={{ display: \"flex\", direction: \"row\" }}>\n//                 <Grid item xs={4} >\n//                     <Grid container xs={12} >\n//                         <Grid item xs={6}>\n//                             <TextField\n//                                 autoFocus\n//                                 margin=\"normal\"\n//                                 id=\"startTime\"\n//                                 label='Start Time'\n//                                 type=\"time\"\n//                                 value={data.startTime}\n//                                 InputLabelProps={{\n//                                     shrink: true\n//                                 }}\n//                                 onChange={handleChange('startTime')}\n//                                 fullWidth\n//                                 required\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <TextField\n//                                 margin=\"normal\"\n//                                 id=\"endTime\"\n//                                 label=\"End Time\"\n//                                 type=\"time\"\n//                                 value={data.endTime}\n//                                 InputLabelProps={{\n//                                     shrink: true\n//                                 }}\n//                                 onChange={handleChange('endTime')}\n//                                 fullWidth\n//                                 required\n//                             />\n//                         </Grid>\n//                         <Grid item xs={12}>\n//                             <FormControl required fullWidth={true} margin=\"dense\" className={classes.formControl}>\n//                                 <InputLabel id=\"auditCloseFlagLabel\">Audit Close Flag</InputLabel>\n//                                 <Select\n//                                     labelId=\"auditCloseFlagLabel\"\n//                                     id=\"auditCloseFlag\"\n//                                     value={data.auditCloseFlag}\n//                                     onChange={handleChange('auditCloseFlag')}\n//                                     className={classes.selectEmpty}\n//                                 >\n//                                     <MenuItem value=\"\">\n//                                         <em>None</em>\n//                                     </MenuItem>\n//                                     <MenuItem value=\"Yes\">Yes</MenuItem>\n//                                     <MenuItem value=\"No\">No</MenuItem>\n//                                 </Select>\n//                             </FormControl>\n//                         </Grid>\n//                         <Grid item xs={12}>\n//                             <FormControl required fullWidth={true} margin=\"dense\" className={classes.formControl}>\n//                                 <InputLabel id=\"select-checklist\">CheckList Name</InputLabel>\n//                                 <Select\n//                                     labelId=\"select-checklist\"\n//                                     id=\"selectChecklist\"\n//                                     value={data.selectChecklist}\n//                                     onChange={handleChange('selectChecklist')}\n//                                     className={classes.selectEmpty}\n\n//                                 >\n//                                     <MenuItem value=\"\">\n//                                         <em>None</em>\n//                                     </MenuItem>\n//                                     {checkListArr && checkListArr.map(item => (\n//                                         <MenuItem value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n//                                     ))}\n//                                 </Select>\n//                             </FormControl>\n//                         </Grid>\n//                     </Grid>\n//                     <DialogActions>\n//                         <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n//                             Save\n//                         </Button>\n//                     </DialogActions>\n//                 </Grid>\n//                 <Grid item xs={8}>\n//                     <Table data={dataTableData} siteID={props.siteID} saveOpen={saveOpen} changeSaveOpen={handleChangeSaveOpen} />\n//                 </Grid>\n//             </Grid>\n\n//             <DialogActions>\n//                 <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n//                     Close\n//                 </Button>\n//             </DialogActions>\n//         </>\n//     );\n// }","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Edit/EditFormNew.js",["1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\nimport {\n  Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    margin: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\nexport default function EditForm(props) {\n\n  // const [file, setFile] = useState('');\n  // const [filename, setFilename] = useState('Choose File');\n  // const [uploadedFile, setUploadedFile] = useState({});\n  const classes = useStyles();\n  const {data} = props\n  const updateData = {\n    clientName: data['NAME'],\n    email:data['EMAIL'],\n    contactPerson: data['CONTACT_PERSON'],\n    masterId: data['MASTER_GUID']\n  }\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const history = useHistory();\n  const DialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  };\n \n\n  return (\n    <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Edit Master Client</DialogTitle>\n      <DialogContent>\n        \n          <div className={classes.paper}>\n            <Formik\n              initialValues={updateData}\n              onSubmit={(values, { setSubmitting }) => {\n                console.log(values)\n                   setSubmitting(true);\n                   const obj = {\n                    'NAME': values.clientName === undefined?updateData.clientName : values.clientName,\n                    'EMAIL': values.email === undefined?updateData.email : values.email,\n                    'CONTACT_PERSON': values.contactPerson === undefined?updateData.contactPerson: values.contactPerson,\n                    'CREATED_BY': localStorage.getItem('client_userID'),\n                    'MASTER_GUID': updateData.masterId\n                  }\n                  console.log(obj)\n                   axiosInstance.post('api/Master_Client.svc/update_master_client', obj)\n                   .then(res =>{\n                     console.log(res)\n                     props.reload()\n                     props.close()\n                     alert(\"Edited Successfully\")\n                   })\n                   .catch(err => console.log(err))\n              }}\n\n              validationSchema={Yup.object().shape({\n                // mobileNo: Yup\n                //   .string()\n                //   .matches(mobileRegex, 'Mobile number is not valid')\n                //   .required('Required'),\n                clientName: Yup.string()\n                  .required('Required'),\n                email: Yup\n                  .string('Enter your email')\n                  .email('Enter a valid email')\n                  .required('Required'),\n                contactPerson: Yup\n                  .string()\n                  .required('Required'),\n              })}\n            >\n              {({\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleReset,\n              }) =>\n              (\n                <Form className={classes.form}>\n                  <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.clientName && touched.clientName}\n                        autoComplete=\"clientName\"\n                        name=\"clientName\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.clientName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"clientName\"\n                        label=\"Client Name\"\n                        autoFocus\n                        required\n                        helperText={\n                          errors.clientName && touched.clientName\n                            ? errors.clientName\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.email && touched.email}\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"email\"\n                        label=\"Email\"\n                        required\n                        helperText={\n                          errors.email && touched.email\n                            ? errors.email\n                            : null\n                        }\n                      />\n                    </Grid>\n                    {/* <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.mobileNo && touched.mobileNo}\n                        autoComplete=\"mobileNo\"\n                        name=\"mobileNo\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.mobileNo}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"mobileNo\"\n                        label=\"Mobile Number\"\n                        required\n                        helperText={\n                          errors.mobileNo && touched.mobileNo\n                            ? errors.mobileNo\n                            : null\n                        }\n                      />\n                    </Grid> */}\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.contactPerson && touched.contactPerson}\n                        autoComplete=\"contactPerson\"\n                        name=\"contactPerson\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.contactPerson}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"contactPerson\"\n                        label=\"Contact Person\"\n                        required\n                        helperText={\n                          errors.contactPerson && touched.contactPerson\n                            ? errors.contactPerson\n                            : null\n                        }\n                      />\n                    </Grid>\n\n                  </Grid>\n                  <DialogActions>\n                    <Button\n                      type=\"button\"\n                      className=\"outline\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      onClick={handleReset}\n                      disabled={!dirty || isSubmitting}\n                    >\n                      Reset\n                        </Button>\n                    <Button \n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      disabled={isSubmitting}>\n                      Submit\n                    </Button>\n                    {/* <DisplayFormikState {...props} /> */}\n                  </DialogActions>\n\n                </Form>\n              )\n              }\n            </Formik>\n          </div>\n        {/* </Container> */}\n      </DialogContent>\n    </Dialog>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/masterClientList/components/Add/AddNewClient.js",["1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\nimport {\n  Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    margin: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\nexport default function AddNewClient(props) {\n\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(false)\n  const data = {\n    clientName: \"\",\n    email: \"\",\n    mobileNo: \"\",\n    contactPerson: \"\"\n  }\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const history = useHistory();\n  const DialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add Master Client</DialogTitle>\n      <DialogContent>\n          <div className={classes.paper}>\n            <Formik\n              initialValues={data}\n              onSubmit={(values, { setSubmitting }) => {\n                console.log(values)\n                   setSubmitting(true);\n                   setIsLoading(true);\n                   const obj = {\n                    'MOBILE_NO': values.mobileNo,\n                    'NAME': values.clientName,\n                    'EMAIL': values.email,\n                    'CONTACT_PERSON': values.contactPerson,\n                    'CREATED_BY': localStorage.getItem('client_userID'),\n                  }\n                   axiosInstance.post('api/Master_Client.svc/insert_master_client', obj)\n                   .then(res => {\n                     console.log(res)\n                     console.log(res.data)\n                     console.log(res.data.data)\n                     console.log(res.data.response)\n                     setIsLoading(false)\n                     alert(res.data.response[0]['MESSAGE'])\n                   })\n                   .then(props.reload)\n                   .then(props.close)\n                   \n                   .catch(err => console.log(err))\n              }}\n\n              validationSchema={Yup.object().shape({\n                mobileNo: Yup\n                  .string()\n                  .matches(mobileRegex, 'Mobile number is not valid')\n                  .required('Required'),\n                clientName: Yup.string()\n                  .required('Required'),\n                email: Yup\n                  .string('Enter your email')\n                  .email('Enter a valid email')\n                  .required('Required'),\n                contactPerson: Yup\n                  .string()\n                  .required('Required'),\n              })}\n            >\n              {({\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleReset,\n              }) =>\n              (\n                <Form className={classes.form}>\n                  <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.clientName && touched.clientName}\n                        autoComplete=\"clientName\"\n                        name=\"clientName\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.clientName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"clientName\"\n                        label=\"Client Name\"\n                        autoFocus\n                        required\n                        helperText={\n                          errors.clientName && touched.clientName\n                            ? errors.clientName\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.email && touched.email}\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"email\"\n                        label=\"Email\"\n                        required\n                        helperText={\n                          errors.email && touched.email\n                            ? errors.email\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.mobileNo && touched.mobileNo}\n                        autoComplete=\"mobileNo\"\n                        name=\"mobileNo\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.mobileNo}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"mobileNo\"\n                        label=\"Mobile Number\"\n                        required\n                        helperText={\n                          errors.mobileNo && touched.mobileNo\n                            ? errors.mobileNo\n                            : null\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        error={errors.contactPerson && touched.contactPerson}\n                        autoComplete=\"contactPerson\"\n                        name=\"contactPerson\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={values.contactPerson}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        id=\"contactPerson\"\n                        label=\"Contact Person\"\n                        required\n                        helperText={\n                          errors.contactPerson && touched.contactPerson\n                            ? errors.contactPerson\n                            : null\n                        }\n                      />\n                    </Grid>\n\n                  </Grid>\n                  <DialogActions>\n                    <Button\n                      type=\"button\"\n                      className=\"outline\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      onClick={handleReset}\n                      disabled={!dirty || isSubmitting}\n                    >\n                      Reset\n                        </Button>\n                    <Button \n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.submit}\n                      disabled={isSubmitting}\n                    >\n                      {isLoading? <CircularProgress size={20} style={{ color: \"blue\" }}/> : \"Submit\"}\n                    </Button>\n                  </DialogActions>\n\n                </Form>\n              )\n              }\n            </Formik>\n          </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/TimeSlot.js",["1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\n//component\nimport Table from './Table'\nimport axiosInstance from '../../../../../../../components/Utils/AxiosInstance';\nimport EditTimeSlot from './EditTimeSlot';\n\n\n// const useStyles = makeStyles((theme) => ({\n//     input: {\n//         display: 'none',\n//     },\n//     formControl: {\n//         margin: theme.spacing(1),\n//         minWidth: 120\n//     },\n//     root: {\n//         margin: 0,\n//         padding: theme.spacing(2),\n//     },\n//     closeButton: {\n//         position: 'absolute',\n//         right: theme.spacing(1),\n//         top: theme.spacing(1),\n//         color: theme.palette.grey[500],\n//     },\n//     selectEmpty: {\n//         marginTop: theme.spacing(2),\n//     },\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }))\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function TimeSlot(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n        siteID: props.siteID\n    })\n    const [dataTableData, setDataTableData] = useState([])\n    const [saveOpen, setSaveOpen] = useState(true)\n    const [editEnable, setEditEnable] = useState(false)\n    const [checkListArr, setCheckListArr] = useState([])\n    const [editData, setEditData] = useState()\n    // const [updateData, setUpdateData] = useState({\n    //     start: editData['TIME'],\n    //     end: editData['END_TIME'],\n    //     flag: editData['AUDIT_CLOSE_FLAG'],\n    //     checklistName: editData['CHECK_LIST_NAME']\n    // })\n    // const masterID = window.location.href.split('/').slice(-2).shift()\n    // const masterID = props.masterID\n    const history = useHistory();\n    useEffect(() => {\n        function getCheckList() {\n            axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n                .then(res => setCheckListArr([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n\n        getCheckList()\n    }, [props.masterID])\n\n    useEffect(() => {\n        function getData() {\n            axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n                .then(res => setDataTableData([...res.data.data]))\n                .then(setSaveOpen(true))\n                .catch(err => console.log(err))\n        }\n\n        getData()\n    }, [props.siteID])\n\n    // const handleChange = (input) => ({ target: { value } }) => {\n    //     console.log(input, value)\n    //     setData({\n    //         ...data,\n    //         [input]: value\n    //     })\n    // }\n    // const handleSave = () => {\n    //     console.log(data)\n    //     setSaveOpen(true)\n    //     const newObj = {\n    //         \"TIME\": data.startTime,\n    //         \"END_TIME\": data.endTime,\n    //         \"AUDIT_CLOSE_FLAG\": data.auditCloseFlag === \"Yes\" ? 1 : data.auditCloseFlag === \"No\" ? 0 : \"\",\n    //         \"CHECKLIST_ID\": checkListArr.filter(item => item.text === data.selectChecklist)[0]['id'],\n    //     }\n    //     const obj = {\n    //         \"SITE_GUID\": props.siteID,\n    //         \"TIME\": data.startTime,\n    //         \"END_TIME\": data.endTime,\n    //         \"AUDIT_CLOSE_FLAG\": data.auditCloseFlag === \"Yes\" ? 1 : data.auditCloseFlag === \"No\" ? 0 : \"\",\n    //         \"CHECKLIST_ID\": checkListArr.filter(item => item.text === data.selectChecklist)[0]['id'],\n    //         \"CREATED_BY\": localStorage.getItem('client_userID'),\n    //     }\n    //     console.log(obj)\n    //     axiosInstance.post('api/Audit_Time_Slots.svc/insert_audit_time_slots', obj)\n    //         .then(res => {\n    //             setTimeout(() => showUpdatedData(newObj), 1000)\n    //         })\n    //         .then(setData({\n    //             ...data,\n    //             startTime: \"\",\n    //             endTime: \"\",\n    //             auditCloseFlag: \"\",\n    //             selectChecklist: \"\"\n    //         }))\n    //         .catch(err => console.log(err))\n    // }\n    const showUpdatedData = () => {\n        axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n            .then(res => setDataTableData([...res.data.data]))\n            .catch(err => console.log(err))\n    }\n    const handleChangeSaveOpen = () => {\n        setSaveOpen(false)\n    }\n    const handleActiveEdit = (arg) => {\n        console.log(arg)\n        setEditData({\n            start: arg['START_TIME'],\n            end: arg['END_TIME'],\n            flag: arg['AUDIT_CLOSE_FLAG'] === \"0\" ? \"No\" : arg['AUDIT_CLOSE_FLAG'] === \"1\" ? \"Yes\" : \"\",\n            checklistName: arg['CHECK_LIST_NAME'],\n            checklistID: arg['CHECK_LIST_ID'],\n            siteID: props.siteID,\n            shiftID: arg['SHIFT_ID']\n        })\n        setEditEnable(true)\n    }\n    const handelCancel = () => {\n        setEditEnable(false)\n    }\n\n    console.log(props)\n    console.log(dataTableData)\n    console.log(editData)\n    return (\n        <>\n            <Grid item xs={8}>\n                <Table\n                    data={dataTableData}\n                    siteID={props.siteID}\n                    saveOpen={saveOpen}\n                    changeSaveOpen={handleChangeSaveOpen}\n                    activeEdit={handleActiveEdit}\n                    reloadTable={showUpdatedData}\n                />\n            </Grid>\n            {!editEnable ?\n                <Grid item xs={4} >\n\n                    <Grid item xs={12} alignContent=\"space-around\" justify=\"center\">\n                        <h3>Insert New Slot</h3>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div className={classes.paper}>\n                            <Formik\n                                initialValues={data}\n                                onSubmit={(values, { setSubmitting, handleReset }) => {\n                                    console.log(values)\n                                    setSubmitting(true);\n                                    setSaveOpen(true)\n                                    const obj = {\n                                        \"SITE_GUID\": data.siteID,\n                                        \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                                        \"START_TIME\": values.startTime,\n                                        \"END_TIME\": values.endTime,\n                                        \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : values.auditCloseFlag === \"No\" ? 0 : \"\",\n                                        \"CREATED_BY\": localStorage.getItem('client_userID')\n                                    }\n                                   \n                                    console.log(obj)\n                                    axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                                        .then(res => {\n                                            setTimeout(() => showUpdatedData(), 1000)\n                                        })\n                                        .then(\n                                            setSubmitting(false)\n                                        )\n                                        .catch(err => console.log(err))\n                                }}\n\n                                validationSchema={Yup.object().shape({\n\n                                    startTime: Yup.string()\n                                        .required('Required'),\n                                    endTime: Yup.string()\n                                        .required('Required'),\n                                    auditCloseFlag: Yup.string()\n                                        .required('Required'),\n                                    selectChecklist: Yup.string()\n                                        .required('Required'),\n                                })}\n                            >\n                                {({\n                                    values,\n                                    touched,\n                                    errors,\n                                    dirty,\n                                    isSubmitting,\n                                    handleChange,\n                                    handleBlur,\n                                    handleReset,\n                                }) =>\n                                (\n                                    <Form className={classes.form}>\n                                        <Grid container spacing={2}>\n\n                                            <Grid item xs={12} sm={6}>\n                                                <TextField\n                                                    error={errors.startTime && touched.startTime}\n                                                    autoComplete=\"startTime\"\n                                                    id=\"startTime\"\n                                                    label='Start Time'\n                                                    type=\"time\"\n                                                    name=\"startTime\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.startTime}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    InputLabelProps={{\n                                                        shrink: true,\n                                                    }}\n                                                    inputProps={{\n                                                        style: {\n                                                            paddingRight: 2\n                                                        }\n                                                    }}\n                                                    helperText={\n                                                        errors.startTime && touched.startTime\n                                                            ? errors.startTime\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sm={6}>\n                                                <TextField\n                                                    error={errors.endTime && touched.endTime}\n                                                    autoComplete=\"endTime\"\n                                                    id=\"endTime\"\n                                                    label=\"End Time\"\n                                                    type=\"time\"\n                                                    name=\"endTime\"\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    value={values.endTime}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    InputLabelProps={{\n                                                        shrink: true,\n\n                                                    }}\n                                                    inputProps={{\n                                                        style: {\n                                                            paddingRight: 2\n                                                        }\n                                                    }}\n                                                    helperText={\n                                                        errors.endTime && touched.endTime\n                                                            ? errors.endTime\n                                                            : null\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} >\n                                                <TextField\n                                                    error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                                    id=\"auditCloseFlag\"\n                                                    select\n                                                    label=\"Audit Close Flag\"\n                                                    variant=\"outlined\"\n                                                    className={classes.textField}\n                                                    value={values.auditCloseFlag}\n                                                    onChange={handleChange(\"auditCloseFlag\")}\n                                                    fullWidth\n                                                    required\n                                                    helperText={\n                                                        errors.auditCloseFlag && touched.auditCloseFlag\n                                                            ? errors.auditCloseFlag\n                                                            : null\n                                                    }\n                                                >\n                                                    <MenuItem value=\"\">\n                                                        <em>None</em>\n                                                    </MenuItem>\n                                                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                                                    <MenuItem value=\"No\">No</MenuItem>\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item xs={12} >\n                                                <TextField\n                                                    error={errors.selectChecklist && touched.selectChecklist}\n                                                    id=\"selectChecklist\"\n                                                    select\n                                                    label=\"Checklist Name\"\n                                                    variant=\"outlined\"\n                                                    className={classes.textField}\n                                                    value={values.selectChecklist}\n                                                    onChange={handleChange(\"selectChecklist\")}\n                                                    fullWidth\n                                                    required\n                                                    helperText={\n                                                        errors.selectChecklist && touched.selectChecklist\n                                                            ? errors.selectChecklist\n                                                            : null\n                                                    }\n                                                >\n                                                    <MenuItem value=\"\">\n                                                        <em>None</em>\n                                                    </MenuItem>\n                                                    {checkListArr && checkListArr.map(item => (\n                                                        <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid>\n                                        </Grid>\n                                        <DialogActions>\n                                            <Button\n                                                type=\"button\"\n                                                className=\"outline\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                onClick={handleReset}\n                                                disabled={!dirty || isSubmitting}\n                                            >\n                                                Reset\n                                                </Button>\n                                            <Button\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                                disabled={isSubmitting}>\n                                                Submit\n                                                </Button>\n                                        </DialogActions>\n                                    </Form>\n                                )\n                                }\n                            </Formik>\n                        </div>\n                    </Grid>\n                </Grid>\n                :\n                <Grid item xs={4} >\n                    <Grid container xs={12} >\n                        <Grid item xs={12}>\n                            <h3>Edit Slot</h3>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <EditTimeSlot checkListArr={checkListArr} editData={editData} close={props.close} reloadTable={showUpdatedData} cancel={handelCancel} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            }\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Charts/QCDetailChart.js",["1314","1315","1316"],"import React, { PureComponent } from 'react';\nimport {\n  ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip,\n  Legend, LabelList, ResponsiveContainer\n} from 'recharts';\n\nconst CustomizedAxisTick = props => (\n  <g transform={\"translate( \" + props.x + \",\" + props.y + \" )\"}>\n    <text x={0} y={0} fontFamily=\"Roboto\" fontSize=\"10px\" textAnchor=\"end\" fill={props.color || \"#8884d8\"} transform={\"rotate(\" + props.angle + \")\"} >\n      {props.payload.value}\n    </text>\n  </g>\n)\n\n\nexport default class QCDetailChart extends PureComponent {\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/shjsn5su/';\n  constructor(props) {\n    super(props)\n\n  }\n  legendText(value) {\n    return <span>Number of QCs {value}</span>\n  }\n  render() {\n    return this.props.data ? (\n      <ResponsiveContainer width=\"95%\" height=\"95%\">\n        <ComposedChart\n          layout=\"vertical\"\n          width=\"100%\"\n          height={500}\n          data={this.props.data}\n          margin={{\n            // top: 20, right: 20, bottom: 20, \n            top: 10,\n            right: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid stroke=\"#f5f5f5\" />\n          <XAxis type=\"number\" domain={[0, 500]} />\n          <YAxis interval={0} dataKey=\"CREATED_ON\" type=\"category\" tick={<CustomizedAxisTick />} />\n          <Tooltip />\n          <Legend verticalAlign=\"bottom\" formatter={this.legendText} />\n          {/* <Area dataKey=\"amt\" fill=\"#5269eb\" stroke=\"#5269eb\" /> */}\n          <Bar dataKey=\"DONE\" barSize={30} fill=\"green\">\n            <LabelList dataKey=\"DONE\" position=\"right\" tick={<CustomizedAxisTick />} />\n          </Bar>\n          <Bar dataKey=\"PENDING\" barSize={30} fill=\"#ff7300\">\n            {/* <LabelList dataKey=\"PENDING\" position=\"right\" tick={<CustomizedAxisTick />}/> */}\n          </Bar>\n          {/* <Line dataKey=\"uv\" stroke=\"#ff7300\" /> */}\n        </ComposedChart>\n      </ResponsiveContainer>\n    ) : \"\";\n  }\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Charts/QCTimeChart.js",["1317","1318"],"import React, { PureComponent } from 'react';\nimport {\n  BarChart, Bar, Brush, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList, ReferenceLine, ResponsiveContainer\n} from 'recharts';\n\n\nconst CustomizedAxisTick = props => (\n  <g transform={\"translate( \" + props.x + \",\" + props.y + \" )\"}>\n    <text x={60} y={10} fontFamily=\"Roboto\" fontSize=\"10px\" textAnchor=\"end\" fill={props.color || \"#8884d8\"} transform={\"rotate(\" + props.angle + \")\"} >\n      {props.payload.value}\n    </text>\n  </g>\n)\n\nexport default class QCTimeChart extends PureComponent {\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/q4eonc12/';\n  constructor(props){\n    super(props)\n    \n  }\n  legendText(value){\n    return <span>QC Pending Time</span>\n  }\n  tooltipText(value, name){\n    console.log(value, name)\n    return [value, \"QC Pending Time\" ]\n  }\n  render() {\n   \n    console.log(this.props)\n    return this.props.data?(\n      <ResponsiveContainer width=\"95%\" height=\"95%\">\n      <BarChart\n        data={this.props.data}\n        margin={{\n          top: 10\n        }}\n        barSize={30}\n        barGap={2}\n      >\n        <XAxis dataKey=\"CREATED_ON\" scale=\"point\"  padding={{ left: 10, right: 10 }} interval={0} angle={90}  tick={<CustomizedAxisTick />}/>\n        <YAxis type=\"number\" domain={[0, 1500]} label={{ value: 'Time (in Sec)', angle: -90, position: 'insideLeft', textAnchor: 'middle' }}/> \n        <Tooltip formatter={this.tooltipText}/>\n        <Legend verticalAlign=\"bottom\" wrapperStyle={{ paddingTop: \"50px\"}} formatter={this.legendText}/>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <ReferenceLine y={35} stroke=\"#e8ab1a\" strokeDasharray=\"3 3\"/>\n        <Bar dataKey=\"QCPENDINGTIME\" fill=\"#5269eb\" background={{ fill: 'white' }}>\n          <LabelList dataKey=\"QCPENDINGTIME\" position=\"top\" />\n        </Bar>\n        {/* <Brush dataKey=\"CREATED_ON\" height={20} stroke=\"#8884d8\" y={380}/> */}\n      </BarChart>\n      </ResponsiveContainer>\n    ):\"\";\n  }\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Tickets/Tickets.js",["1319","1320","1321","1322"],"import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\n\n\nexport default function Tickets(props) {\n  let count = props.data[1];\n  let title = props.title;\n  let que = props.icon\n  return (\n    <React.Fragment>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"80%\" }}>\n          <h4 style={{ fontWeight: \"normal\" }}>{title}</h4>\n          <h1><b>{count}</b></h1>\n        </div>\n        <div style={{ width: \"20%\" }}>\n          <img src={que} alt=\"\" width=\"50px\" />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/BigStat/BigStat.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Header/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/notifications/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/typography/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/maps/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/SidebarLink/SidebarLink.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/components/ApexLineChart.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/charts/components/ApexHeatmap.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dhlDashboard/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/UserAvatar/UserAvatar.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Notification/Notification.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/TwoWeeksChart.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/dataShift.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/BarLine.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/test.js",["1323","1324","1325"],"import React, {useState, useEffect} from 'react'\r\nimport ApexChartsL from 'react-apexcharts'\r\nimport axios from 'axios'\r\n\r\nfunction TrendChart(props) {\r\n  const { error, first, second, auditday } = props\r\n    \r\n\r\n    console.log(first);\r\n    console.log(second)\r\n\r\n\r\n\r\n    const series=  [{\r\n        name: 'Week 1',\r\n        data:first\r\n      },\r\n      {\r\n        name: 'Week 2',\r\n        data:second\r\n      }\r\n    ];\r\n      const options= {\r\n\r\n        legend: {\r\n          show:false\r\n        },\r\n        chart: {\r\n          height: 250,\r\n          width: \"100%\",\r\n          type: 'line',\r\n          toolbar: {\r\n            show: false\r\n          }\r\n        },\r\n        stroke: {\r\n          width: 4,\r\n          curve: 'smooth'\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          categories:auditday,\r\n          tickAmount: 5,\r\n          \r\n        },\r\n        title: {\r\n         \r\n        },\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shade: 'dark',\r\n            gradientToColors: [ '#FDD835'],\r\n            shadeIntensity: 1,\r\n            type: 'horizontal',\r\n            opacityFrom: 1,\r\n            opacityTo: 1,\r\n            stops: [0, 100, 100, 100]\r\n          },\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: [\"#FFA41B\"],\r\n          strokeColors: \"#fff\",\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7,\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Audits (in Percentage)',\r\n          },\r\n        }\r\n      }\r\n    \r\n\r\n    return error !== \"\"? <div>{error}</div> : <ApexChartsL options={options} series={series} type=\"line\" height={250}  />\r\n}\r\n\r\nexport default TrendChart","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/ColoumnChart.js",["1326","1327"],"import React, {useState, useEffect} from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\nimport axiosInstance from '../../../components/Utils/AxiosInstance'\r\n\r\nfunction BarChart(props) {\r\n    const { clientID } = props\r\n    const { days } = props\r\n    const [newData, setNewData] = useState({})\r\n    const [percentage, setPercentage ] = useState([])\r\n    const [grapglabels, setgrapglabels] = useState([]) \r\n    useEffect(() => {\r\n        function getData() {\r\n            \r\n            axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_seven_day_audit_score/${clientID}/${days}`)\r\n                .then(res => storeData(res.data.data))\r\n                .catch(err => console.log(err))\r\n        }\r\n        getData()\r\n\r\n    }, [days])\r\n    const storeData = (res) => {\r\n        setNewData(res)\r\n        let percentArr = res && res.map(item => item['PERCENTAGE'])\r\n        setPercentage(percentArr)\r\n\r\n        let labelAr = res && res.map(item => item['AUDIT_DATE'])\r\n        setgrapglabels(labelAr)\r\n    }\r\n    console.log(newData)\r\n    console.log(percentage)\r\n    console.log(props)\r\n\r\n  const  data = {\r\n      labels : grapglabels,\r\n      datasets: [\r\n          {\r\n          label:'',\r\n          data:percentage,\r\n          backgroundColor:['#2e70d2','#2e70d2','#2e70d2','#2e70d2','#2e70d2','#2e70d2','#2e70d2','#2e70d2'],\r\n          maxBarThickness: 20,\r\n          categoryPercentage: 0.5,\r\n          barPercentage: 1.0\r\n          }\r\n          \r\n      ],\r\n  }\r\n\r\n  const options ={\r\n      legend: {\r\n          display: false\r\n      },\r\n      chart: {\r\n        height: 200,\r\n        width: \"100%\",\r\n      },\r\n      scales:{\r\n          xAxes : [{\r\n              gridLines : {\r\n                  display : false,\r\n                  offsetGridLines: false\r\n              },\r\n              ticks:{\r\n                  display: true,\r\n                  //lineHeight:0,\r\n                  beginAtZero: true,\r\n                  stepSize: 10\r\n                }\r\n          }],\r\n\r\n          yAxes : [{\r\n              gridLines : {\r\n              display : true\r\n              },\r\n              ticks:{\r\n                  display: true,\r\n                  //lineHeight:0,\r\n                  beginAtZero: true,\r\n                  stepSize: 10\r\n                }\r\n          }]\r\n      }\r\n  }\r\n\r\n  return <Bar data={data} options={options} height={110} />\r\n}\r\n\r\n\r\nexport default BarChart\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/piechart.js",["1328","1329","1330","1331"],"import React, {useState, useEffect} from 'react'\r\nimport ApexChartsP from 'react-apexcharts'\r\nimport axios from 'axios'\r\nimport axiosInstance from '../../../components/Utils/AxiosInstance'\r\n\r\nfunction Piechart(props) {\r\n \r\n  \r\n    const series = props.props1 ? props.props1: []\r\n    const options= {\r\n      chart: {\r\n        height: 200,\r\n        type: 'radialBar',\r\n      },\r\n\r\n      \r\n  legend: {\r\n    show: false,\r\n    position: 'bottom',\r\n    horizontalAlign: 'center',\r\n  },\r\n      plotOptions: {\r\n        radialBar: {\r\n          \r\n          dataLabels: {\r\n            name: {\r\n              show: true,\r\n              fontSize: '14px',\r\n              fontFamily: undefined,\r\n              fontWeight: 500,\r\n              color: \"#000\",\r\n              offsetY: 25\r\n            },\r\n\r\n            value: {\r\n              show: true,\r\n              fontSize: '18px',\r\n              fontFamily: undefined,\r\n              fontWeight: 500,\r\n              color: \"rgba(0, 143, 251, 0.85)\",\r\n              offsetY: -15,\r\n              formatter: function (val) {\r\n                return val + '%'\r\n              }\r\n            },\r\n\r\n            total: {\r\n              show: false,\r\n              label: 'Total',\r\n              color: '#ccc',\r\n              fontSize: '20px',\r\n              fontFamily: undefined,\r\n              fontWeight: 500,\r\n              formatter: function (w) {\r\n                return w.globals.seriesTotals.reduce((a, b) => {\r\n                  return a + b\r\n                }, 0) / w.globals.series.length + '%'\r\n              }\r\n            },\r\n            \r\n          hollow: {\r\n            size: '10%',\r\n          },\r\n\r\n        \r\n        }\r\n        },\r\n\r\n        \r\n       \r\n      },\r\n\r\n     \r\n      labels:props.labels ? props.labels: [],\r\n    }\r\n\r\n\r\n      \r\n    return <ApexChartsP options={options} series={series} type=\"radialBar\" height={250} />\r\n   \r\n        \r\n}\r\n\r\nexport default Piechart\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/radialchart.js",["1332","1333","1334"],"import React, {useState, useEffect} from 'react'\r\nimport ApexChartsR from 'react-apexcharts'\r\nimport axios from 'axios'\r\n\r\nfunction radialchart(props) {\r\n  \r\n    const series =  props.props ? props.props: []\r\n    const options= {\r\n      chart: {\r\n        height: 200,\r\n        type: 'radialBar',\r\n      },\r\n      plotOptions: {\r\n        \r\n        radialBar: {\r\n          dataLabels: {\r\n            name: {\r\n              fontSize: '22px',\r\n            },\r\n\r\n            hollow: {\r\n                size: '80%',\r\n               \r\n            },\r\n            track: {\r\n              strokeWidth: '47%',\r\n            },\r\n            value: {\r\n              fontSize: '16px',\r\n            },\r\n            total: {\r\n              show: true,\r\n              label: 'Total',\r\n              formatter: function (w) {\r\n                // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\r\n                return 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      track: {\r\n        background: '#000',\r\n        margin: 5, \r\n      },\r\n\r\n      labels: ['Done', 'Due', 'QA PENDING'],\r\n    }\r\n\r\n\r\n      \r\n    return <ApexChartsR options={options} series={series} type=\"radialBar\" height={250} />\r\n   \r\n        \r\n}\r\n\r\nexport default radialchart\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Heatmap.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/TrendLine.js",["1335","1336","1337","1338","1339","1340"],"import React, {useState, useEffect} from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\nimport axiosInstance from '../../../../components/Utils/AxiosInstance'\r\nfunction TrendChart() {\r\n    const [auditday, setAuditday] = useState([])\r\n    const [percentagefirst, setPercentagefirst] = useState([])\r\n    const [percentagesecond, setPercentagesecond] = useState([])\r\n    const [percentagethird, setPercentagethird] = useState([])\r\n    const [percentagefourth, setPercentagefourth] = useState([])\r\n    const [percentagefifth, setPercentagefifth] = useState([])\r\n    const [percentagesixth, setPercentagesixth] = useState([])\r\n\r\n    useEffect(() => {\r\n        function getData() {\r\n            axiosInstance.get('api//Universal_Client_Dashboard.svc/get_weekly_score/f7fb29be-5b1c-4114-b3a7-2538cf224c9d')\r\n                .then(res => storeData(res.data))\r\n                .catch(err => console.log(err))\r\n        }\r\n        getData()\r\n\r\n    }, [])\r\n\r\n    const storeData = (res) => {\r\n        console.log(res);\r\n        let firstweek = res.first_week\r\n        let secondweek = res.second_week\r\n        let thirdweek = res.third_week\r\n        let fourthweek = res.four_week\r\n        let fifthweek = res.five_week\r\n        let sixthweek = res.six_week\r\n\r\n        let percentArrfirstWeek = firstweek && firstweek.map(item => item['PERCENTAGE'])\r\n        setPercentagefirst(percentArrfirstWeek)\r\n\r\n        let percentArrsecondtWeek = secondweek && secondweek.map(item => item['PERCENTAGE'])\r\n        setPercentagesecond(percentArrsecondtWeek)\r\n\r\n        let percentArrthirdWeek = thirdweek && thirdweek.map(item => item['PERCENTAGE'])\r\n        setPercentagesecond(percentArrthirdWeek)\r\n\r\n\r\n        let percentArrfourthWeek = fourthweek && fourthweek.map(item => item['PERCENTAGE'])\r\n        setPercentagesecond(percentArrfourthWeek)\r\n\r\n        let percentArrfifthtWeek = fifthweek && fifthweek.map(item => item['PERCENTAGE'])\r\n        setPercentagesecond(percentArrfifthtWeek)\r\n\r\n        let percentArrsixthWeek = sixthweek && sixthweek.map(item => item['PERCENTAGE'])\r\n        setPercentagesecond(percentArrsixthWeek)\r\n\r\n        let auditdays = firstweek && firstweek.map (item => item['AUDIT_DAY'])\r\n        setAuditday(auditdays)\r\n\r\n    }\r\n\r\n    console.log(percentagefirst);\r\n    console.log(percentagesecond)\r\n\r\n\r\n\r\n    const  data = {\r\n        labels : ['sun','mon','tue', 'wed', 'thu', 'fri', 'sat'],\r\n        datasets: [\r\n            {\r\n            label:'',\r\n            data:percentagefirst && percentagefirst,\r\n            backgroundColor:['rgb(247 247 246 / 0)'],\r\n            borderColor:['#2e70d2'],\r\n            borderWidth:['3'],\r\n            lineTension: 0.1,\r\n            borderCapStyle: 'butt',\r\n            pointRadius: 3,\r\n            pointBackgroundColor: '#480cc1',\r\n            borderJoinStyle: 'miter',\r\n            },\r\n\r\n            {\r\n                label:'',\r\n                data:percentagesecond && percentagesecond,\r\n                backgroundColor:['rgb(247 247 246 / 0)'],\r\n                borderColor:['#48a0f2'],\r\n                borderWidth:['3'],\r\n                lineTension: 0.1,\r\n                borderCapStyle: 'butt',\r\n                pointRadius: 3,\r\n                pointBackgroundColor: '#43a2ec',\r\n                borderJoinStyle: 'miter',\r\n                },\r\n\r\n                {\r\n                    label:'',\r\n                    data:percentagethird && percentagethird,\r\n                    backgroundColor:['rgb(247 247 246 / 0)'],\r\n                    borderColor:['#48a0f2'],\r\n                    borderWidth:['3'],\r\n                    lineTension: 0.1,\r\n                    borderCapStyle: 'butt',\r\n                    pointRadius: 3,\r\n                    pointBackgroundColor: '#43a2ec',\r\n                    borderJoinStyle: 'miter',\r\n                    },\r\n\r\n\r\n                    {\r\n                        label:'',\r\n                        data:percentagefourth && percentagefourth,\r\n                        backgroundColor:['rgb(247 247 246 / 0)'],\r\n                        borderColor:['#48a0f2'],\r\n                        borderWidth:['3'],\r\n                        lineTension: 0.1,\r\n                        borderCapStyle: 'butt',\r\n                        pointRadius: 3,\r\n                        pointBackgroundColor: '#43a2ec',\r\n                        borderJoinStyle: 'miter',\r\n                        },\r\n\r\n\r\n                        {\r\n                            label:'',\r\n                            data:percentagefifth && percentagefifth,\r\n                            backgroundColor:['rgb(247 247 246 / 0)'],\r\n                            borderColor:['#48a0f2'],\r\n                            borderWidth:['3'],\r\n                            lineTension: 0.1,\r\n                            borderCapStyle: 'butt',\r\n                            pointRadius: 3,\r\n                            pointBackgroundColor: '#43a2ec',\r\n                            borderJoinStyle: 'miter',\r\n                            },\r\n\r\n                            {\r\n                                label:'',\r\n                                data:percentagesixth && percentagesixth,\r\n                                backgroundColor:['rgb(247 247 246 / 0)'],\r\n                                borderColor:['#48a0f2'],\r\n                                borderWidth:['3'],\r\n                                lineTension: 0.1,\r\n                                borderCapStyle: 'butt',\r\n                                pointRadius: 3,\r\n                                pointBackgroundColor: '#43a2ec',\r\n                                borderJoinStyle: 'miter',\r\n                                }\r\n            \r\n        ],\r\n    }\r\n\r\n    const options ={\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales:{\r\n            xAxes : [{\r\n                gridLines : {\r\n                    display : false\r\n                },\r\n                ticks:{\r\n                    //display: false,\r\n                   // lineHeight:0,\r\n                    beginAtZero: true,\r\n                   // stepSize: 10\r\n                  }\r\n            }],\r\n\r\n            yAxes : [{\r\n                gridLines : {\r\n                //display : false\r\n                },\r\n                ticks:{\r\n                    //display: false,\r\n                    //lineHeight:0,\r\n                    beginAtZero: true,\r\n                    stepSize: 10\r\n                  }\r\n            }]\r\n        }\r\n    }\r\n\r\n    return <Line data={data} options={options} />\r\n}\r\n\r\nexport default TrendChart","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/BarChart.js",["1341","1342","1343"],"import React, { useState, useEffect } from 'react'\r\nimport Chart from 'react-apexcharts'\r\nimport axios from 'axios'\r\n\r\nfunction BarChart(props) {\r\n\r\n\r\n\r\n  const series = [{\r\n    data: props.props\r\n  }];\r\n\r\n  const options = {\r\n    chart: {\r\n      type: 'bar',\r\n      height: '100%',\r\n      toolbar: {\r\n        show: false\r\n      },\r\n    },\r\n\r\n    legend: {\r\n      show: false,\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: true,\r\n        distributed: true,\r\n        barHeight: '30%',\r\n        backgroundBarColors: [\"#ccc\"],\r\n\r\n      },\r\n\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n\r\n    fill: {\r\n      colors: ['#1451b6', '#a9adb3', '#e3370f']\r\n    },\r\n\r\n    grid: {\r\n      show: false,\r\n      borderColor: '#ccc',\r\n      xaxis: {\r\n        lines: {\r\n          show: false\r\n        }\r\n      },\r\n\r\n      padding: {\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0\r\n      },\r\n\r\n    },\r\n\r\n\r\n\r\n    xaxis: {\r\n      categories: ['DONE', 'PENDING', 'QA PENDING'],\r\n      axisBorder: {\r\n        show: false\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      lines: {\r\n        show: false\r\n      },\r\n      labels: {\r\n        show: false\r\n      }\r\n    },\r\n    yaxis: {\r\n      axisBorder: {\r\n        show: false\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      lines: {\r\n        show: false\r\n      },\r\n      labels: {\r\n        show: false\r\n      }\r\n    },\r\n\r\n  }\r\n  console.log(props)\r\n  console.log(series)\r\n  return <Chart options={options} series={series} type=\"bar\" height={80} />\r\n\r\n}\r\n\r\nexport default BarChart","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/TrendlineTd.js",["1344","1345","1346","1347"],"import React, {useState, useEffect} from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\nimport axiosInstance from '../../../../components/Utils/AxiosInstance'\r\n\r\nfunction TrendChartTD(props) {\r\n    const { clientID } = props\r\n    const [newData, setNewData] = useState({})\r\n    const [percentage, setPercentage ] = useState([])\r\n    const [grapglabels, setgrapglabels] = useState([]) \r\n    useEffect(() => {\r\n        let isCancelled = false;\r\n        function getData() {\r\n            axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_seven_day_audit_score/${clientID}/LAST30DAY`)\r\n                .then(res => storeData(res.data.data))\r\n                .catch(err => console.log(err))\r\n        }\r\n        getData()\r\n        return () => {\r\n            isCancelled = true;\r\n          };\r\n    }, [])\r\n    const storeData = (res) => {\r\n        console.log(\"pppppppppp\", res)\r\n        setNewData(res)\r\n        let percentArr = res && res.map(item => item['PERCENTAGE'])\r\n        setPercentage(percentArr)\r\n\r\n        let labelAr = res && res.map(item => item['AUDIT_DATE'])\r\n        setgrapglabels(labelAr)\r\n    }\r\n    console.log(grapglabels)\r\n    console.log(percentage)\r\n    const  data = {\r\n        labels : grapglabels,\r\n        datasets: [\r\n            {\r\n            label:'',\r\n            data:percentage,\r\n            backgroundColor:['rgb(247 247 246 / 0)'],\r\n            borderColor:['#2c18d4'],\r\n            borderWidth:['5'],\r\n            lineTension: 0.15,\r\n            borderCapStyle: 'butt',\r\n            pointRadius: 6,\r\n            pointBackgroundColor: '#480cc1',\r\n            borderJoinStyle: 'miter',\r\n            },\r\n\r\n          \r\n            \r\n        ],\r\n    }\r\n\r\n    const options ={\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales:{\r\n            xAxes : [{\r\n                gridLines : {\r\n                    display : false\r\n                },\r\n                ticks:{\r\n                    //display: false,\r\n                   // lineHeight:0,\r\n                    beginAtZero: true,\r\n                   // stepSize: 10\r\n                  }\r\n            }],\r\n\r\n            yAxes : [{\r\n                gridLines : {\r\n                //display : false\r\n                },\r\n                ticks:{\r\n                    //display: false,\r\n                    //lineHeight:0,\r\n                    beginAtZero: true,\r\n                    //stepSize: 10\r\n                  }\r\n            }]\r\n        }\r\n    }\r\n\r\n    return <Line data={data} options={options} height={100}/>\r\n}\r\n\r\nexport default TrendChartTD","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/linechart/linechart.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Heatmap_sec.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/TableSection.js",["1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport clsx from 'clsx'\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\n\r\n\r\n// components\r\nimport PageTitle from \"../../../../components/PageTitle/PageTitle\";\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\nimport { Typography } from \"../../../../components/Wrappers\";\r\nimport data from './datasource.js'\r\nimport QualityCell from './colors'\r\nimport useStyles from'./style.js'\r\n\r\n\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  overrides: {\r\n    MUIDataTableSelectCell: {\r\n      expandDisabled: {\r\n        // Soft hide the button.\r\n        visibility: 'hidden',\r\n      },\r\n      fixedLeft:{\r\n        display: 'none'\r\n      }\r\n    },\r\n\r\n    MuiTableCell: {\r\n      root:{\r\n        //  border: \"1px solid rgba(224, 224, 224, 1)\"\r\n      },\r\n\r\n      footer: {\r\n        color: \"#000\",\r\n        fontWeight: \"500\",\r\n        fontSize: \"16px\",\r\n        textAlign: \"center\",\r\n        lineHeight: \"1.5\",\r\n        borderTop: \"1px solid #000\",\r\n        border: \"none\",\r\n      },\r\n      body:{\r\n        textAlign:\"center\",\r\n        fontWeight:\"600\"\r\n      }\r\n    },\r\n\r\n    \r\n\r\n    MuiTableHead:{\r\n        root:{\r\n          // '&:nth-child(2)':{visibility:'hidden'},\r\n          // visibility:'hidden'\r\n        }\r\n    },\r\n\r\n    MUIDataTableBodyCell: {\r\n      \r\n      root: {\r\n        padding: \"1px\",\r\n        '& p':{ margin: \"0 !important\", padding: \"0%\", color: \"#fff\" , height:\"30px\" },\r\n        '&:nth-child(0)':{fontSize:\"14px\", fontWeight: \"bold\"},\r\n      },\r\n      \r\n    },\r\n    MUIDataTableToolbar: {\r\n\r\n    },\r\n    // handles table data header color\r\n    MUIDataTableHeadCell: {\r\n      root: {\r\n        '&:nth-child(1)':{background:\"#ccc\"},\r\n        '&:nth-child(2)':{width:\"60%\", visibility:'visible'},\r\n        '&:nth-child(3)':{width:\"10%\", textAlign:'center', fontWeight: \"bold\"},\r\n        '&:nth-child(4)':{width:\"10%\", textAlign:'center', fontWeight: \"bold\"},\r\n        '&:nth-child(5)':{width:\"10%\", textAlign:'center', fontWeight: \"bold\"},\r\n        border:'none',\r\n      },\r\n      // fixedHeader: {\r\n      //   backgroundColor: '#12ACC6',\r\n      // }\r\n    },\r\n    MUIDataTablePagination: {\r\n      root: {\r\n        backgroundColor: useStyles.tableFooter,\r\n        color: useStyles.textPrimary\r\n      }\r\n    },\r\n    // handles row hover color and selected row color\r\n    MuiTableRow: {\r\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\r\n      root: {\r\n        \r\n        '&$selected': {\r\n          backgroundColor: useStyles.tableRowSelectColor\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport default function Tables(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {clientID} = props;\r\n  const startDate = props.date;\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [indexData, setIndexData] = useState({})\r\n  const [open, setOpen] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n\r\n//table data binding\r\n  const [newData, setNewData] = useState([])\r\n  const [stickyFooter, setStickyFooter] = useState(true);\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    console.log(startDate)\r\n      // const getData =   () => {\r\n        \r\n        // const startdate = await localStorage.getItem('start_data' )\r\n        var d = new Date(startDate);\r\n        var Y = d.getFullYear();\r\n        var m = d.getMonth();\r\n        var d = d.getDate();\r\n       const start_date= Y+'-'+(m+1)+'-'+d\r\n       console.log(`api/Universal_Client_Dashboard.svc/get_question_wise_performance/${clientID}/${start_date}`)\r\n          axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_section_wise_performance/${clientID}/${start_date}`)\r\n              .then(res => storeData(res.data.data))\r\n              .catch(err => console.log(err))\r\n      // }\r\n\r\n      // getData()\r\n      // return () => {\r\n      //   isCancelled = true;\r\n      // };\r\n  }, [startDate])\r\n\r\n  const storeData = (res) => {\r\n    setNewData(res)\r\n   \r\n    console.log(res)\r\n}\r\n\r\n  \r\n  const columns = [\r\n  \r\n    {\r\n      name: \"SECTION\",\r\n      label: \"SECTION\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <div className={classes.textQuestion}>\r\n             {tableMeta.rowIndex+1}. <span >{value}</span>\r\n            </div>\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"SHIFT_1\",\r\n      label: \"SHIFT -1\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    {\r\n      name: \"SHIFT_2\",\r\n      label: \"SHIFT -2\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    \r\n    {\r\n      name: \"SHIFT_3\",\r\n      label: \"SHIFT -3\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    }\r\n  ]\r\n  const footerClasses = clsx({\r\n    [classes.footerCell]: true,\r\n    [classes.stickyFooterCell]: stickyFooter,\r\n  });\r\n  return (\r\n    <>\r\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\r\n        <Grid item xs={12}>\r\n          <MuiThemeProvider theme={theme}>\r\n            {newData ? <MUIDataTable\r\n              data={newData && newData}\r\n              columns={columns}\r\n              options={{\r\n                print:false,\r\n                selectableRows: 'none',\r\n                responsive: 'standard',\r\n                elevation:0,\r\n                rowsPerPage: 12,\r\n                download:false,\r\n                search:false,\r\n                filter:false,\r\n                expandableRows:true,\r\n                expandableRowsHeader: false,\r\n                expandableRowsOnClick: false,\r\n                pagination:false,\r\n                viewColumns:false,\r\n                tableBodyHeight: '',\r\n                tableBodyMaxHeight: \"\",\r\n                isRowExpandable: (dataIndex, expandedRows) => {\r\n                  \r\n                  \r\n                  // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\r\n                  if (expandedRows.data.length > 20 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false;\r\n                  return true;\r\n                },\r\n\r\n                renderExpandableRow: (rowData, rowMeta, rowIndex) => {\r\n                  const colSpan = rowData.length + 1;\r\n                  \r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell colSpan={colSpan}>\r\n                        {JSON.stringify(newData[rowMeta.dataIndex]['SECTION'])}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                },\r\n\r\n                // customTableBodyFooterRender: function(opts) {\r\n                //   console.dir(opts);\r\n                //   return (\r\n                //     <TableFooter className={classes.footerClasses}>\r\n                //       <TableRow>\r\n                //       <TableCell>\r\n                          \r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 1\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 2\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 3\r\n                //         </TableCell>\r\n                //       </TableRow>\r\n                //     </TableFooter>\r\n                //   );\r\n                // },\r\n                setTableProps: () => {\r\n                  return {\r\n                    padding: '0'\r\n                  }\r\n                },\r\n              }}\r\n            />\r\n            : (<Typography gutterBottom variant=\"subtitle1\">\r\n            <h5>Data Unavailable</h5>\r\n          </Typography>)}\r\n          </MuiThemeProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/Table.js",["1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport clsx from 'clsx'\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { subDays, addDays, format } from 'date-fns';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\n\r\n\r\n\r\n// components\r\nimport PageTitle from \"../../../../components/PageTitle/PageTitle\";\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\nimport { Typography } from \"../../../../components/Wrappers\";\r\nimport data from './datasource.js'\r\nimport QualityCell from './color'\r\nimport useStyles from './style.js'\r\n\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  overrides: {\r\n    MUIDataTableSelectCell: {\r\n      expandDisabled: {\r\n        // Soft hide the button.\r\n        visibility: 'hidden',\r\n      },\r\n      fixedLeft: {\r\n        display: 'none'\r\n      }\r\n    },\r\n\r\n    MuiTableCell: {\r\n      root: {\r\n        //  border: \"1px solid rgba(224, 224, 224, 1)\"\r\n      },\r\n\r\n      footer: {\r\n        color: \"#000\",\r\n        fontWeight: \"500\",\r\n        fontSize: \"16px\",\r\n        textAlign: \"center\",\r\n        lineHeight: \"1.5\",\r\n        borderTop: \"1px solid #000\",\r\n        border: \"none\",\r\n      },\r\n      body: {\r\n        textAlign: \"center\",\r\n        fontWeight: \"600\"\r\n      }\r\n    },\r\n\r\n\r\n\r\n    MuiTableHead: {\r\n      root: {\r\n        // '&:nth-child(2)':{visibility:'hidden'},\r\n        // visibility:'hidden'\r\n      }\r\n    },\r\n\r\n    MUIDataTableBodyCell: {\r\n\r\n      root: {\r\n        padding: \"2px 1px\",\r\n        '& p': { margin: \"0 !important\", padding: \"0%\", color: \"transparent\", fontSize: \"1px\", height: \"30px\" }\r\n      }\r\n    },\r\n    MUIDataTableToolbar: {\r\n\r\n    },\r\n    // handles table data header color\r\n    MUIDataTableHeadCell: {\r\n      root: {\r\n        '&:nth-child(1)': { background: \"#ccc\" },\r\n        '&:nth-child(2)': { width: \"60%\", visibility: 'visible' },\r\n        '&:nth-child(3)': { width: \"10%\", textAlign: 'center', fontWeight: \"bold\" },\r\n        '&:nth-child(4)': { width: \"10%\", textAlign: 'center', fontWeight: \"bold\" },\r\n        '&:nth-child(5)': { width: \"10%\", textAlign: 'center', fontWeight: \"bold\" },\r\n        border: 'none',\r\n      },\r\n      // fixedHeader: {\r\n      //   backgroundColor: '#12ACC6',\r\n      // }\r\n    },\r\n    MUIDataTablePagination: {\r\n      root: {\r\n        backgroundColor: useStyles.tableFooter,\r\n        color: useStyles.textPrimary\r\n      }\r\n    },\r\n    // handles row hover color and selected row color\r\n    MuiTableRow: {\r\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\r\n      root: {\r\n\r\n        '&$selected': {\r\n          backgroundColor: useStyles.tableRowSelectColor\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport default function Tables(props) {\r\n\r\n\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { clientID } = props;\r\n  const startDate = props.date;\r\n\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [indexData, setIndexData] = useState({})\r\n  const [open, setOpen] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n\r\n  //table data binding\r\n  const [newData, setNewData] = useState([])\r\n  const [stickyFooter, setStickyFooter] = useState(true);\r\n  useEffect(() => {\r\n    console.log(startDate)\r\n    var d = new Date(startDate);\r\n    var Y = d.getFullYear();\r\n    var m = d.getMonth();\r\n    var d = d.getDate();\r\n    const start_date = Y + '-' + (m + 1) + '-' + d\r\n    console.log(`api/Universal_Client_Dashboard.svc/get_question_wise_performance/${clientID}/${start_date}`)\r\n    axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_question_wise_performance/${clientID}/${start_date}`)\r\n      .then(res => storeData(res.data.data))\r\n      .catch(err => console.log(err))\r\n\r\n  }, [startDate])\r\n\r\n  const storeData = (res) => {\r\n    setNewData(res)\r\n\r\n    console.log(res)\r\n  }\r\n\r\n\r\n  const columns = [\r\n\r\n    {\r\n      name: \"QUESTION_TEXT\",\r\n      label: \"QUESTION\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <div className={classes.textQuestion}>\r\n              {tableMeta.rowIndex + 1}. <span >{value}</span>\r\n            </div>\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"SHIFT_1\",\r\n      label: \"SHIFT -1\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    {\r\n      name: \"SHIFT_2\",\r\n      label: \"SHIFT -2\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"SHIFT_3\",\r\n      label: \"SHIFT -3\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    }\r\n  ]\r\n  const footerClasses = clsx({\r\n    [classes.footerCell]: true,\r\n    [classes.stickyFooterCell]: stickyFooter,\r\n  });\r\n  return (\r\n    <>\r\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\r\n        <Grid item xs={12}>\r\n          <MuiThemeProvider theme={theme}>\r\n            {newData ? <MUIDataTable\r\n              data={newData && newData}\r\n              columns={columns}\r\n              options={{\r\n                print: false,\r\n                selectableRows: 'none',\r\n                responsive: 'standard',\r\n                elevation: 0,\r\n                rowsPerPage: 12,\r\n                download: false,\r\n                search: false,\r\n                filter: false,\r\n                expandableRows: true,\r\n                expandableRowsHeader: false,\r\n                expandableRowsOnClick: false,\r\n                pagination: false,\r\n                viewColumns: false,\r\n                tableBodyHeight: '',\r\n                tableBodyMaxHeight: \"\",\r\n                isRowExpandable: (dataIndex, expandedRows) => {\r\n\r\n\r\n                  // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\r\n                  if (expandedRows.data.length > 20 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false;\r\n                  return true;\r\n                },\r\n\r\n                renderExpandableRow: (rowData, rowMeta, rowIndex) => {\r\n                  const colSpan = rowData.length + 1;\r\n\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell colSpan={colSpan}>\r\n                        Question : {JSON.stringify(newData[rowMeta.dataIndex]['QUESTION_TEXT'])}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                },\r\n\r\n                // customTableBodyFooterRender: function(opts) {\r\n                //   console.dir(opts);\r\n                //   return (\r\n                //     <TableFooter className={classes.footerClasses}>\r\n                //       <TableRow>\r\n                //       <TableCell>\r\n\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 1\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 2\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 3\r\n                //         </TableCell>\r\n                //       </TableRow>\r\n                //     </TableFooter>\r\n                //   );\r\n                // },\r\n                setTableProps: () => {\r\n                  return {\r\n                    padding: '0'\r\n                  }\r\n                },\r\n              }}\r\n            />\r\n              : (<Typography gutterBottom variant=\"subtitle1\">\r\n                <h5>Data Unavailable</h5>\r\n              </Typography>)}\r\n          </MuiThemeProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/Table.js",["1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\";\nimport axiosInstance from \"../../../../../../components/Utils/AxiosInstance\";\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: useStyles.tableRowSelectColor\n                }\n            }\n        },\n    },\n})\n\nexport default function Tables(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [indexData, setIndexData] = useState({})\n    const [data, setData] = useState([])\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [sectionID, setSectionID] = useState('')\n\n    const columns = [\n        {\n            name: \"\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\">\n                            {/* {tableMeta.rowIndex === rowIndex\n                                ? <div style={{ display: \"flex\" }}>\n                                    <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                                    <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                                </div>\n                                :  */}\n                                <EditRoundedIcon onClick={() => {\n                                    return (\n                                        handleEdit(tableMeta, tableMeta.rowIndex)\n                                    )\n                                }} />\n                                {/* } */}\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n                            <DeleteRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"START_TIME\",\n            label: \"Shift Start Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"END_TIME\",\n            label: \"Shift End Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"CHECK_LIST_NAME\",\n            label: \"Checklist Name\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n    ]\n    // const handleUpdateEdit = (tableMeta, rowIndex) => {\n    //     console.log(tableMeta.rowData)\n    //     console.log(tableMeta)\n    //     let updatedata = tableMeta.rowData\n    //     let newDataArr = updatedata.filter((item, index) => index > 0 && index < updatedata.length - 1)\n    //     console.log(newDataArr)\n\n    //     let obj = {\n    //         \"SITE_GUID\": props.siteID,\n    //         \"CHECKLIST_ID\": \"972C455C-874C-4864-98AD-A4BE529EE1C9\",\n    //         \"START_TIME\": \"09:00:00\",\n    //         \"END_TIME\": \"10:00:00\",\n    //         \"AUDIT_CLOSE_FLAG\": \"0\",\n    //         \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n    //         \"SHIFT_ID\": \"514F3FA3-3DBF-4966-A422-3A88FA5FC93C\"\n    //     }\n\n    //     // axiosInstance.post('api/Section_Sub_Section.svc/update_question_section', obj)\n    //     axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/update_shift_timing', obj)\n    //         .then(res => getUpdatedData())\n    //         .catch(err => console.log(err))\n    // }\n\n\n    // const getUpdatedData = () => {\n    //     setRowIndex()\n    //     // axiosInstance.get(`api/Audit_Time_Slots.svc/get_audit_slots/${props.siteID}`)\n    //     axios.get(`http://betaapp.hygienequotient.com/api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n    //         .then(res => setData([...res.data.data]))\n    //         .then(props.changeSaveOpen)\n    //         .catch(err => console.log(err))\n\n    // }\n\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        props.activeEdit(tableMeta.tableData[rowIndex])\n    }\n\n    const handleCancel = () => {\n        setRowIndex()\n    }\n    const handleDelete = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        let selectedShiftID = tableMeta.tableData[rowIndex]['SHIFT_ID']\n        console.log(selectedShiftID)\n        let shift = \n            {\n                \"SHIFT_ID\": selectedShiftID\n            }\n        axiosInstance.post(`api/Shift_Timing.svc/delete_shift_timing`, shift)\n        // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/delete_shift_timing', shift)\n            .then(res => {\n                alert(res.data.response[0]['MESSAGE'])\n                \n            })\n            .then(props.reloadTable)\n            .catch(err => console.log(err))\n    }\n    const handleCloseAddButton = () => {\n        setOpenAdd(false)\n    }\n    const handleClose = () => {\n        setOpen(false)\n    }\n    console.log(indexData)\n    console.log(props.data)\n    console.log(props)\n    return (\n        <>\n\n\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title=\"Audit Slots\"\n                    data={props.saveOpen ? props.data ? props.data : 'isLoading...' : data}\n                    columns={columns}\n                    options={{\n                        filter: true,\n                        selectableRows: 'none',\n                        filterType: 'dropdown',\n                        responsive: 'standard',\n                        rowsPerPage: 5,\n                        download: true,\n                        downloadOptions: {\n                            filename: 'tableDownload.csv',\n                            separator: ',',\n                            filterOptions: {\n                                useDisplayedColumnsOnly: true || false,\n                                useDisplayedRowsOnly: true || true\n                            } || false\n                        },\n\n                        tableBodyHeight: '',\n                        tableBodyMaxHeight: \"\",\n                        setTableProps: () => {\n                            return {\n                                padding: 'default'\n                            }\n                        },\n                    }}\n                />\n            </MuiThemeProvider>\n\n            {/* <EditForm open={open} data={indexData} close={handleClose} />\n        <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n            {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/Table.js",["1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429"],"import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport axiosInstance from \"../../../../../../../components/Utils/AxiosInstance\";\n\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: useStyles.tableRowSelectColor\n                }\n            }\n        },\n    },\n})\n\nexport default function Tables(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [indexData, setIndexData] = useState({})\n    const [data, setData] = useState([])\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [sectionID, setSectionID] = useState('')\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\">\n                            {tableMeta.rowIndex === rowIndex\n                                ? <div style={{ display: \"flex\" }}>\n                                    <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                                    <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                                </div>\n                                : <EditRoundedIcon onClick={() => {\n                                    return (\n                                        handleEdit(tableMeta, tableMeta.rowIndex)\n                                    )\n                                }} />}\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"START_TIME\",\n            label: \"Shift Start Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"END_TIME\",\n            label: \"Shift End Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"AUDIT_CLOSE_FLAG\",\n            label: \"Audit Close Flag\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : value === \"0\" ? <div>No</div> : value === \"1\" ? <div>Yes</div> : \"\"\n                )\n            }\n        },\n        {\n            name: \"CHECK_LIST_NAME\",\n            label: \"Checklist Name\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"DELETE\",\n            label: \"Delete\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n                            <DeleteRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n    ]\n    const handleUpdateEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.rowData)\n        console.log(tableMeta)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 0 && index < updatedata.length - 1)\n        console.log(newDataArr)\n\n        let obj = {\n            // \"SECTIONS_ID\": sectionID,\n            // \"SECTION\": newDataArr[0],\n            // \"POSITION\": newDataArr[1],\n        }\n        // axiosInstance.post('api/Section_Sub_Section.svc/update_question_section', obj)\n        //     .then(res => getUpdatedData())\n        //     .catch(err => console.log(err))\n    }\n\n\n    const getUpdatedData = () => {\n        setRowIndex()\n        axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n            .then(res => setData([...res.data.data]))\n            .then(props.changeSaveOpen)\n            .catch(err => console.log(err))\n    }\n\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        props.activeEdit(tableMeta.tableData[rowIndex])\n        //     setSectionID(tableMeta.tableData[rowIndex]['SECTIONS_ID'])\n        // setRowIndex(rowIndex)\n\n    }\n    const handleCancel = () => {\n        setRowIndex()\n    }\n    const handleDelete = (tableMeta, rowIndex) => {\n        const shiftID = {\n            'SHIFT_ID': tableMeta.tableData[rowIndex]['SHIFT_ID']\n        }\n        axiosInstance.post('api/Shift_Timing.svc/delete_shift_timing', shiftID)\n            .then(res => console.log(res))\n            .then(props.reloadTable)\n            .catch(err => console.log(err))\n    }\n    const handleCloseAddButton = () => {\n        setOpenAdd(false)\n    }\n    const handleClose = () => {\n        setOpen(false)\n    }\n    console.log(indexData)\n    console.log(props.data)\n    console.log(props)\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title=\"Audit Slots\"\n                    data={props.saveOpen ? props.data ? props.data : 'isLoading...' : data}\n                    columns={columns}\n                    options={{\n                        filter: true,\n                        selectableRows: 'none',\n                        filterType: 'dropdown',\n                        responsive: 'standard',\n                        rowsPerPage: 10,\n                        download: true,\n                        downloadOptions: {\n                            filename: 'tableDownload.csv',\n                            separator: ',',\n                            filterOptions: {\n                                useDisplayedColumnsOnly: true || false,\n                                useDisplayedRowsOnly: true || true\n                            } || false\n                        },\n                        tableBodyHeight: '310px',\n                        tableBodyMaxHeight: \"\",\n                        setTableProps: () => {\n                            return {\n                                padding: 'default'\n                            }\n                        },\n                    }}\n                />\n            </MuiThemeProvider>\n\n            {/* <EditForm open={open} data={indexData} close={handleClose} />\n        <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n            {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditSite/EditTimeSlot.js",["1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Button, Grid, Paper } from \"@material-ui/core\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Save } from '@material-ui/icons';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport axios from 'axios'\nimport axiosInstance from \"../../../../../../../components/Utils/AxiosInstance\";\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\n// const useStyles = makeStyles((theme) => ({\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }));\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function EditTimeSlot(props) {\n    const classes = useStyles();\n    const { editData } = props\n    const [updatedData, setUpdatedData] = useState({\n            start: editData['start'],\n            end: editData['end'],\n            flag: editData['flag'],\n            checklistName: editData['checklistName'],\n            \n    })    \n    console.log(updatedData)\n    console.log(props.checkListArr)\n    const handleChangeEdit = (input) => ({ target: { value } }) => {\n        console.log({ [input]: value });\n        setUpdatedData({\n            ...updatedData,\n            [input]: value\n        })\n    };\n    const handleSaveEdit = () => {\n        console.log(updatedData)\n        console.log(props.checkListArr)\n        const obj ={\n            \"SITE_GUID\":editData.siteID,\n            \"CHECKLIST_ID\":props.checkListArr.filter(item => item['CHECK_LIST_NAME'] === updatedData['checklistName'])[0]['CHECK_LIST_ID'],\n            \"START_TIME\":updatedData['start'].includes('PM') || updatedData['start'].includes('AM') ? handleTimeFormat(updatedData['start']) : updatedData['start'],\n            \"END_TIME\": updatedData['end'].includes('PM') || updatedData['end'].includes('AM') ? handleTimeFormat(updatedData['end']) : updatedData['end'],\n            \"AUDIT_CLOSE_FLAG\":updatedData['flag'] === \"Yes\" ? \"1\" : updatedData['flag'] === \"No\" ? \"0\" : \"\",\n            \"CREATED_BY\":localStorage.getItem('client_userID'),\n            \"SHIFT_ID\":editData.shiftID\n        }\n        // const obj = {\n        //     \"START_TIME\": updatedData['start'].includes('PM') || updatedData['start'].includes('AM') ? handleTimeFormat(updatedData['start']) : updatedData['start'],\n        //     \"END_TIME\": updatedData['end'].includes('PM') || updatedData['end'].includes('AM') ? handleTimeFormat(updatedData['end']) : updatedData['end'],\n        //     \"AUDIT_CLOSE_FLAG\": updatedData['flag'] === \"Yes\" ? \"1\" : updatedData['flag'] === \"No\" ? \"0\" : \"\",\n        //     \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === updatedData['checklistName'])[0]['CHECK_LIST_ID'],\n        //     \"LASTUPDATED_BY\": localStorage.getItem('client_userID')\n        // }\n        console.log(obj)\n        axiosInstance.post('api/Shift_Timing.svc/update_shift_timing', obj)\n            .then(res => {\n                if(res.data.data[0]['CODE'] === \"200\"){\n                    alert(res.data.data[0]['MESSAGE'])\n                    props.reloadTable()\n                }else{\n                    alert(res.data.data[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    const handleTimeFormat = (time) => {\n        var pmCheck = time.includes(\"PM\");\n        var hrs = parseInt(time.split(\":\")[0]);\n        var newtime = '';\n        // this is for between  12 AM to 12:59AM  = 00:00\n        if (hrs == 12 && pmCheck == false) {\n            newtime = \"00\" + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between  12 PM to 12:59 =12:00\n        else if (hrs == 12 && pmCheck == true) {\n            newtime = \"12\" + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        //this is for between 1 AM and 9:59 AM\n        else if (!pmCheck && hrs < 10) {\n\n            newtime = \"0\" + hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 10:00 AM and 11:59 AM\n        else if (!pmCheck && hrs >= 10) {\n\n            newtime = hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 1 PM and 11:59 PM\n        else if (pmCheck) {\n            newtime = (hrs + 12) + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        console.log(time, \": \", newtime)\n        return newtime\n    }\n    return (\n        <>\n            {/* <div className={classes.paper}>\n                <Formik\n                    initialValues={updatedData}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n                        setSubmitting(true);\n                        // const obj = {\n                        //     \"TIMING_ID\": values.timingID,\n                        //     \"TIME\": updatedData['start'].includes('PM') || updatedData['start'].includes('AM') ? handleTimeFormat(updatedData['start']) : updatedData['start'],\n                        //     \"END_TIME\": updatedData['end'].includes('PM') || updatedData['end'].includes('AM') ? handleTimeFormat(updatedData['end']) : updatedData['end'],\n                        //     \"AUDIT_CLOSE_FLAG\": updatedData['flag'] === \"Yes\" ? \"1\" : updatedData['flag'] === \"No\" ? \"0\" : \"\",\n                        //     \"CHECKLIST_ID\": checkListArr.filter(item => item.text === updatedData['checklistName'])[0]['id'],\n                        //     \"LASTUPDATED_BY\": localStorage.getItem('client_userID')\n                        // }\n                        // console.log(obj)\n                        // axiosInstance.post('api/Audit_Time_Slots.svc/update_audit_time_slots', obj)\n                        //     .then(res => console.log(res))\n                        //     .then(props.reloadTable)\n                        //     .catch(err => console.log(err))\n                       \n                    }}\n\n                    validationSchema={Yup.object().shape({\n\n                        start: Yup.string()\n                            .required('Required'),\n                        end: Yup.string()\n                            .required('Required'),\n                        flag: Yup.string()\n                            .required('Required'),\n                        checklistName: Yup.string()\n                            .required('Required'),\n                    })}\n                >\n                    {({\n                        values,\n                        touched,\n                        errors,\n                        dirty,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleReset,\n                    }) =>\n                    (\n                        <Form className={classes.form}>\n                            <Grid container spacing={2}>\n\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        error={errors.start && touched.start}\n                                        autoComplete=\"start\"\n                                        id=\"start\"\n                                        label='Start Time'\n                                        type=\"time\"\n                                        name=\"start\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        value={handleTimeFormat(values['start'])}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        required\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        inputProps={{\n                                            style: {\n                                                paddingRight: 2\n                                            }\n                                        }}\n                                        helperText={\n                                            errors.start && touched.start\n                                                ? errors.start\n                                                : null\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        error={errors.end && touched.end}\n                                        autoComplete=\"end\"\n                                        id=\"end\"\n                                        label=\"End Time\"\n                                        type=\"time\"\n                                        name=\"end\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        value={handleTimeFormat(values['end'])}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        required\n                                        InputLabelProps={{\n                                            shrink: true,\n\n                                        }}\n                                        inputProps={{\n                                            style: {\n                                                paddingRight: 2\n                                            }\n                                        }}\n                                        helperText={\n                                            errors.end && touched.end\n                                                ? errors.end\n                                                : null\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item xs={12} >\n                                    <TextField\n                                        error={errors.flag && touched.flag}\n                                        id=\"flag\"\n                                        select\n                                        label=\"Audit Close Flag\"\n                                        variant=\"outlined\"\n                                        className={classes.textField}\n                                        value={values['flag'] }\n                                        onChange={handleChange(\"flag\")}\n                                        fullWidth\n                                        required\n                                        helperText={\n                                            errors.flag && touched.flag\n                                                ? errors.flag\n                                                : null\n                                        }\n                                    >\n                                        <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem>\n                                        <MenuItem value=\"Yes\">Yes</MenuItem>\n                                        <MenuItem value=\"No\">No</MenuItem>\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={12} >\n                                    <TextField\n                                        error={errors.checklistName && touched.checklistName}\n                                        id=\"checklistName\"\n                                        select\n                                        label=\"Checklist Name\"\n                                        variant=\"outlined\"\n                                        className={classes.textField}\n                                        value={values['checklistName']}\n                                        onChange={handleChange(\"checklistName\")}\n                                        fullWidth\n                                        required\n                                        helperText={\n                                            errors.checklistName && touched.checklistName\n                                                ? errors.checklistName\n                                                : null\n                                        }\n                                    >\n                                        <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem>\n                                        {checkListArr && checkListArr.map(item => (\n                                            <MenuItem key={item.text} value={item.text}>{item.text}</MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                            <DialogActions>\n                                <Button\n                                    type=\"button\"\n                                    className=\"outline\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className={classes.submit}\n                                    onClick={handleReset}\n                                    disabled={!dirty || isSubmitting}\n                                >\n                                    Reset\n                                </Button>\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className={classes.submit}\n                                    disabled={isSubmitting}>\n                                    Submit\n                                </Button>\n                            </DialogActions>\n                        </Form>\n                    )\n                    }\n                </Formik>\n            </div> */}\n            <div className={classes.paper}>\n                <div className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoFocus\n                                margin=\"normal\"\n                                id=\"startTime1\"\n                                label=\"Start Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['start'] ? handleTimeFormat(updatedData['start']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"start\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                margin=\"normal\"\n                                id=\"endTime1\"\n                                label=\"End Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['end'] ? handleTimeFormat(updatedData['end']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"end\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select1\"\n                                label=\"Audit Close Flag\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['flag'] ? updatedData['flag'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"flag\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                <MenuItem value=\"Yes\">Yes</MenuItem>\n                                <MenuItem value=\"No\">No</MenuItem>\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select2\"\n                                label=\"Checklist Name\"\n                                margin=\"normal\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['checklistName'] ? updatedData['checklistName'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"checklistName\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                {props.checkListArr && props.checkListArr.map(item => (\n                                    <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <DialogActions>\n                                <Button variant=\"contained\" onClick={props.cancel} color=\"primary\">\n                                    Cancel\n                            </Button>\n                                <Button variant=\"contained\" onClick={handleSaveEdit} color=\"primary\" startIcon={<Save />}>\n                                    Save\n                            </Button>\n                            </DialogActions>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </>\n    );\n}",["1444","1445"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/BigStat/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/dashboard/components/Tickets/Title.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Sidebar/components/SidebarLink/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/UserAvatar/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Notification/styles.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/style.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/datasource.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/colors.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/color.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/Pricing.js",["1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Typography,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n  Label\r\n} from \"recharts\";\r\nimport './priceplans.css'\r\n\r\nexport default function Pricing() {\r\n  const theme = useTheme();\r\n  const history = useHistory();\r\n\r\n  const handlePlan = (plan, price) => {\r\n    if(plan === \"FREE\"){\r\n      let path = `/app/onboarding`\r\n      history.push(path)\r\n    }else {\r\n      let req = {\r\n        \"PLAN_ID\":\"6517B469-DFF1-4D17-BAF4-11D44C9E91C5\",\r\n        \"CLIENT_ID\":localStorage.getItem('client_ID'),\r\n        \"PRICE\":price,\r\n        \"EMAIL\":localStorage.getItem('client_email'),\r\n        \"NAME\":localStorage.getItem('client_name'),\r\n        \"MOBILE\":localStorage.getItem('client_mobile'),\r\n        \"PAYMENT_MODE\":\"Monthly\"\r\n      }\r\n      // axiosInstance.post('api/Plan_Purchase.svc/generate_order_id', req)\r\n      //   .then(res => {\r\n\r\n      //   })\r\n      console.log(req)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n          <h2 style={{ fontSize: \"30px\" }}>Pricing and Plans</h2>\r\n        </Grid>\r\n        <Grid item container md={3}>\r\n          <Card className=\"price_plans\" style={{ borderRadius: \"10px\" }}>\r\n            <CardContent className=\"free\">\r\n              <h2 style={{ textAlign: \"center\", fontSize: \"33px\", color: \"rgb(154 164 170)\" }}>Free</h2>\r\n              <h4 className=\"pt-3 text-center\"> <i className=\"fa fa-inr\" aria-hidden=\"true\"></i>0/- <span style={{ textAlign: \"center\", fontSize: \"13px\", color: \"rgb(154 164 170)\" }}>month</span> </h4>\r\n              <hr className=\"PricHR\" />\r\n              <div className=\"pricing_list\">\r\n                <ul>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  3 images per day</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  One user for site</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Smart Scoring</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  One checklist for one shift</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Instant report generation</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Cloud storage 3 day</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Online mode</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  2 Reports</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Dashboard access</li>\r\n                  {/* <li>&nbsp;</li> */}\r\n                </ul>\r\n              </div>\r\n              <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{ borderRadius: \"20px\", width: \"120px\", background: \"rgb(150 162 172)\" }}\r\n                  onClick={()=> handlePlan('FREE', 0)}\r\n                  >\r\n                  Select\r\n                </Button>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item container md={3}>\r\n          <Card className=\"price_plans\" style={{ borderRadius: \"10px\" }}>\r\n            <CardContent className=\"basic\">\r\n              <h2 style={{ textAlign: \"center\", fontSize: \"33px\" }}>Basic</h2>\r\n              <h4 className=\"pt-3 text-center\"> <i className=\"fa fa-inr\" aria-hidden=\"true\"></i>\r\n          5,000/- <span style={{ textAlign: \"center\", fontSize: \"13px\" }}>month (+ GST)</span> </h4>\r\n              <hr className=\"PricHR\" />\r\n              <div className=\"pricing_list\">\r\n                <ul>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>   30 Images (Per Day)</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited users per site</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited checklist for unlimited shifts</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Instant Report Generation</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Smart Scoring</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  30 days Cloud Storage</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Online/Offline Mode</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited Reports</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Dashboard Access</li>\r\n\r\n                </ul>\r\n              </div>\r\n\r\n              <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{ borderRadius: \"20px\", width: \"120px\", background: \"#1976d2\" }}\r\n                  onClick={()=> handlePlan('BASIC', 5000)}\r\n                >\r\n                  Select\r\n                </Button>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item container md={3}>\r\n          <Card className=\"price_plans\" style={{ borderRadius: \"10px\" }}>\r\n            <CardContent className=\"pro\">\r\n              <h2 style={{ textAlign: \"center\", fontSize: \"33px\" }}>Pro</h2>\r\n              <h4 className=\"pt-3 text-center\"> <i className=\"fa fa-inr\" aria-hidden=\"true\"></i>\r\n          6,500/- <span style={{ textAlign: \"center\", fontSize: \"13px\" }}>month (+ GST)</span> </h4>\r\n              <hr className=\"PricHR\" />\r\n              <div className=\"pricing_list\">\r\n                <ul>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  60 Images (Per Day)</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited users per site</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited checklist for unlimited shifts</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Instant Report Generation</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Smart Scoring</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  30 days Cloud Storage</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Online/Offline Mode</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited Reports</li>\r\n                  <li> <i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Dashboard Access</li>\r\n                </ul>\r\n              </div>\r\n\r\n              <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{ borderRadius: \"20px\", width: \"120px\", background: \"#689f38\" }}\r\n                  onClick={()=> handlePlan('PRO', 6500)}\r\n                >\r\n                  Select\r\n                </Button>\r\n              </Grid>\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n\r\n\r\n        <Grid item container md={3}>\r\n          <Card className=\"price_plans\" style={{ borderRadius: \"10px\" }}>\r\n            <CardContent className=\"business\">\r\n              <h2 style={{ textAlign: \"center\", fontSize: \"33px\" }}>BUSINESS</h2>\r\n              <h4 className=\"pt-3 text-center\"> <i className=\"fa fa-inr\" aria-hidden=\"true\"></i>\r\n          8,000/- <span style={{ textAlign: \"center\", fontSize: \"13px\" }}>month (+ GST)</span> </h4>\r\n              <hr className=\"PricHR\" />\r\n              <div className=\"pricing_list\">\r\n                <ul>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>   100 Images (Per Day)</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited users per site</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited checklist for unlimited shifts</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Instant Report Generation</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Smart Scoring</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  30 days Cloud Storage</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Online/Offline Mode</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Unlimited Reports</li>\r\n                  <li><i className=\"fa fa-check\" aria-hidden=\"true\"></i>  Dashboard Access</li>\r\n                </ul>\r\n              </div>\r\n\r\n              <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{ borderRadius: \"20px\", width: \"120px\", background: \"#e29d02\" }}\r\n                  onClick={()=> handlePlan('BUSINESS', 8000)}\r\n                >\r\n                  Select\r\n                </Button>\r\n              </Grid>\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n}\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/ModalAlert/NotifyAlert.js",["1467"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\n//fontawesome\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function NotifyAlert(props) {\n\n    return (\n\n        <Dialog\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={props.close}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle id=\"alert-dialog-slide-title\"></DialogTitle>\n            <DialogContent style={{textAlign:\"center\"}}>\n                <FontAwesomeIcon icon={faCheckCircle} size=\"3x\" color=\"green\"/>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    {/* <h2>Awesome!</h2> */}\n                    {props.message}\n                </DialogContentText>\n                <Button onClick={props.close} color=\"primary\">\n                    Ok\n                </Button>\n            </DialogContent>\n            {/* <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Disagree\n                </Button>\n                <Button onClick={handleClose} color=\"primary\">\n                    Agree\n          </Button>\n            </DialogActions> */}\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/BarchatComp.js",["1468","1469","1470","1471","1472"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    BarChart, Bar, Brush, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList, ReferenceLine, ResponsiveContainer\r\n} from 'recharts';\r\nimport axios from 'axios'\r\nimport axiosInstance from '../../../components/Utils/AxiosInstance'\r\n\r\nconst CustomizedAxisTick = props => (\r\n    <g transform={\"translate( \" + props.x + \",\" + props.y + \" )\"}>\r\n        <text x={60} y={10} fontFamily=\"Roboto\" fontSize=\"10px\" textAnchor=\"end\" fill={props.color || \"#8884d8\"} transform={\"rotate(\" + props.angle + \")\"} >\r\n            {props.payload.value}\r\n        </text>\r\n    </g>\r\n)\r\n\r\nfunction BarChartComp(props) {\r\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/q4eonc12/';\r\n\r\n    const { clientID } = props\r\n    const { days } = props\r\n    const [newData, setNewData] = useState({})\r\n    const [percentage, setPercentage] = useState([])\r\n    const [grapglabels, setgrapglabels] = useState([])\r\n    useEffect(() => {\r\n        function getData() {\r\n\r\n            axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_seven_day_audit_score/${clientID}/${days}`)\r\n                .then(res => storeData(res.data.data))\r\n                .catch(err => console.log(err))\r\n        }\r\n        getData()\r\n\r\n    }, [days])\r\n    const storeData = (res) => {\r\n        setNewData(res)\r\n        console.log(res)\r\n        let percentArr = res && res.map(item => item['PERCENTAGE'])\r\n        setPercentage(percentArr)\r\n\r\n        let labelAr = res && res.map(item => item['AUDIT_DATE'])\r\n        setgrapglabels(labelAr)\r\n    }\r\n\r\n    const tooltipText = (value, name) => {\r\n        console.log(value, name)\r\n        return [value, \"QC Pending Time\"]\r\n    }\r\n\r\n    const legendText = (value) => {\r\n        return <span>QC Pending Time</span>\r\n    }\r\n\r\n\r\n    console.log(newData)\r\n    return (\r\n<>\r\n        <ResponsiveContainer width=\"95%\" height=\"95%\">\r\n           \r\n            <BarChart\r\n                data={newData && newData}\r\n                margin={{\r\n                    top: 10\r\n                }}\r\n                barSize={30}\r\n                barGap={2}\r\n            >\r\n                <XAxis dataKey=\"AUDIT_DATE\" scale=\"point\" padding={{ left: 10, right: 10 }} interval={0} angle={90} tick={<CustomizedAxisTick />} />\r\n                <YAxis type=\"number\" domain={[0, 1500]} label={{ value: 'Time (in Sec)', angle: -90, position: 'insideLeft', textAnchor: 'middle' }} />\r\n                <Tooltip formatter={tooltipText} />\r\n                <Legend verticalAlign=\"bottom\" wrapperStyle={{ paddingTop: \"50px\" }} formatter={legendText} />\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <ReferenceLine y={35} stroke=\"#e8ab1a\" strokeDasharray=\"3 3\" />\r\n                <Bar dataKey=\"PERCENTAGE\" fill=\"#5269eb\" background={{ fill: 'white' }}>\r\n                    <LabelList dataKey=\"PERCENTAGE\" position=\"top\" />\r\n                </Bar>\r\n                {/* <Brush dataKey=\"CREATED_ON\" height={20} stroke=\"#8884d8\" y={380}/> */}\r\n            </BarChart>\r\n        </ResponsiveContainer></>\r\n    );\r\n}\r\n\r\nexport default BarChartComp","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/SiteDashboard/components/Table/TableS6.js",["1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport clsx from 'clsx'\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\n\r\n\r\n// components\r\nimport PageTitle from \"../../../../components/PageTitle/PageTitle\";\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\nimport { Typography } from \"../../../../components/Wrappers\";\r\nimport data from './datasource.js'\r\nimport QualityCell from './colors'\r\nimport useStyles from'./style.js'\r\n\r\n\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  overrides: {\r\n    MUIDataTableSelectCell: {\r\n      expandDisabled: {\r\n        // Soft hide the button.\r\n        visibility: 'hidden',\r\n      },\r\n      fixedLeft:{\r\n        display: 'none'\r\n      }\r\n    },\r\n\r\n    MuiTableCell: {\r\n      root:{\r\n        //  border: \"1px solid rgba(224, 224, 224, 1)\"\r\n      },\r\n\r\n      footer: {\r\n        color: \"#000\",\r\n        fontWeight: \"500\",\r\n        fontSize: \"16px\",\r\n        textAlign: \"center\",\r\n        lineHeight: \"1.5\",\r\n        borderTop: \"1px solid #000\",\r\n        border: \"none\",\r\n      },\r\n      body:{\r\n        textAlign:\"center\",\r\n        fontWeight:\"600\"\r\n      }\r\n    },\r\n\r\n    \r\n\r\n    MuiTableHead:{\r\n        root:{\r\n          // '&:nth-child(2)':{visibility:'hidden'},\r\n          // visibility:'hidden'\r\n        }\r\n    },\r\n\r\n    MUIDataTableBodyCell: {\r\n      \r\n      root: {\r\n        padding: \"1px\",\r\n        '& p':{ margin: \"0 !important\", padding: \"0%\", color: \"#fff\" , height:\"30px\" },\r\n        '&:nth-child(0)':{fontSize:\"14px\", fontWeight: \"bold\"},\r\n      },\r\n      \r\n    },\r\n    MUIDataTableToolbar: {\r\n\r\n    },\r\n    // handles table data header color\r\n    MUIDataTableHeadCell: {\r\n      root: {\r\n        '&:nth-child(1)':{background:\"#ccc\"},\r\n        '&:nth-child(2)':{width:\"20%\", visibility:'visible'},\r\n       \r\n        border:'none',\r\n      },\r\n      // fixedHeader: {\r\n      //   backgroundColor: '#12ACC6',\r\n      // }\r\n    },\r\n    MUIDataTablePagination: {\r\n      root: {\r\n        backgroundColor: useStyles.tableFooter,\r\n        color: useStyles.textPrimary\r\n      }\r\n    },\r\n    // handles row hover color and selected row color\r\n    MuiTableRow: {\r\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\r\n      root: {\r\n        \r\n        '&$selected': {\r\n          backgroundColor: useStyles.tableRowSelectColor\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport default function TableS6(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {clientID} = props;\r\n  const startDate = props.date;\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [indexData, setIndexData] = useState({})\r\n  const [open, setOpen] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n\r\n//table data binding\r\n  const [newData, setNewData] = useState([])\r\n  const [stickyFooter, setStickyFooter] = useState(true);\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    console.log(startDate)\r\n      // const getData =   () => {\r\n        \r\n        // const startdate = await localStorage.getItem('start_data' )\r\n        var d = new Date(startDate);\r\n        var Y = d.getFullYear();\r\n        var m = d.getMonth();\r\n        var d = d.getDate();\r\n       const start_date= Y+'-'+(m+1)+'-'+d\r\n       console.log(`api/Universal_Client_Dashboard.svc/get_question_wise_performance/${clientID}/${start_date}`)\r\n          axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_section_wise_s6_report/${clientID}`)\r\n              .then(res => storeData(res.data.data))\r\n              .catch(err => console.log(err))\r\n      // }\r\n\r\n      // getData()\r\n      // return () => {\r\n      //   isCancelled = true;\r\n      // };\r\n  }, [startDate])\r\n\r\n  const storeData = (res) => {\r\n    setNewData(res)\r\n   \r\n    console.log(res)\r\n}\r\n\r\n  \r\n  const columns = [\r\n  \r\n    {\r\n      name: \"section\",\r\n      label: \"SECTION\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <div className={classes.textQuestion}>\r\n             {tableMeta.rowIndex+1}. <span >{value}</span>\r\n            </div>\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"d1\",\r\n      label: \"D1\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    {\r\n      name: \"d2\",\r\n      label: \"D2\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    \r\n    {\r\n      name: \"d3\",\r\n      label: \"D3\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"d4\",\r\n      label: \"D4\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n\r\n    {\r\n      name: \"d5\",\r\n      label: \"D5\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"d6\",\r\n      label: \"D6\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"d7\",\r\n      label: \"D7\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"w1\",\r\n      label: \"W1\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"w2\",\r\n      label: \"W2\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"w3\",\r\n      label: \"W3\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"w4\",\r\n      label: \"W4\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"w5\",\r\n      label: \"W5\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"w6\",\r\n      label: \"W6\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n    \r\n    {\r\n      name: \"m1\",\r\n      label: \"M1\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      name: \"m2\",\r\n      label: \"M2\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    \r\n    {\r\n      name: \"m3\",\r\n      label: \"M3\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    \r\n    {\r\n      name: \"m4\",\r\n      label: \"M4\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    \r\n    {\r\n      name: \"m5\",\r\n      label: \"M5\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    },\r\n\r\n\r\n    \r\n    {\r\n      name: \"m6\",\r\n      label: \"M6\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <QualityCell\r\n              value={value}\r\n              index={tableMeta.columnIndex}\r\n              change={event => updateValue(event)}\r\n            />\r\n          )\r\n        },\r\n        filter: false,\r\n        sort: false,\r\n      }\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n   \r\n  ]\r\n  const footerClasses = clsx({\r\n    [classes.footerCell]: true,\r\n    [classes.stickyFooterCell]: stickyFooter,\r\n  });\r\n  return (\r\n    <>\r\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\r\n        <Grid item xs={12}>\r\n          <MuiThemeProvider theme={theme}>\r\n            {newData ? <MUIDataTable\r\n              data={newData && newData}\r\n              columns={columns}\r\n              options={{\r\n                print:false,\r\n                selectableRows: 'none',\r\n                responsive: 'standard',\r\n                elevation:0,\r\n                rowsPerPage: 12,\r\n                download:false,\r\n                search:false,\r\n                filter:false,\r\n                expandableRows:true,\r\n                expandableRowsHeader: false,\r\n                expandableRowsOnClick: false,\r\n                pagination:false,\r\n                viewColumns:false,\r\n                tableBodyHeight: '',\r\n                tableBodyMaxHeight: \"\",\r\n                isRowExpandable: (dataIndex, expandedRows) => {\r\n                  \r\n                  \r\n                  // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\r\n                  if (expandedRows.data.length > 20 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false;\r\n                  return true;\r\n                },\r\n\r\n                renderExpandableRow: (rowData, rowMeta, rowIndex) => {\r\n                  const colSpan = rowData.length + 1;\r\n                  \r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell colSpan={colSpan}>\r\n                        {JSON.stringify(newData[rowMeta.dataIndex]['SECTION'])}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                },\r\n\r\n                // customTableBodyFooterRender: function(opts) {\r\n                //   console.dir(opts);\r\n                //   return (\r\n                //     <TableFooter className={classes.footerClasses}>\r\n                //       <TableRow>\r\n                //       <TableCell>\r\n                          \r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 1\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 2\r\n                //         </TableCell>\r\n                //         <TableCell>\r\n                //           Shift 3\r\n                //         </TableCell>\r\n                //       </TableRow>\r\n                //     </TableFooter>\r\n                //   );\r\n                // },\r\n                setTableProps: () => {\r\n                  return {\r\n                    padding: '0'\r\n                  }\r\n                },\r\n              }}\r\n            />\r\n            : (<Typography gutterBottom variant=\"subtitle1\">\r\n            <h5>Data Unavailable</h5>\r\n          </Typography>)}\r\n          </MuiThemeProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/UserModel.js",["1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\n\n// components\nimport NotifyAlert from \"../../components/ModalAlert/NotifyAlert\";\nimport AddRole from \"./component/AddRole/AddRole\";\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\nimport Widget from \"../../components/Widget/Widget\";\nimport theme from \"./styleCss\"\n\n// data\n\n//parser\nimport parse from 'html-react-parser';\nimport axiosInstance from \"../../components/Utils/AxiosInstance\";\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\n\n\nexport default function UserModel() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [dataTableData, setDataTableData] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [role, setRole] = useState([])\n    const [userID, setUserID] = useState('')\n    const [addUserAlert, setAddUserAlert] = useState('')\n    const [openAlert, setOpenAlert] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n    const roleText = role.map(item => item.text)\n    const checkListID = window.location.href.split('/').slice(-1).pop()\n\n    useEffect(() => {\n        function getData() {\n            axiosInstance.get(`api/User_Management.svc/user_list/all`)\n                // axios.get('http://betaapp.hygienequotient.com/api/User_Management.svc/user_list/all')\n                .then(res => setDataTableData([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        function getRoleList() {\n            axiosInstance.get(`api/Role_Management.svc/role_select2`)\n                // axios.get('http://betaapp.hygienequotient.com/api/Role_Management.svc/role_select2')\n                .then(res => setRole([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        getData()\n        getRoleList()\n    }, [])\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" >\n                            {open === true && tableMeta.rowIndex === 0\n                                ? !isLoading\n                                    ? <div style={{ display: \"flex\" }}>\n                                        <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n                                        <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n                                    </div>\n                                    : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                                : open === false && tableMeta.rowIndex === rowIndex\n                                    ? !isLoading\n                                        ? <div style={{ display: \"flex\" }}>\n                                            <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                                            <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                                        </div>\n                                        : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                                    : <EditRoundedIcon onClick={() => {\n                                        return (\n                                            handleEdit(tableMeta, tableMeta.rowIndex)\n                                        )\n                                    }} />}\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        // {\n        //     name: \"DELETE\",\n        //     label: \"Delete\",\n        //     options: {\n        //         filter: false,\n        //         sort: true,\n        //         empty: true,\n        //         customBodyRender: (value, tableMeta, updateValue) => {\n        //             return (\n        //                 <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n        //                     <DeleteRoundedIcon />\n        //                 </IconButton>\n        //             );\n        //         }\n        //     }\n        // },\n        {\n            name: \"NAME\",\n            label: \"Name\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"USER_NAME\",\n            label: \"User Name\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"MOBILE_NO\",\n            label: \"Mobile No.\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        // {\n        //     name: \"ALT_MOBILE_NO\",\n        //     label: \"Alt. Mobile No.\",\n        //     options: {\n        //         filter: false,\n        //         sort: true,\n        //         customBodyRender: (value, tableMeta, updateValue) => (\n        //             open && tableMeta.rowIndex === 0\n        //                 ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n        //                 : tableMeta.rowIndex === rowIndex\n        //                     ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n        //                     : <div>{value}</div>\n        //         )\n        //     }\n        // },\n        {\n            name: \"EMAIL\",\n            label: \"Email\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    open && tableMeta.rowIndex === 0\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                )\n            }\n        },\n        // {\n        //     name: \"ALT_EMAIL\",\n        //     label: \"Alt. Email\",\n        //     options: {\n        //         filter: false,\n        //         sort: true,\n        //         customBodyRender: (value, tableMeta, updateValue) => (\n        //             open && tableMeta.rowIndex === 0\n        //                 ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n        //                 : tableMeta.rowIndex === rowIndex\n        //                     ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n        //                     : <div>{value}</div>\n        //         )\n        //     }\n        // },\n        {\n            name: \"ROLE\",\n            label: \"Role\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n\n                    return open && tableMeta.rowIndex === 0\n                        ? <FormControl>\n                            <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                {roleText && roleText.map((item, index) =>\n                                    <MenuItem key={index} value={item}>{item}</MenuItem>\n                                )}\n                            </Select>\n                        </FormControl>\n                        : tableMeta.rowIndex === rowIndex\n                            ? <FormControl>\n                                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                                    {roleText && roleText.map((item, index) =>\n                                        <MenuItem key={index} value={item}>{item}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                            : <div>{value}</div>\n\n\n                }\n            }\n        },\n\n    ]\n\n    const handleAlertClose = () => {\n        setOpenAlert(false)\n    }\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex]['USER_GUID'])\n        setUserID(tableMeta.tableData[rowIndex]['USER_GUID'])\n        setRowIndex(rowIndex)\n\n    }\n    const handleDelete = (tableMeta, rowIndex) => {\n        console.log(tableMeta)\n        // const obj = {\n        //     'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\n        //     'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\n        // }\n\n        // axiosInstance.post('', obj)\n        //     .then(res => alert(\"Question deleted successfully\"))\n        //     .then(getData())\n        //     .catch(err => console.log(err))\n\n        // function getData() {\n        //     axiosInstance.get(`api/User_Management.svc/user_list/all`)\n        //         .then(res => setDataTableData([...res.data.data]))\n        //         .catch(err => console.log(err))\n        // }\n\n    }\n    const handleClick = () => {\n        const newRowData = {\n            \"ALT_EMAIL\": \"\",\n            \"ALT_MOBILE_NO\": \"\",\n            \"EMAIL\": \"\",\n            \"MOBILE_NO\": \"\",\n            \"NAME\": \"\",\n            \"ROLE\": \"\",\n            \"USER_NAME\": \"\"\n        }\n        setDataTableData([newRowData, ...dataTableData])\n        setOpen(true)\n        setRowIndex(\"0\")\n    }\n\n    const handleCancel = () => {\n        setRowIndex()\n    }\n    const handleCancelAdd = (rowIndex) => {\n        setOpen(false)\n        console.log(rowIndex)\n        // console.log(dataTableData[rowIndex])\n        dataTableData.shift()\n        setRowIndex()\n    }\n    const handleUpdateAdd = (tableMeta, rowIndex) => {\n\n        console.log(tableMeta)\n        console.log(tableMeta.rowData)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 1)\n        console.log(newDataArr)\n        let selectedRole = role && role.find(item => item.text === newDataArr[4])\n        console.log(selectedRole, selectedRole.id)\n        let newObj = {\n            // \"ALT_EMAIL\": newDataArr[5],\n            // \"ALT_MOBILE_NO\": newDataArr[3],\n            \"EMAIL\": newDataArr[3],\n            \"MOBILE_NO\": newDataArr[2],\n            \"NAME\": newDataArr[0],\n            \"ROLE\": newDataArr[4],\n            \"USER_NAME\": newDataArr[1]\n        }\n        let obj = {\n            \"MOBILE_NO\": newDataArr[2],\n            \"NAME\": newDataArr[0],\n            \"USER_NAME\": newDataArr[1],\n            \"EMAIL\": newDataArr[3],\n            \"ROLE\": selectedRole.id,\n            \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n            // \"CREATED_BY\": localStorage.getItem('client_userID')\n        }\n        setIsLoading(true)\n        axiosInstance.post('api/User_Management.svc/insert_user', obj)\n            // axios.post('http://betaapp.hygienequotient.com/api/User_Management.svc/insert_user', obj)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    setIsLoading(false)\n                    setAddUserAlert(res.data.response[0]['MESSAGE'])\n                    setOpenAlert(true)\n                    dataTableData[rowIndex] = newObj\n                    setDataTableData([...dataTableData])\n                    setRowIndex()\n                    setOpen(false)\n                }\n                else {\n                    setIsLoading(false)\n                    setAddUserAlert(res.data.response[0]['MESSAGE'])\n                    setOpenAlert(true)\n                }\n            })\n            .catch(err => {\n                setIsLoading(false)\n                console.log(err)\n            })\n\n\n        console.log('add :', obj)\n        // axios.post('http://betaapp.hygienequotient.com/api/User_Management.svc/insert_user', obj)\n        //     .then(res => console.log(res))\n        //     .catch(err => console.log(err))\n    }\n    const handleUpdateEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.rowData)\n        console.log(tableMeta)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 1)\n        // let newDataArr = [updatedata[1], updatedata[2], updatedata[3], updatedata[4], updatedata[5], updatedata[6], updatedata[7], updatedata[8]]\n        let selectedRole = role.find(item => item.text === newDataArr[4])\n        console.log(selectedRole, selectedRole.id)\n        console.log(\"update\", newDataArr)\n        let newObj = {\n            \"EMAIL\": newDataArr[3],\n            \"MOBILE_NO\": newDataArr[2],\n            \"NAME\": newDataArr[0],\n            \"ROLE\": newDataArr[4],\n            \"USER_NAME\": newDataArr[1],\n            \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n            \"USER_GUID\": userID,\n        }\n\n        let obj = {\n            \"MOBILE_NO\": newDataArr[2],\n            \"NAME\": newDataArr[0],\n            \"USER_NAME\": newDataArr[1],\n            \"EMAIL\": newDataArr[3],\n            \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n            \"ROLE\": selectedRole.id,\n            \"USER_GUID\": userID,\n            // \"CREATED_BY\": localStorage.getItem('client_userID')\n        }\n        console.log('edit :', obj)\n        // axiosInstance.post('api/Question_Management.svc/insert_question', obj)\n        setIsLoading(true)\n        axiosInstance.post('api/User_Management.svc/update_user', obj)\n            // axios.post('http://betaapp.hygienequotient.com/api/User_Management.svc/update_user', obj)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    setIsLoading(false)\n                    setAddUserAlert(res.data.response[0]['MESSAGE'])\n                    setOpenAlert(true)\n                    dataTableData[rowIndex] = newObj\n                    setDataTableData([...dataTableData])\n                    setRowIndex()\n                    // setOpen(false)\n                }\n                else {\n                    setIsLoading(false)\n                    setAddUserAlert(res.data.response[0]['MESSAGE'])\n                    setOpenAlert(true)\n                }\n            })\n            .catch(err => {\n                setIsLoading(false)\n                console.log(err)\n            })\n    }\n    const handleCloseAddButton = () => {\n        setOpenAdd(false)\n    }\n\n    const handleOpenModal = () => {\n        setOpenModal(true)\n    }\n    const handleCloseModal = () => {\n        setOpenModal(false)\n    }\n    console.log(dataTableData)\n    console.log(role)\n    console.log(checkListID)\n    return (\n        <>\n            <Grid container spacing={4}>\n                <Grid item xs={12}>\n                    <MuiThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title=\"User Model\"\n                            data={dataTableData}\n                            columns={columns}\n                            options={{\n                                filter: true,\n                                selectableRows: 'none',\n                                filterType: 'dropdown',\n                                responsive: 'standard',\n                                pagination: false,\n                                download: true,\n                                downloadOptions: {\n                                    filename: 'tableDownload.csv',\n                                    separator: ',',\n                                    filterOptions: {\n                                        useDisplayedColumnsOnly: true || false,\n                                        useDisplayedRowsOnly: true || true\n                                    } || false\n                                },\n                                tableBodyHeight: '600px',\n                                tableBodyMaxHeight: \"\",\n                                setTableProps: () => {\n                                    return {\n                                        padding: 'default'\n                                    }\n                                },\n                                customToolbar: () => {\n                                    return (\n                                        <>\n                                            <IconButton onClick={() => handleClick()} disabled={open ? true : false}>\n                                                <Button\n                                                    variant=\"contained\"\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                    startIcon={<AddCircleIcon />}\n                                                >\n                                                    Add User\n                                                        </Button>\n                                            </IconButton>\n                                            <IconButton onClick={handleOpenModal} >\n                                                <Button\n                                                    variant=\"contained\"\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                    startIcon={<AddCircleIcon />}\n                                                >\n                                                    Add Role\n                                                        </Button>\n                                            </IconButton>\n\n                                        </>\n                                    );\n                                }\n                            }}\n                        />\n                    </MuiThemeProvider>\n                </Grid>\n            </Grid>\n            {openAlert ? <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} /> : \"\"}\n            {openModal ? <AddRole open={openModal} close={handleCloseModal} /> : \"\"}\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/styleCss.js",["1510","1511"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/component/AddRole/AddRole.js",["1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\n\n//component\nimport axios from 'axios';\nimport Table from '../AddRole/Table';\nimport axiosInstance from '../../../../components/Utils/AxiosInstance'\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        display: 'none',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n      },\n      closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n      },\n}))\n\nexport default function AddUser(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        userRole:\"\"\n    })\n    const [dataTableData, setDataTableData] = useState([])\n    const [saveOpen, setSaveOpen] = useState(true)\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n          <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n              <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                <CloseIcon />\n              </IconButton>\n            ) : null}\n          </MuiDialogTitle>\n        );\n      };\n    useEffect(() => {\n        function getData() {\n            axiosInstance.get(`api/Role_Management.svc/role_select2`)\n            // axios.get('http://betaapp.hygienequotient.com/api/Role_Management.svc/role_select2')\n                .then(res => setDataTableData([...res.data.data]))\n                .then(setSaveOpen(true))\n                .catch(err => console.log(err))\n        }\n        getData()\n    }, [])\n\n    const handleChange = (input) => ({ target: { value } }) => {\n        console.log(input, value)\n        setData({\n            ...data,\n            [input]: value\n        })\n    }\n    const handleSave = () => {\n        console.log(data)\n        setSaveOpen(true)\n        \n        const obj = {\n            \"ROLE\":data.roleText,\n            \"CREATED_BY\":\"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n            // 'CREATED_BY': localStorage.getItem('client_userID'),\n        }\n\n        axiosInstance.post('api/Role_Management.svc/insert_role', obj)\n        // axios.post('http://betaapp.hygienequotient.com/api/Role_Management.svc/insert_role', obj)\n            .then(res => {\n                setTimeout(() => addNewData(), 1000)\n            })\n            .catch(err => console.log(err))\n    }\n    const addNewData = () => {\n        function getData() {\n            axiosInstance.get('api/Role_Management.svc/role_select2')\n            // axios.get(`http://betaapp.hygienequotient.com/api/Role_Management.svc/role_select2`)\n                .then(res => setDataTableData([...res.data.data]))\n                .catch(err => console.log(err))\n        }\n        getData()\n    }\n   const handleChangeSaveOpen =() => {\n    setSaveOpen(false)\n   }\n    console.log(props)\n    console.log(dataTableData)\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth=\"true\" maxWidth={'md'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add Role</DialogTitle>\n            <DialogContent spacing={2} >\n                <Grid container xs={12} spacing={2} style={{ display: \"flex\", direction: \"row\" }}>\n                    <Grid item xs={4} >\n                        <Grid container xs={12} style={{ display: \"flex\", direction: \"column\" }}>\n                            <TextField\n                                autoFocus\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                id=\"roleText\"\n                                label=\"Role\"\n                                type=\"text\"\n                                value={data.roleText}\n                                onChange={handleChange('roleText')}\n                                fullWidth\n                            />\n                        </Grid>\n                        <DialogActions>\n                            <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n                                Save\n                            </Button>\n                        </DialogActions>\n                    </Grid>\n                    <Grid container xs={8}>\n                        <Table data={dataTableData} checkListID={props.checkListID} saveOpen={saveOpen} changeSaveOpen={handleChangeSaveOpen}/>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n                    Cancel\n                </Button>\n            </DialogActions>\n\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/userModel/component/AddRole/Table.js",["1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\n// components\nimport axiosInstance from '../../../../components/Utils/AxiosInstance'\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [indexData, setIndexData] = useState({})\n  const [data, setData] = useState([])\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [roleID, setRoleID] = useState('') \n\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\">\n              {tableMeta.rowIndex === rowIndex\n                  ? <div style={{ display: \"flex\" }}>\n                    <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                    <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                  </div>\n                  : <EditRoundedIcon onClick={() => {\n                    return (\n                      handleEdit(tableMeta, tableMeta.rowIndex)\n                    )\n                  }} />}\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"text\",\n      label: \"Role\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n              tableMeta.rowIndex === rowIndex\n                  ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                  : <div>{value}</div>\n      )\n      }\n    },\n    {\n      name: \"DELETE\",\n      label: \"Delete\",\n      options: {\n        filter: false,\n        sort: true,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(dataIndex)}>\n              <DeleteRoundedIcon />\n            </IconButton>\n          );\n        }\n      }\n    },\n  ]\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0 && index<updatedata.length-1)\n    console.log(newDataArr)\n    \n    let obj = {\n        \"ROLE_ID\":roleID,\n        \"ROLE\":newDataArr[0],\n        \"CREATED_BY\":\"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n    }\n    axiosInstance.post('api/Role_Management.svc/update_role', obj)\n    // axios.post('http://betaapp.hygienequotient.com/api/Role_Management.svc/update_role', obj)\n        .then(res => getUpdatedData())\n        .catch(err => console.log(err))\n}\n\n\n  const getUpdatedData =() => {\n    setRowIndex()\n    axiosInstance.get(`api/Role_Management.svc/role_select2`)\n    // axios.get(`http://betaapp.hygienequotient.com/api/Role_Management.svc/role_select2`)\n    .then(res => setData([...res.data.data]))\n    .then(props.changeSaveOpen)\n    .catch(err => console.log(err))\n  }\n\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    setRoleID(tableMeta.tableData[rowIndex]['id'])\n    setRowIndex(rowIndex)\n   \n  }\n  const handleCancel = () => {\n    setRowIndex()\n  }\n  const handleDelete = () => {\n    \n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  console.log(indexData)\n  console.log(props.data)\n  console.log(props)\n  return (\n    <>\n\n      <Grid item xs={12} spacing={2}>\n        <MuiThemeProvider theme={theme}>\n          <MUIDataTable\n            title=\"Role List\"\n            data={props.saveOpen?props.data?props.data:'isLoading...':data}\n            columns={columns}\n            options={{\n              filter: true,\n              selectableRows: 'none',\n              filterType: 'dropdown',\n              responsive: 'standard',\n              rowsPerPage: 5,\n              download: true,\n              downloadOptions: {\n                filename: 'tableDownload.csv',\n                separator: ',',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true || false,\n                  useDisplayedRowsOnly: true || true\n                } || false\n              },\n              tableBodyHeight: '560px',\n              tableBodyMaxHeight: \"\",\n              setTableProps: () => {\n                return {\n                  padding: 'default'\n                }\n              },\n            }}\n          />\n        </MuiThemeProvider>\n      </Grid>\n      {/* <EditForm open={open} data={indexData} close={handleClose} />\n        <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n      {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/Onboarding.js",["1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Typography,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n  Label\r\n} from \"recharts\";\r\nimport \"./onboarding.css\"\r\nimport total from \"./img/total.png\";\r\nimport sites from \"./img/sites.png\";\r\nimport images from \"./img/images.png\";\r\nimport time from \"./img/time.png\";\r\nimport Tables from './components/Table/Table';\r\nimport Tablesx from './components/Table/Tablesx';\r\nimport Table from './components/Table/Table_business'\r\nimport Tablesa from './components/Table/Add_client'\r\nimport axios from \"axios\";\r\nimport axiosInstance from '../../components/Utils/AxiosInstance';\r\n\r\nexport default function Onboarding() {\r\n  const theme = useTheme();\r\n\r\n  const [value, setValue] = useState(0);\r\n  const [ticketData, setTicketData] = useState();\r\n\r\n  const masterID = localStorage.getItem('client_ID')\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  useEffect(() => {\r\n    getTicketData()\r\n  }, [])\r\n\r\n  function getTicketData() {\r\n    axiosInstance.get(`api/Universal_Client_Dashboard.svc/get_onboarding_dashboard_count/${masterID}`)\r\n      // axios.get(`http://betaapp.hygienequotient.com/api/Universal_Client_Dashboard.svc/get_onboarding_dashboard_count/${masterID}`)\r\n      .then(res => {\r\n        setTicketData({ ...res.data.data[0] })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n  console.log(ticketData)\r\n  function TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"50px;\" }}\r\n      >\r\n\r\n        <Grid item xs>\r\n          <Card className=\"info_card\">\r\n            <CardContent >\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid md={8}>\r\n                  {ticketData ? <h1>{ticketData['BUSINESS_COUNT']}</h1> : \"Data Unavailable\"}\r\n                  <h3>Business</h3>\r\n                </Grid>\r\n                <Grid md={4}>\r\n                  <img src={total} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n\r\n\r\n        <Grid item xs>\r\n          <Card className=\"info_card\">\r\n            <CardContent>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid md={8}>\r\n                  {ticketData ? <h1>{ticketData['SITE_COUNT']}</h1> : \"Data Unavailable\"}\r\n                  <h3>Sites</h3>\r\n                </Grid>\r\n                <Grid md={4}>\r\n                  <img src={sites} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n\r\n\r\n\r\n        <Grid item xs>\r\n          <Card className=\"info_card\">\r\n            <CardContent>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid md={8}>\r\n                  {ticketData ? <h1>{ticketData['IMAGE_COUNT']}</h1> : \"Data Unavailable\"}\r\n                  <h3>Images</h3>\r\n                </Grid>\r\n                <Grid md={4}>\r\n                  <img src={images} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Card className=\"info_card\">\r\n            <CardContent>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid md={8}>\r\n                  {ticketData ? <h1>0</h1> : \"Data Unavailable\"}\r\n                  <h3>Videos</h3>\r\n                </Grid>\r\n                <Grid md={4}>\r\n                  <img src={images} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n\r\n\r\n        <Grid item xs>\r\n          <Card className=\"info_card\">\r\n            <CardContent>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid md={8}>\r\n                  {ticketData ? <h1>{ticketData['QCPENDINGTIME']}</h1> : \"Data Unavailable\"}\r\n                  <h3>Avg. QC-time(sec)</h3>\r\n                </Grid>\r\n                <Grid md={4}>\r\n                  <img src={time} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </CardContent>\r\n\r\n          </Card>\r\n        </Grid>\r\n      <Grid  item container xs={12}>\r\n        <Grid item container xs={12} spacing={1}>\r\n          <Tables />\r\n        </Grid>\r\n        <Grid item container xs={12} spacing={1} style={{ marginTop: \"10px\" }}>\r\n          <Table masterID={masterID} />\r\n        </Grid>\r\n      </Grid>\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n\r\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Add_client.js",["1570","1571","1572","1573","1574","1575","1576"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\n// components\r\nimport PageTitle from \"../../../../components/PageTitle/PageTitle\";\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\nimport datasource from './datasource3'\r\n\r\n// data\r\n// import mock from \"../../../dashboard/mock\";\r\n// import EditForm from \"../Edit/EditForm\";\r\n// import AddClient from \"../Add/AddClient\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOverflow: {\r\n    overflow: 'auto'\r\n  }\r\n}))\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  overrides: {\r\n    MUIDataTableSelectCell: {\r\n      expandDisabled: {\r\n        // Soft hide the button.\r\n        visibility: 'hidden',\r\n      },\r\n    },\r\n\r\n    MUIDataTableBodyCell: {\r\n      root: {\r\n        padding: \"5px 3px\",\r\n        \r\n      }\r\n    },\r\n    MUIDataTableToolbar: {\r\n\r\n    },\r\n    // handles table data header color\r\n    MUIDataTableHeadCell: {\r\n      root: {\r\n        color: \"white\",\r\n        padding: \"5px 10px\",\r\n      },\r\n\r\n\r\n      fixedHeader: {\r\n        backgroundColor: '#12ACC6',\r\n      }\r\n    },\r\n    MUIDataTablePagination: {\r\n      root: {\r\n        backgroundColor: useStyles.tableFooter,\r\n        color: useStyles.textPrimary\r\n      }\r\n    },\r\n    // handles row hover color and selected row color\r\n    MuiTableRow: {\r\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\r\n      root: {\r\n        '&$selected': {\r\n          backgroundColor: useStyles.tableRowSelectColor\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport default function Tablesa() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [indexData, setIndexData] = useState({})\r\n  const [open, setOpen] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n\r\n  useEffect(() => {\r\n    function getData() {\r\n      axiosInstance.get('api/Master_Client.svc/get_master_client/all')\r\n        .then(res => setDataTableData([...res.data.data]))\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n  }, [])\r\n  const columns = [\r\n    {\r\n      name: \"Edit\",\r\n      // label: \"EDIT\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRenderLite: (dataIndex, rowIndex) => {\r\n          return (\r\n            <IconButton color=\"primary\" size=\"small\" onClick={() => handleEdit(dataIndex)}>\r\n              <EditRoundedIcon />\r\n            </IconButton>\r\n          );\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: \"sr_no\",\r\n      label: \"Sr.No\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Checklis_Name\",\r\n      label: \"Checklist Name\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n\r\n    \r\n   \r\n  \r\n    {\r\n      name: \"Question\",\r\n      label: \"Question\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n   \r\n\r\n    {\r\n      name: \"weightage\",\r\n      label: \"Weightage\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n\r\n\r\n    \r\n  ]\r\n \r\n  const handleEdit = (dataIndex) => {\r\n    // let path = `/app/cm/masterClientList/edit/${dataTableData[dataIndex]['MASTER_GUID']}`;\r\n    // history.push(path);\r\n    setOpen(true)\r\n    setIndexData({ ...dataTableData[dataIndex] })\r\n\r\n  }\r\n  const handleAddButton = () => {\r\n    setOpenAdd(true)\r\n  }\r\n  const handleCloseAddButton = () => {\r\n    setOpenAdd(false)\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false) \r\n  }\r\n  console.log(indexData)\r\n  return (\r\n    <>\r\n      <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\r\n      <Grid item xs={3} style={{paddingBottom:\"0\", marginTop:\"0px\"}}>\r\n          <Button \r\n            variant=\"contained\" \r\n            size=\"medium\" \r\n            color=\"primary\" \r\n            startIcon={<AddCircleIcon />}\r\n            onClick={handleAddButton}\r\n            \r\n            >\r\n            Add Checklist\r\n          </Button>\r\n        </Grid> \r\n        <Grid item xs={12}>\r\n          <MuiThemeProvider theme={theme}>\r\n            <MUIDataTable\r\n            \r\n              title=\"Create Checklist\"\r\n              data={datasource}\r\n              columns={columns}\r\n              options={{\r\n                filter: true,\r\n                selectableRows: 'none',\r\n                filterType: 'dropdown',\r\n                responsive: 'standard',\r\n                rowsPerPage: 10,\r\n                download: true,\r\n                downloadOptions: {\r\n                  filename: 'tableDownload.csv',\r\n                  separator: ',',\r\n                  filterOptions: {\r\n                    useDisplayedColumnsOnly: true || false,\r\n                    useDisplayedRowsOnly: true || true\r\n                  } || false\r\n                },\r\n               \r\n                tableBodyMaxHeight: \"\",\r\n                setTableProps: () => {\r\n                  return {\r\n                    padding: 'default'\r\n                  }\r\n                },\r\n              }}\r\n            />\r\n          </MuiThemeProvider>\r\n        </Grid>\r\n        {/* <EditForm open={open} data={indexData} close={handleClose} /> */}\r\n        {/* <AddClient open={openAdd} close={handleCloseAddButton} /> */}\r\n        {/* <Grid item xs={12}>\r\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid> */}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Table_business.js",["1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595","1596","1597","1598","1599"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n//toggle\r\nimport Switch from \"react-switch\";\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\r\n\r\n// components\r\nimport theme from \"./styletheme\"\r\nimport NotifyAlert from \"../../../../components/ModalAlert/NotifyAlert\";\r\nimport FailureAlert from \"../../../../components/ModalAlert/FailureAlert\";\r\nimport ViewSiteTable from \"./ViewSiteTable\";\r\nimport AddUser from \"../AddUser/AddUser\";\r\n\r\n// data\r\n\r\n//parser\r\nimport parse from 'html-react-parser';\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOverflow: {\r\n    overflow: 'auto'\r\n  }\r\n}))\r\n\r\nexport default function BusinessTable(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [rowIndex, setRowIndex] = useState()\r\n  const [viewIndex, setViewIndex] = useState()\r\n  const [open, setOpen] = useState(false)\r\n  const [edit, setEdit] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n  const [role, setRole] = useState([])\r\n  const [userID, setUserID] = useState('')\r\n  const [addUserAlert, setAddUserAlert] = useState('')\r\n  const [openAlert, setOpenAlert] = useState(false)\r\n  const [failure, setFailure] = useState(false)\r\n  const [errorMsg, setErrorMsg] = useState([])\r\n  const [businessID, setBusinessID] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const mobileRegex = /^[6789]\\d{9}$/;\r\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n  const roleText = role.map(item => item.text)\r\n  // const checkListID = window.location.href.split('/').slice(-1).pop()\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    getData()\r\n  }, [])\r\n\r\n  function getData() {\r\n    axiosInstance.get(`api/Business_Master.svc/business_list/${props.masterID}`)\r\n      .then(res => setDataTableData([...res.data.data]))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Edit\",\r\n      // label: \"EDIT\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n\r\n            open === true && tableMeta.rowIndex === 0\r\n              ? !isLoading\r\n                ? <IconButton color=\"primary\" size=\"small\" >\r\n                  <div style={{ display: \"flex\" }}>\r\n                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\r\n                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\r\n                  </div>\r\n                </IconButton>\r\n                : <CircularProgress size={20} style={{ color: \"blue\" }} />\r\n              : edit === true && tableMeta.rowIndex === rowIndex\r\n                ? !isLoading\r\n                  ? <IconButton color=\"primary\" size=\"small\" >\r\n                    <div style={{ display: \"flex\" }}>\r\n                      <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\r\n                      <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\r\n                    </div>\r\n                  </IconButton>\r\n                  : <CircularProgress size={20} style={{ color: \"blue\" }} />\r\n                : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\r\n                  <EditRoundedIcon\r\n\r\n                    onClick={() => {\r\n                      return (\r\n                        handleEdit(tableMeta, tableMeta.rowIndex)\r\n                      )\r\n                    }}\r\n                  />\r\n                </IconButton>\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"\",\r\n      label: \"\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          let status = tableMeta.tableData[tableMeta.rowIndex]['DELETED']\r\n          console.log(status)\r\n          return (\r\n            <Switch\r\n              disabled={open || edit ? true: false}\r\n              checked={status === \"1\" ? false : true}\r\n              onChange={() => handleChange(tableMeta)}\r\n              offColor=\"#ef1049\"\r\n              width={68}\r\n              uncheckedIcon={\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    height: \"100%\",\r\n                    fontSize: 10,\r\n                    color: \"white\",\r\n                    paddingRight: 2,\r\n                  }}\r\n                >\r\n                  Inactive\r\n                          </div>\r\n              }\r\n              checkedIcon={\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    height: \"100%\",\r\n                    fontSize: 10,\r\n                    color: \"white\",\r\n                    paddingLeft: 2,\r\n                  }}\r\n                >\r\n                  Active\r\n                          </div>\r\n              }\r\n              className=\"react-switch\"\r\n              id=\"icon-switch\"\r\n            />\r\n          );\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: \"NAME\",\r\n      label: \"Name\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => (\r\n          open && tableMeta.rowIndex === 0\r\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n            : edit && tableMeta.rowIndex === rowIndex\r\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n              : <div>{value}</div>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: \"CONTACT_PERSON\",\r\n      label: \"Contact Person\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => (\r\n          open && tableMeta.rowIndex === 0\r\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n            : edit && tableMeta.rowIndex === rowIndex\r\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n              : <div>{value}</div>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: \"MOBILE_NO\",\r\n      label: \"Mobile No.\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => (\r\n          open && tableMeta.rowIndex === 0\r\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n            : edit && tableMeta.rowIndex === rowIndex\r\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n              : <div>{value}</div>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: \"EMAIL\",\r\n      label: \"Email\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => (\r\n          open && tableMeta.rowIndex === 0\r\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n            : edit && tableMeta.rowIndex === rowIndex\r\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n              : <div>{value}</div>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: \"View Site/ User List\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                style={{ fontSize: \"10px\" }}\r\n                disabled={open || edit ? true : false}\r\n                onClick={() => handleViewSite(tableMeta, tableMeta['rowIndex'])}>\r\n                View Site\r\n            </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                style={{ fontSize: \"10px\", marginLeft: \"3px\" }}\r\n                disabled={open || edit ? true : false}\r\n                onClick={() => handleUserList(tableMeta)}\r\n              >\r\n                User\r\n          </Button>\r\n            </>\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n  ]\r\n  const checkValidity = yup.object().shape({\r\n    \"EMAIL\": yup\r\n      .string()\r\n      .email(\"Email ID is not valid\")\r\n      .required(),\r\n    \"NAME\": yup\r\n      .string()\r\n      .required('Name is required'),\r\n    \"MOBILE_NO\": yup\r\n      .string()\r\n      .matches(mobileRegex, 'Mobile number is not valid'),\r\n    // .positive()\r\n    // .integer()\r\n    // .number()\r\n    \"CONTACT_PERSON\": yup\r\n      .string()\r\n      .required('Contact Person is required'),\r\n  },\r\n    [[\"EMAIL\", \"NAME\", \"MOBILE_NO\", \"CONTACT_PERSON\"]]\r\n  )\r\n  const yupOptions = {\r\n    strict: false,\r\n    abortEarly: false, // return all errors\r\n  }\r\n  const handleUserList = (tableMeta) => {\r\n    console.log(tableMeta)\r\n    console.log(tableMeta.tableData[tableMeta.rowIndex]['BUSINESS_GUID'])\r\n    // setBusinessID(dataTableData[tableMeta.rowIndex]['BUSINESS_GUID'])\r\n    let path = `/app/userslist/bm/${tableMeta.tableData[tableMeta.rowIndex]['BUSINESS_GUID']}`;\r\n    history.push(path)\r\n  }\r\n\r\n  const handleViewSite = (rowData, rowIndex) => {\r\n    console.log(rowIndex)\r\n    setBusinessID(dataTableData[rowIndex]['BUSINESS_GUID'])\r\n    setViewIndex(rowIndex)\r\n  }\r\n\r\n  const handleAlertClose = () => {\r\n    setOpenAlert(false)\r\n  }\r\n  const handleEdit = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta)\r\n    console.log(tableMeta.tableData[rowIndex]['BUSINESS_GUID'])\r\n    setBusinessID(tableMeta.tableData[rowIndex]['BUSINESS_GUID'])\r\n    setEdit(true)\r\n    setRowIndex(rowIndex)\r\n\r\n  }\r\n  const handleDelete = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta)\r\n    const obj = {\r\n      'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\r\n      'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\r\n    }\r\n\r\n  }\r\n  const handleClick = () => {\r\n    const newRowData = {\r\n      \"EMAIL\": \"\",\r\n      \"MOBILE_NO\": \"\",\r\n      \"NAME\": \"\",\r\n      \"CONTACT_PERSON\": \"\"\r\n    }\r\n    setDataTableData([newRowData, ...dataTableData])\r\n    setOpen(true)\r\n    setRowIndex(\"0\")\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setEdit(false)\r\n    setRowIndex()\r\n  }\r\n  const handleCancelAdd = (rowIndex) => {\r\n    setOpen(false)\r\n    console.log(rowIndex)\r\n    // console.log(dataTableData[rowIndex])\r\n    dataTableData.shift()\r\n    setRowIndex()\r\n  }\r\n\r\n  const getBusinessList = () => {\r\n    axiosInstance.get(`api/Business_Master.svc/business_list/${props.masterID}`)\r\n    // axios.get(`http://betaapp.hygienequotient.com/api/Business_Master.svc/business_list/${props.masterID}`)\r\n      .then(res => setDataTableData([...res.data.data]))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n\r\n  const handleUpdateAdd = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta)\r\n    console.log(tableMeta.rowData)\r\n    let updatedata = tableMeta.rowData\r\n    let newDataArr = updatedata.filter((item, index) => index > 1)\r\n    console.log(newDataArr)\r\n    // let selectedRole = role && role.find(item => item.text === newDataArr[4])\r\n    // console.log(selectedRole, selectedRole.id)\r\n    let obj = {\r\n      \"MASTER_GUID\": props.masterID,\r\n      \"MOBILE_NO\": newDataArr[2],\r\n      \"NAME\": newDataArr[0],\r\n      \"CONTACT_PERSON\": newDataArr[1],\r\n      \"EMAIL\": newDataArr[3],\r\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\r\n    }\r\n    checkValidity.validate(obj, yupOptions)\r\n      .then(() => {\r\n        setIsLoading(true)\r\n        axiosInstance.post('api/Business_Master.svc/insert_business', obj)\r\n          // axios.post('http://betaapp.hygienequotient.com/api/Business_Master.svc/insert_business', obj)\r\n          .then(res => {\r\n            if (res.data.response[0]['CODE'] === \"200\") {\r\n              console.log(res)\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(false)\r\n              setRowIndex()\r\n              getBusinessList()\r\n              setOpen(false)\r\n              console.log('no error')\r\n            }\r\n            else {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setRowIndex()\r\n              setOpen(false)\r\n              setFailure(true)\r\n              getBusinessList()\r\n            }\r\n          })\r\n          .catch(err => {\r\n            setIsLoading(false)\r\n            setAddUserAlert(err)\r\n            setOpenAlert(true)\r\n            setRowIndex()\r\n            setOpen(false)\r\n            setFailure(true)\r\n            getBusinessList()\r\n          })\r\n\r\n      })\r\n      .catch(function (err) {\r\n        let errArray = err.inner.map(e => e['message'])\r\n        console.log(errArray)\r\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\r\n        setOpenAlert(true)\r\n        setFailure(true)\r\n        setOpen(false)\r\n        getBusinessList()\r\n        setIsLoading(false)\r\n      });\r\n    console.log('add :', obj)\r\n\r\n  }\r\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta.rowData)\r\n    console.log(tableMeta)\r\n    let updatedata = tableMeta.rowData\r\n    let newDataArr = updatedata.filter((item, index) => index > 1)\r\n    // let selectedRole = role.find(item => item.text === newDataArr[4])\r\n    // console.log(selectedRole, selectedRole.id)\r\n    console.log(\"update\", newDataArr)\r\n\r\n\r\n    let obj = {\r\n\r\n      \"BUSINESS_GUID\": businessID,\r\n      \"MOBILE_NO\": newDataArr[2],\r\n      \"NAME\": newDataArr[0],\r\n      \"CONTACT_PERSON\": newDataArr[1],\r\n      \"EMAIL\": newDataArr[3],\r\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\r\n    }\r\n    console.log('edit :', obj)\r\n    // axiosInstance.post('api/Question_Management.svc/insert_question', obj)\r\n    checkValidity.validate(obj, { abortEarly: false })\r\n      .then(() => {\r\n        setIsLoading(true)\r\n        axiosInstance.post('api/Business_Master.svc/update_business', obj)\r\n          // axios.post('http://betaapp.hygienequotient.com/api/Business_Master.svc/update_business', obj)\r\n          .then(res => {\r\n            if (res.data.response[0]['CODE'] === \"200\") {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(false)\r\n              setEdit(false)\r\n              setRowIndex()\r\n              getBusinessList()\r\n            }\r\n            else {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(true)\r\n              setErrorMsg([])\r\n              getBusinessList()\r\n              setEdit(false)\r\n              setRowIndex()\r\n            }\r\n          })\r\n          .catch(err => {\r\n            setIsLoading(false)\r\n            setAddUserAlert(err)\r\n            setOpenAlert(true)\r\n            setFailure(true)\r\n            getBusinessList()\r\n            setEdit(false)\r\n            setRowIndex()\r\n          })\r\n      })\r\n      .catch(function (err) {\r\n        let errArray = err.inner.map(e => {\r\n          console.log(e['message'])\r\n          return e['message']\r\n        })\r\n        console.log(errArray)\r\n        setIsLoading(false)\r\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\r\n        setOpenAlert(true)\r\n        setFailure(true)\r\n        setEdit(false)\r\n        setRowIndex()\r\n        getBusinessList()\r\n      });\r\n  }\r\n  const handleCloseAddButton = () => {\r\n    setOpenAdd(false)\r\n  }\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenModal(true)\r\n  }\r\n  const handleCloseModal = () => {\r\n    setOpenModal(false)\r\n  }\r\n  const handleChange = (tableMeta) => {\r\n    console.log(tableMeta)\r\n    let businessID = tableMeta.tableData[tableMeta.rowIndex]['BUSINESS_GUID']\r\n    let deleted = tableMeta.tableData[tableMeta.rowIndex]['DELETED']\r\n    const obj = {\r\n      \"BUSINESS_GUID\": businessID,\r\n      \"DELETED\": deleted === \"1\" ? \"0\" : \"1\",\r\n      'CREATED_BY': localStorage.getItem('client_userID')\r\n    }\r\n    axiosInstance.post('api/Business_Master.svc/active_deactive_business', obj)\r\n      .then(res => {\r\n        if (res.data.response[0]['CODE'] === \"200\") {\r\n          getData()\r\n        } else {\r\n          alert(res.data.response[0]['MESSAGE'])\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n  }\r\n  console.log(dataTableData)\r\n  console.log(props)\r\n  console.log(open, edit)\r\n  console.log(\"Loading\", isLoading)\r\n  return (\r\n    <>\r\n      <Grid item xs={12}>\r\n        <MuiThemeProvider theme={theme}>\r\n          <MUIDataTable\r\n            title=\"Business List\"\r\n            data={dataTableData}\r\n            columns={columns}\r\n            options={{\r\n              filter: true,\r\n              selectableRows: 'none',\r\n              filterType: 'dropdown',\r\n              responsive: 'standard',\r\n              pagination: true,\r\n              rowsPerPage: 5,\r\n              rowsPerPageOptions: [5, 10, 15, 20, 100],\r\n              download: true,\r\n              downloadOptions: {\r\n                filename: 'tableDownload.csv',\r\n                separator: ',',\r\n                filterOptions: {\r\n                  useDisplayedColumnsOnly: true || false,\r\n                  useDisplayedRowsOnly: true || true\r\n                } || false\r\n              },\r\n              tableBodyHeight: '',\r\n              tableBodyMaxHeight: \"\",\r\n              setTableProps: () => {\r\n                return {\r\n                  padding: 'default'\r\n                }\r\n              },\r\n              setRowProps: (row, dataIndex, rowIndex) => {\r\n                console.log(row, dataIndex, rowIndex)\r\n                console.log(viewIndex)\r\n                if (viewIndex === rowIndex) {\r\n                  return {\r\n                    style: { background: \"rgb(220,220,220)\" }\r\n                  };\r\n                }\r\n              },\r\n              customToolbar: () => {\r\n                return (\r\n                  <>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      style={{ fontSize: \"8px\", marginLeft: \"1px\", marginRight: \"1px\" }}\r\n                      onClick={() => handleClick()}\r\n                      disabled={open || edit ? true : false}\r\n                      startIcon={<AddCircleIcon />}\r\n                    >\r\n                      Add Business\r\n                      </Button>\r\n                  </>\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        </MuiThemeProvider>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {businessID ? <ViewSiteTable businessID={businessID} /> : \"\"}\r\n      </Grid>\r\n      {openAlert ?\r\n        failure === false\r\n          ? <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\r\n          : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\r\n        : \"\"}\r\n      {openModal ? <AddUser open={openModal} close={handleCloseModal} /> : \"\"}\r\n    </>\r\n  );\r\n}\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Table.js",["1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618","1619","1620"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport clsx from 'clsx';\r\nimport * as yup from 'yup';\r\n\r\n\r\n//material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\n\r\n\r\n// components\r\nimport Tablesx from \"./Tablesx\";\r\nimport Quest from \"./Quest\";\r\n\r\n// data\r\n\r\n//parser\r\nimport parse from 'html-react-parser';\r\nimport NotifyAlert from \"../../../../components/ModalAlert/NotifyAlert\";\r\nimport FailureAlert from \"../../../../components/ModalAlert/FailureAlert\";\r\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOverflow: {\r\n    overflow: 'auto'\r\n  },\r\n  tableRowSelectColor: {\r\n    backgroundColor: 'red',\r\n    color: \"white\"\r\n  },\r\n  tableRowHoverColor: {\r\n    backgroundColor: \"pink\"\r\n  }\r\n}))\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  overrides: {\r\n    MuiPaper: {\r\n      rounded: {\r\n        borderRadius: \"20px\"\r\n      }\r\n    },\r\n    MUIDataTableSelectCell: {\r\n      expandDisabled: {\r\n        // Soft hide the button.\r\n        visibility: 'hidden',\r\n      },\r\n    },\r\n\r\n    MUIDataTableBodyCell: {\r\n      root: {\r\n        padding: \"5px 3px\",\r\n        '&:nth-child(3)': { textAlign: 'center' },\r\n        '&:nth-child(6)': { textAlign: 'center' },\r\n\r\n      }\r\n    },\r\n    MUIDataTableToolbar: {\r\n\r\n    },\r\n    // handles table data header color\r\n    MUIDataTableHeadCell: {\r\n      root: {\r\n        color: \"white\",\r\n        padding: \"5px 10px\",\r\n      },\r\n\r\n\r\n      fixedHeader: {\r\n        backgroundColor: '#12ACC6',\r\n      }\r\n    },\r\n    MUIDataTablePagination: {\r\n      root: {\r\n        backgroundColor: useStyles.tableFooter,\r\n        color: useStyles.textPrimary\r\n      }\r\n    },\r\n    // handles row hover color and selected row color\r\n    MuiTableRow: {\r\n      // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\r\n      root: {\r\n        '&$selected': {\r\n          backgroundColor: \"lightgrey\"\r\n        }\r\n      },\r\n      footer: {\r\n        '& td': {\r\n          padding: \"0px\",\r\n          margin: \"0px\"\r\n        }\r\n      }\r\n    },\r\n    MuiTypography: {\r\n      body2: {\r\n        fontSize: \"10px\"\r\n      }\r\n    },\r\n    MuiTablePagination: {\r\n      selectRoot: {\r\n        marginRight: \"5px\",\r\n        marginLeft: \"0px\"\r\n      },\r\n      actions: {\r\n        marginLeft: \"5px\"\r\n      }\r\n    },\r\n    MainInputBase: {\r\n      input: {\r\n        fontSize: \"10px\"\r\n      }\r\n    },\r\n    MuiToolbar: {\r\n      gutters: {\r\n        '& *': {\r\n          paddingLeft: \"0px\"\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport default function Tables(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [dataTableData, setDataTableData] = useState([])\r\n  const [indexData, setIndexData] = useState({})\r\n  const [open, setOpen] = useState(false)\r\n  const [edit, setEdit] = useState(false)\r\n  const [openAdd, setOpenAdd] = useState(false)\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [rowIndex, setRowIndex] = useState()\r\n  const [viewIndex, setViewIndex] = useState()\r\n  const [role, setRole] = useState([])\r\n  const [checkListID, setCheckListID] = useState('')\r\n  const [editCheckList, setEditCheckList] = useState('')\r\n  const [addUserAlert, setAddUserAlert] = useState('')\r\n  const [openAlert, setOpenAlert] = useState(false)\r\n  const [failure, setFailure] = useState(false)\r\n  const [businessID, setBusinessID] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    function getData() {\r\n      axiosInstance.get('api/Check_List_Master.svc/get_checklist/all')\r\n        // axios.get('http://betaapp.hygienequotient.com/api/Check_List_Master.svc/get_checklist/all')\r\n        .then(res => {\r\n          setDataTableData([...res.data.data])\r\n\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    getData()\r\n  }, [])\r\n  const columns = [\r\n    {\r\n      name: \"Edit\",\r\n      // label: \"EDIT\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            open === true && tableMeta.rowIndex === 0\r\n              ? !isLoading\r\n                ? <IconButton color=\"primary\" size=\"small\" >\r\n                  <div style={{ display: \"flex\" }}>\r\n                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\r\n                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\r\n                  </div>\r\n                </IconButton>\r\n                : <CircularProgress size={20} style={{ color: \"blue\" }} />\r\n              : edit === true && tableMeta.rowIndex === rowIndex\r\n                ? !isLoading\r\n                  ? <IconButton color=\"primary\" size=\"small\" >\r\n                    <div style={{ display: \"flex\" }}>\r\n                      <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\r\n                      <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\r\n                    </div>\r\n                  </IconButton>\r\n                  : <CircularProgress size={20} style={{ color: \"blue\" }} />\r\n                : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\r\n                  <EditRoundedIcon\r\n\r\n                    onClick={() => {\r\n                      return (\r\n                        handleEdit(tableMeta, tableMeta.rowIndex)\r\n                      )\r\n                    }}\r\n                  />\r\n                </IconButton>\r\n          );\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: \"CHECK_LIST_NAME\",\r\n      label: \"Checklist Name\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => (\r\n          open && tableMeta.rowIndex === 0\r\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n            : edit === true && tableMeta.rowIndex === rowIndex\r\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\r\n              : <div>{value}</div>\r\n        )\r\n      }\r\n    },\r\n\r\n    {\r\n      name: \"View\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: true,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <IconButton\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              disabled={open || edit ? true : false}\r\n            >\r\n              <VisibilityRounded\r\n                onClick={() => handleView(tableMeta)}\r\n              />\r\n            </IconButton>\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n\r\n  ]\r\n  const checkValidity = yup.object().shape({\r\n    \"CHECK_LIST_NAME\": yup\r\n      .string()\r\n      .required('Checklist Name is required')\r\n  })\r\n  const yupOptions = {\r\n    strict: false,\r\n    abortEarly: false, // return all errors\r\n  }\r\n  const getChecklistNames = () => {\r\n    axiosInstance.get('api/Check_List_Master.svc/get_checklist/all')\r\n      // axios.get('http://betaapp.hygienequotient.com/api/Check_List_Master.svc/get_checklist/all')\r\n      .then(res => setDataTableData([...res.data.data]))\r\n      .catch(err => console.log(err))\r\n  }\r\n  const handleView = (data) => {\r\n    console.log(data)\r\n    console.log(data['tableData'])\r\n    console.log(data['tableData'][data['rowIndex']]['CHECK_LIST_ID'])\r\n    setViewIndex(data['rowIndex'])\r\n    setCheckListID(data['tableData'][data['rowIndex']]['CHECK_LIST_ID'])\r\n  }\r\n  const handleClick = () => {\r\n    const newRowData = {\r\n      \"CHECK_LIST_NAME\": \"\",\r\n      \"CHECKLIST_TYPE\": \"Public\",\r\n    }\r\n    setDataTableData([newRowData, ...dataTableData])\r\n    setOpen(true)\r\n    setRowIndex(\"0\")\r\n  }\r\n  const handleAlertClose = () => {\r\n    setOpenAlert(false)\r\n  }\r\n  const handleEdit = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta.tableData[rowIndex]['CHECK_LIST_ID'])\r\n    setEditCheckList(tableMeta.tableData[rowIndex]['CHECK_LIST_ID'])\r\n    setEdit(true)\r\n    setRowIndex(rowIndex)\r\n  }\r\n  const handleDelete = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta)\r\n    const obj = {\r\n      'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\r\n      'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\r\n    }\r\n\r\n    // axiosInstance.post('api/Question_Management.svc/delete_question', obj)\r\n    //     .then(res => alert(\"Question deleted successfully\"))\r\n    //     .then(getData())\r\n    //     .catch(err => console.log(err))\r\n\r\n    // function getData() {\r\n    //     axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\r\n    //         .then(res => setDataTableData([...res.data.data]))\r\n    //         .catch(err => console.log(err))\r\n    // }\r\n\r\n  }\r\n  const handleCancel = () => {\r\n    setRowIndex()\r\n    setEdit(false)\r\n  }\r\n  const handleCancelAdd = (rowIndex) => {\r\n    setOpen(false)\r\n    console.log(rowIndex)\r\n    // console.log(dataTableData[rowIndex])\r\n    dataTableData.shift()\r\n    setRowIndex()\r\n  }\r\n  const handleUpdateAdd = (tableMeta, rowIndex) => {\r\n\r\n    console.log(tableMeta)\r\n    console.log(tableMeta.rowData)\r\n    let updatedata = tableMeta.rowData\r\n    let newDataArr = updatedata.filter((item, index) => index > 0)\r\n    console.log(newDataArr)\r\n    // let selectedRole = role && role.find(item => item.text === newDataArr[4])\r\n    // console.log(selectedRole, selectedRole.id)\r\n    let newObj = {\r\n      \"CHECK_LIST_NAME\": newDataArr[0],\r\n\r\n    }\r\n    let obj = {\r\n      \"CHECK_LIST_NAME\": newDataArr[0],\r\n      \"CHECKLIST_TYPE\": \"Public\",\r\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\r\n    }\r\n    checkValidity.validate(obj, yupOptions)\r\n      .then(() => {\r\n        setIsLoading(true)\r\n        axiosInstance.post('api/Check_List_Master.svc/insert_checklist', obj)\r\n          // axios.post('http://betaapp.hygienequotient.com/api/Check_List_Master.svc/insert_checklist', obj)\r\n          .then(res => {\r\n            if (res.data.response[0]['CODE'] === \"200\") {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(false)\r\n              dataTableData[rowIndex] = newObj\r\n              setDataTableData([...dataTableData])\r\n              getChecklistNames()\r\n              setRowIndex()\r\n              setOpen(false)\r\n            }\r\n            else {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(true)\r\n              setRowIndex()\r\n              setOpen(false)\r\n            }\r\n          })\r\n          .catch(err => {\r\n            setIsLoading(false)\r\n            setAddUserAlert(err)\r\n            setOpenAlert(true)\r\n            setFailure(true)\r\n            setRowIndex()\r\n            setOpen(false)\r\n          })\r\n      })\r\n      .catch(function (err) {\r\n        setIsLoading(false)\r\n        let errArray = err.inner.map(e => e['message'])\r\n        console.log(errArray)\r\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\r\n        setOpenAlert(true)\r\n        setFailure(true)\r\n        setRowIndex()\r\n        setOpen(false)\r\n        getChecklistNames()\r\n      });\r\n    console.log('add :', obj)\r\n\r\n  }\r\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\r\n    console.log(tableMeta.rowData)\r\n    console.log(tableMeta)\r\n    let updatedata = tableMeta.rowData\r\n    let newDataArr = updatedata.filter((item, index) => index > 0)\r\n    // let selectedRole = role.find(item => item.text === newDataArr[4])\r\n    // console.log(selectedRole, selectedRole.id)\r\n    console.log(\"update\", newDataArr)\r\n\r\n    let obj = {\r\n      \"CHECK_LIST_NAME\": newDataArr[0],\r\n      \"CHECKLIST_TYPE\": \"Public\",\r\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\r\n      \"CHECK_LIST_ID\": editCheckList\r\n    }\r\n    console.log('edit :', obj)\r\n    // // axiosInstance.post('api/Question_Management.svc/insert_question', obj)\r\n    checkValidity.validate(obj, yupOptions)\r\n      .then(() => {\r\n        setIsLoading(true)\r\n        axiosInstance.post('api/Check_List_Master.svc/update_checklist', obj)\r\n          // axios.post('http://betaapp.hygienequotient.com/api/Check_List_Master.svc/update_checklist', obj)\r\n          .then(res => {\r\n            if (res.data.response[0]['CODE'] === \"200\") {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(false)\r\n              setEdit(false)\r\n              setRowIndex()\r\n              getChecklistNames()\r\n            }\r\n            else {\r\n              setIsLoading(false)\r\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\r\n              setOpenAlert(true)\r\n              setFailure(true)\r\n              setEdit(false)\r\n              setRowIndex()\r\n            }\r\n          })\r\n          .catch(err => {\r\n            setIsLoading(false)\r\n            setAddUserAlert(err)\r\n            setOpenAlert(true)\r\n            setFailure(true)\r\n            setEdit(false)\r\n            setRowIndex()\r\n          })\r\n      })\r\n      .catch(function (err) {\r\n        setIsLoading(false)\r\n        let errArray = err.inner.map(e => e['message'])\r\n        console.log(errArray)\r\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\r\n        setOpenAlert(true)\r\n        setFailure(true)\r\n        getChecklistNames()\r\n        setEdit(false)\r\n        setRowIndex()\r\n      });\r\n  }\r\n  const getCheckListID = () => {\r\n    let checkID = checkListID\r\n    return checkID\r\n  }\r\n  const handleCloseAddButton = () => {\r\n    setOpenAdd(false)\r\n  }\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenModal(true)\r\n  }\r\n  const handleCloseModal = () => {\r\n    setOpenModal(false)\r\n  }\r\n  console.log(dataTableData)\r\n  return (\r\n    <>\r\n\r\n\r\n      <Grid item xs={3}>\r\n        <MuiThemeProvider theme={theme}>\r\n          <MUIDataTable\r\n            title=\"Checklist\"\r\n            data={dataTableData}\r\n            columns={columns}\r\n            options={{\r\n              filter: false,\r\n              print: false,\r\n              viewColumns: false,\r\n              selectableRows: 'none',\r\n              filterType: 'dropdown',\r\n              responsive: 'standard',\r\n              rowsPerPage: 5,\r\n              rowsPerPageOptions: [5, 10, 15, 100],\r\n              download: false,\r\n              downloadOptions: {\r\n                filename: 'tableDownload.csv',\r\n                separator: ',',\r\n                filterOptions: {\r\n                  useDisplayedColumnsOnly: true || false,\r\n                  useDisplayedRowsOnly: true || true\r\n                } || false\r\n              },\r\n              tableBodyHeight: '270px',\r\n              tableBodyMaxHeight: \"\",\r\n              setTableProps: () => {\r\n                return {\r\n                  padding: 'default'\r\n                }\r\n              },\r\n              setRowProps: (row, dataIndex, rowIndex) => {\r\n                console.log(row, dataIndex, rowIndex)\r\n                console.log(viewIndex)\r\n                if (viewIndex === rowIndex) {\r\n                  return {\r\n                    style: { background: \"rgb(220,220,220)\" }\r\n                  };\r\n                }\r\n              },\r\n              customToolbar: () => {\r\n                return (\r\n                  <>\r\n                    <IconButton onClick={() => handleClick()} disabled={open ? true : false}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        style={{ fontSize: \"9px\" }}\r\n                        disabled={open ? true : false}\r\n                        startIcon={<AddCircleIcon fontSize=\"8px\" />}\r\n                      >\r\n                        Add\r\n                        </Button>\r\n                    </IconButton>\r\n                  </>\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        </MuiThemeProvider>\r\n      </Grid>\r\n      <Grid item xs={9}>\r\n        <Quest checkListID={checkListID} />\r\n      </Grid>\r\n      {openAlert ?\r\n        failure === false ?\r\n          <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\r\n          : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\r\n        : \"\"}\r\n    </>\r\n  );\r\n}\r\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource3.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource.js",["1621"],"const data = \r\n[\r\n\r\n{\r\n    \"Checklis_Name\":\"Checklist 1\",\r\n    \"sr_no\":\"1\",\r\n    \"Question\":\"Question 1\",\r\n    \"Section\":\"Section1\",\r\n    \"Criticality\":\"critical\",\r\n    \"weight\":\"4\",\r\n    \"Site_Notes\":\"Please add two photos\",\r\n    \"Qc_Notes\":\"Please add two photos\",\r\n},\r\n\r\n{\r\n    \"Checklis_Name\":\"Checklist 2\",\r\n    \"sr_no\":\"2\",\r\n    \"Question\":\"Question 2\",\r\n    \"Section\":\"Section2\",\r\n    \"Criticality\":\"minor\",\r\n    \"weight\":\"2\",\r\n    \"Site_Notes\":\"Please add four photos\",\r\n    \"Qc_Notes\":\"Please add four photos\",\r\n},\r\n\r\n{\r\n    \"Checklis_Name\":\"Checklist 3\",\r\n    \"Checklis_Name\":\"Checklist 3\",\r\n    \"sr_no\":\"3\",\r\n    \"Question\":\"Question 3\",\r\n    \"Section\":\"Section3\",\r\n    \"Criticality\":\"critical\",\r\n    \"weight\":\"4\",\r\n    \"Site_Notes\":\"Please add two photos\",\r\n    \"Qc_Notes\":\"Please add two photos\",\r\n}\r\n\r\n\r\n]\r\n\r\nexport default data;\r\n",["1622","1623"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/datasource2.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Tablesx.js",["1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport { CircularProgress, Typography } from '@material-ui/core';\n\n\n// components\nimport AddSection from '../AddSection/AddSection'\nimport NotifyAlert from \"../../../../components/ModalAlert/NotifyAlert\";\nimport FailureAlert from \"../../../../components/ModalAlert/FailureAlert\";\nimport axios from \"axios\";\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n// data\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MuiPaper: {\n      rounded: {\n        borderRadius: \"20px\"\n      }\n    },\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n      headerCell: {\n        backgroundColor: '#12acc6'\n      }\n    },\n\n    // MUIDataTableBodyCell: {\n    //   root: {\n    //     padding: \"5px 3px\",\n    //     '&:nth-child(3)': { textAlign: 'center' },\n    //     '&:nth-child(6)': { textAlign: 'center' },\n    //   }\n    // },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tablesx(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [edit, setEdit] = useState(false)\n  const [openModal, setOpenModal] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [openAdd, setOpenAdd] = useState(false)\n  const [section, setSection] = useState([])\n  const [questionID, setQuestionID] = useState('')\n  const [addUserAlert, setAddUserAlert] = useState('')\n  const [openAlert, setOpenAlert] = useState(false)\n  const [failure, setFailure] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  // const [sectionValue, setSectionValue] = useState('')\n\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const sectionText = section.map(item => item.text)\n\n\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get(`api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n        // axios.get(`http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n        .then(res => {\n          console.log(res.data)\n          setDataTableData([...res.data.data])\n        })\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [props.checkListID])\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n        // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n        .then(res => setSection([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: true,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            open === true && tableMeta.rowIndex === 0\n              ? !isLoading\n                ? <IconButton color=\"primary\" size=\"small\" >\n                  <div style={{ display: \"flex\" }}>\n                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n                  </div>\n                </IconButton>\n                : <CircularProgress size={20} style={{ color: \"blue\" }} />\n              : edit === true && tableMeta.rowIndex === rowIndex\n                ? !isLoading\n                  ? <IconButton color=\"primary\" size=\"small\" >\n                    <div style={{ display: \"flex\" }}>\n                      <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                      <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                    </div>\n                  </IconButton>\n                  : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\n                  <EditRoundedIcon\n\n                    onClick={() => {\n                      return (\n                        handleEdit(tableMeta, tableMeta.rowIndex)\n                      )\n                    }}\n                  />\n                </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"POSITION\",\n      label: \"Sr. No\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <div>{dataTableData.length}</div>\n            : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"QUESTION_TEXT\",\n      label: \"Question\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"SECTION\",\n      label: \"Section\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return open && tableMeta.rowIndex === 0\n            ? <FormControl>\n              <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                <MenuItem value=\"\"><em>None</em></MenuItem>\n                {sectionText && sectionText.map((item, index) =>\n                  <MenuItem key={index} value={item}>{item}</MenuItem>\n                )}\n              </Select>\n            </FormControl>\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControl>\n                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                  <MenuItem value=\"\"><em>None</em></MenuItem>\n                  {sectionText && sectionText.map((item, index) =>\n                    <MenuItem key={index} value={item}>{item}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n              : <div>{value}</div>\n\n\n        }\n      }\n    },\n    {\n      name: \"ANSWER_TYPE\",\n      label: \"Ans Type\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return open && tableMeta.rowIndex === 0\n            ? <FormControl>\n              <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                <MenuItem value=\"YN\">Yes/No</MenuItem>\n                <MenuItem value=\"YNN\">Yes/No/Not Applicable</MenuItem>\n                <MenuItem value=\"C\">Compliance</MenuItem>\n                <MenuItem value=\"CNNA\">Compliance/Non-Compliance/NA</MenuItem>\n              </Select>\n            </FormControl>\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControl>\n                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                  <MenuItem value=\"YN\">Yes/No</MenuItem>\n                  <MenuItem value=\"YNN\">Yes/No/Not Applicable</MenuItem>\n                  <MenuItem value=\"C\">Compliance</MenuItem>\n                  <MenuItem value=\"CNNA\">Compliance/Non-Compliance/NA</MenuItem>\n                </Select>\n              </FormControl>\n              : <div>{handleAnsType(value)}</div>\n\n\n        }\n      }\n    },\n    {\n      name: \"WEIGHTAGE\",\n      label: \"Weightage\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"NUMBER_OF_IMG\",\n      label: \"No.Of Images\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"QUESTION_INFORMATION\",\n      label: \"Info\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n\n    {\n      name: \"QC_NOTES\",\n      label: \"Qc Notes\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n\n\n\n\n  ]\n\n  const checkValidity = yup.object().shape({\n    \"QUESTION_TEXT\": yup\n      .string()\n      .required(),\n    \"SECTION_ID\": yup\n      .string()\n      .required('Section is required'),\n    \"ANSWER_TYPE\": yup\n      .string()\n      .required('Answer Type is required'),\n    \"WEIGHTAGE\": yup\n      .number()\n      .transform(value => (isNaN(value) ? undefined : value))\n      .positive()\n      .integer()\n      .required('Weightage is required'),\n    \"NUMBER_OF_IMG\": yup\n      .number()\n      .positive()\n      .integer()\n      .transform(value => (isNaN(value) ? undefined : value))\n      .required('Number of Images are required'),\n    \"QUESTION_INFORMATION\": yup\n      .string()\n      .required('Question Information is required'),\n    \"QC_NOTES\": yup\n      .string()\n      .required('Question Notes are required'),\n  },\n    [[\"QUESTION_TEXT\", \"SECTION\", \"ANSWER_TYPE\", \"WEIGHTAGE\", \"NUMBER_OF_IMG\", \"QUESTION_INFORMATION\", \"QC_NOTES\"]]\n  )\n  const yupOptions = {\n    strict: false,\n    abortEarly: false, // return all errors\n  }\n\n  const getData = () => {\n    axiosInstance.get(`api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n      // axios.get(`http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n      .then(res => setDataTableData([...res.data.data]))\n      .catch(err => console.log(err))\n  }\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n    setQuestionID(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n    setEdit(true)\n    setRowIndex(rowIndex)\n\n  }\n  const handleDelete = (tableMeta, rowIndex) => {\n    console.log(tableMeta)\n    const obj = {\n      'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\n      'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\n    }\n\n    // axiosInstance.post('api/Question_Management.svc/delete_question', obj)\n    //     .then(res => alert(\"Question deleted successfully\"))\n    //     .then(getData())\n    //     .catch(err => console.log(err))\n\n    // function getData() {\n    //     axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\n    //         .then(res => setDataTableData([...res.data.data]))\n    //         .catch(err => console.log(err))\n    // }\n  }\n  const handleClickQuestion = () => {\n    const newRowData = {\n      ANSWER_TYPE: \"\",\n      CHECK_LIST_ID: \"\",\n      CREATED_BY: \"\",\n      NUMBER_OF_IMG: \"\",\n      POSITION: \"\",\n      QUESTION_INFORMATION: \"\",\n      QUESTION_TEXT: \"\",\n      SECTION: \"\",\n      SECTION_ID: \"\",\n      WEIGHTAGE: \"\",\n      QC_NOTES: \"\",\n    }\n    setDataTableData([newRowData, ...dataTableData])\n    setOpen(true)\n    setRowIndex(\"0\")\n    console.log(props)\n  }\n  const handleAnsType = (value) => {\n    switch (value) {\n      case \"YN\":\n        return \"Yes/No\";\n      case \"YNN\":\n        return \"Yes/No/NA\";\n      case \"C\":\n        return \"Compliance\";\n      case \"CNNA\":\n        return \"Compliance/Non-Compliance/NA\";\n      default: return;\n    }\n  }\n  const handleCancel = () => {\n    setEdit(false)\n    setRowIndex()\n  }\n  const handleCancelAdd = (rowIndex) => {\n    setOpen(false)\n    console.log(rowIndex)\n    // console.log(dataTableData[rowIndex])\n    dataTableData.shift()\n    setRowIndex()\n  }\n  const handleClickChecklist = () => {\n\n  }\n  const handleClickSection = () => {\n    setOpenModal(true)\n  }\n  const handleUpdateAdd = (tableMeta, rowIndex) => {\n    console.log(tableMeta)\n    console.log(tableMeta.rowData)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    console.log(newDataArr)\n    let sectionSelected = section && section.find(item => item.text === newDataArr[2])\n    console.log(sectionSelected ? sectionSelected.id : \"undefined\")\n\n    let obj = {\n      POSITION: dataTableData.length,\n      QUESTION_TEXT: newDataArr[1],\n      SECTION_ID: sectionSelected ? sectionSelected.id : \"\",\n      ANSWER_TYPE: newDataArr[3],\n      WEIGHTAGE: newDataArr[4],\n      QUESTION_INFORMATION: newDataArr[6],\n      CHECK_LIST_ID: props.checkListID,\n      CREATED_BY: \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n      NUMBER_OF_IMG: newDataArr[5],\n      QC_NOTES: newDataArr[7],\n    }\n    console.log(obj)\n    checkValidity.validate(obj, yupOptions)\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Master_Question_Bank.svc/insert_question`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/insert_question', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              setOpen(false)\n              getData()\n            }\n            else {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              setRowIndex()\n              setOpen(false)\n              getData()\n            }\n          })\n          .catch(err => {\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setRowIndex()\n            setOpen(false)\n            setFailure(true)\n            getData()\n          })\n          setIsLoading(false)\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => e['message'])\n        console.log(errArray)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setOpen(false)\n        setRowIndex()\n        getData()\n      });\n    console.log(obj)\n  }\n\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    let sectionSelected = section && section.find(item => item.text === newDataArr[2])\n    console.log(\"update\", newDataArr)\n    console.log(sectionSelected ? sectionSelected.id : \"undefined\")\n    // setRowIndex()\n    let obj = {\n      \"QUESTION_TEXT\": newDataArr[1],\n      \"SECTION_ID\": sectionSelected ? sectionSelected.id : \"\",\n      \"ANSWER_TYPE\": newDataArr[3],\n      \"NUMBER_OF_IMG\": newDataArr[5],\n      \"QUESTION_INFORMATION\": newDataArr[6],\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n      \"CHECK_LIST_ID\": props.checklistID,\n      \"WEIGHTAGE\": newDataArr[4],\n      \"POSITION\": newDataArr[0],\n      \"QUESTION_ID\": questionID,\n      \"QC_NOTES\": newDataArr[7],\n\n    }\n    console.log(obj)\n    checkValidity.validate(obj, yupOptions)\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Master_Question_Bank.svc/update_question`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/update_question', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              setEdit(false)\n              getData()\n            }\n            else {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              setRowIndex()\n              setEdit(false)\n              getData()\n            }\n          })\n          .catch(err => {\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setRowIndex()\n            setEdit(false)\n            setFailure(true)\n            getData()\n          })\n          setIsLoading(false)\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => e['message'])\n        console.log(errArray)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setEdit(false)\n        setRowIndex()\n        getData()\n      });\n  }\n  const handleSectionUpdate = () => {\n    function getData() {\n      axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n        // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n        .then(res => setSection([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleAlertClose = () => {\n    setOpenAlert(false)\n  }\n  const handleOpenModal = () => {\n    setOpenModal(true)\n  }\n  const handleCloseModal = () => {\n    setOpenModal(false)\n\n  }\n  console.log(dataTableData)\n  console.log(props.checkListID)\n  // console.log(checkListID)\n  console.log(section)\n  // console.log('sectionvalue', sectionValue)\n  return (\n    <>\n\n\n      <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title={props.checkListID ? \"Question List\" : \"Select View from Checklist Table\"}\n              data={dataTableData}\n              columns={columns}\n              options={{\n                print: props.checkListID ? true : false,\n                filter: props.checkListID ? true : false,\n                search: props.checkListID ? true : false,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                viewColumns: props.checkListID ? true : false,\n                rowsPerPage: 5,\n                rowsPerPageOptions: [5, 10, 15, 100],\n                download: props.checkListID ? true : false,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '270px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                customToolbar: () => {\n                  return (\n                    <>\n                      <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        style={{ fontSize: \"8px\", marginRight: \"1px\" }}\n                        disabled={open || edit || !props.checkListID ? true : false}\n                        onClick={() => handleClickQuestion()}\n                        startIcon={<AddCircleIcon fontSize=\"small\" />}\n                      >\n                        Add New Question\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        disabled={open || edit || !props.checkListID ? true : false}\n                        onClick={() => handleClickSection()}\n                        style={{ fontSize: \"8px\" }}\n                        startIcon={<AddCircleIcon fontSize=\"small\" />}\n                      >\n                        Add Section\n                      </Button>\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        {openModal ? <AddSection open={openModal} close={handleCloseModal} update={handleSectionUpdate} /> : \"\"}\n        {openAlert ?\n          failure === false ?\n            <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\n            : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\n          : \"\"}\n      </Grid>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/styletheme.js",["1641","1642"],"import React from \"react\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiPaper: {\n            rounded: {\n                borderRadius: \"20px\"\n            }\n        },\n        // MuiToolbar: {\n        //     regular:{\n        //         backgroundColor:\"rgb(0, 204, 204)\",\n        //     }\n            \n        // },\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: 'white',\n                padding: \"5px 10px\",\n            },\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        // MUIDataTablePagination: {\n        //     root: {\n        //         backgroundColor: useStyles.tableFooter,\n        //         color: useStyles.textPrimary\n        //     }\n        // },\n        // // handles row hover color and selected row color\n        // MuiTableRow: {\n        //     hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n        //     root: {\n        //         '&$selected': {\n        //             backgroundColor: useStyles.tableRowSelectColor\n        //         }\n        //     }\n        // },\n    },\n})\nexport default theme","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/ViewSiteTable.js",["1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AlarmAddIcon from '@material-ui/icons/AlarmAdd';\n\n// components\nimport theme from \"./styletheme\"\n\n// data\n\n//parser\nimport parse from 'html-react-parser';\nimport NotifyAlert from \"../../../../components/ModalAlert/NotifyAlert\";\nimport { faLaptopHouse } from \"@fortawesome/free-solid-svg-icons\";\nimport { mdiTrumpet } from \"@mdi/js\";\nimport FailureAlert from \"../../../../components/ModalAlert/FailureAlert\";\nimport AddUser from \"../AddUser/AddUser\";\nimport { ErrorMessage } from \"formik\";\n// import TimeSlot from './TimeSlot';\nimport AddTimeSlot from \"./Site/AddTimeSlot\";\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\nimport AuditSlots from \"../../../auditReport/AuditSlots\";\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\n\n\nexport default function ViewSiteTable(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [openModal, setOpenModal] = useState(false)\n  const [openTimeSlot, setOpenTimeSlot] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [open, setOpen] = useState(false)\n  const [edit, setEdit] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [role, setRole] = useState([])\n  const [siteID, setSiteID] = useState('')\n  const [addUserAlert, setAddUserAlert] = useState('')\n  const [openAlert, setOpenAlert] = useState(false)\n  const [failure, setFailure] = useState(false)\n  const [errorMsg, setErrorMsg] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [viewOptions, setViewOptions] = useState(false)\n  const [indexValue, setIndexValue] = useState()\n  var timerId\n\n\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const roleText = role.map(item => item.text)\n  const masterID = window.location.href.split('/').slice(-1).pop()\n\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get(`api/Sites_Master.svc/sites_list/${props.businessID}`)\n        // axios.get(`http://betaapp.hygienequotient.com/api/Sites_Master.svc/sites_list/${props.businessID}`)\n        .then(res => setDataTableData([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n\n    getData()\n  }, [props.businessID])\n\n  const columns = [\n    {\n      name: \"\",\n      options: {\n        filter: false,\n        sort: false\n      }\n    },\n    {\n      name: \"RES_ID\",\n      label: \"Res_ID\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"NAME\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"CONTACT_PERSON\",\n      label: \"Contact Person\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"MOBILE_NO\",\n      label: \"Mobile No.\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"EMAIL\",\n      label: \"Email\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} margin='dense' />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    // {\n    //   name: \"Edit\",\n    //   // label: \"EDIT\",\n    //   options: {\n    //     filter: false,\n    //     sort: false,\n    //     empty: true,\n    //     customBodyRender: (value, tableMeta, updateValue) => {\n    //       return (\n    //         open === true && tableMeta.rowIndex === 0\n    //           ? !isLoading\n    //             ? <IconButton color=\"primary\" size=\"small\" >\n    //               <div style={{ display: \"flex\" }}>\n    //                 <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n    //                 <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n    //               </div>\n    //             </IconButton>\n    //             : <CircularProgress size={20} style={{ color: \"blue\" }} />\n    //           : edit === true && tableMeta.rowIndex === rowIndex\n    //             ? !isLoading\n    //               ? <IconButton color=\"primary\" size=\"small\" >\n    //                 <div style={{ display: \"flex\" }}>\n    //                   <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n    //                   <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n    //                 </div>\n    //               </IconButton>\n    //               : <CircularProgress size={20} style={{ color: \"blue\" }} />\n    //             : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\n    //               <EditRoundedIcon\n\n    //                 onClick={() => {\n    //                   return (\n    //                     handleEdit(tableMeta, tableMeta.rowIndex)\n    //                   )\n    //                 }}\n    //               />\n    //             </IconButton>\n    //       );\n    //     }\n    //   }\n    // },\n    {\n      name: \"Edit/TimeSlot/ User/ Dashboard\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <>\n              {open === true && tableMeta.rowIndex === 0\n                ? !isLoading\n                  ?\n                  <IconButton color=\"primary\" size=\"small\" >\n                    <div style={{ display: \"flex\" }}>\n                      <Tooltip title=\"Submit\"><CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} /></Tooltip>\n                      <Tooltip title=\"Cancel\"><CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} /></Tooltip>\n                    </div>\n                  </IconButton>\n\n                  : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                : edit === true && tableMeta.rowIndex === rowIndex\n                  ? !isLoading\n                    ? <IconButton color=\"primary\" size=\"small\" >\n                      <div style={{ display: \"flex\" }}>\n                        <Tooltip title=\"Submit\"><CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} /></Tooltip>\n                        <Tooltip title=\"Cancel\"><CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} /></Tooltip>\n                      </div>\n                    </IconButton>\n                    : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                  : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\n                    <Tooltip title=\"Edit\">\n                      <EditRoundedIcon\n                        onClick={() => {\n                          return (\n                            handleEdit(tableMeta, tableMeta.rowIndex)\n                          )\n                        }}\n                      />\n                    </Tooltip>\n                  </IconButton>\n              }\n              <Tooltip title=\"Time Slot\">\n                <IconButton\n                  color=\"primary\"\n                  size=\"small\"\n                  onClick={() => handleAddTimeSlot(tableMeta, tableMeta.rowIndex)}\n                  disabled={open || edit ? true : false}\n                >\n                  <AlarmAddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"User\">\n                <IconButton\n                  color=\"primary\"\n                  size=\"small\"\n                  onClick={() => handleUserTable(tableMeta, tableMeta.rowIndex)}\n                  disabled={open || edit ? true : false}\n                >\n                  <AccountCircleIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Site Dashboard\">\n                <IconButton\n                  color=\"primary\"\n                  size=\"small\"\n                  disabled={open || edit ? true : false}\n                  onClick={() => handleSiteDashboard(tableMeta, tableMeta.rowIndex)}\n                >\n                  <DashboardIcon />\n                </IconButton>\n              </Tooltip>\n              {/* <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                style={{ fontSize: \"10px\" }}\n                disabled={open || edit ? true : false}\n                onClick={() => handleAddTimeSlot(tableMeta, tableMeta.rowIndex)}\n              >\n                TimeSlot\n            </Button>\n              <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                style={{ fontSize: \"10px\", marginLeft: \"3px\", marginRight: \"3px\" }}\n                onClick={() => handleUserTable(tableMeta, tableMeta.rowIndex)}\n                disabled={open || edit ? true : false}\n              // startIcon={<AddCircleIcon />}\n              >\n                User\n            </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                style={{ fontSize: \"10px\" }}\n                disabled={open || edit ? true : false}\n                onClick={() => handleSiteDashboard(tableMeta, tableMeta.rowIndex)}\n              >\n                Dashboard\n            </Button> */}\n            </>\n          );\n        }\n      }\n    },\n  ]\n\n  const checkValidity = yup.object().shape({\n    \"RES_ID\": yup\n      .string()\n      .required('Res ID is required'),\n    \"EMAIL\": yup\n      .string()\n      .email(\"Email ID is not valid\")\n      .required(),\n    \"NAME\": yup\n      .string()\n      .required('Name is required'),\n    \"MOBILE_NO\": yup\n      .string()\n      .matches(mobileRegex, 'Mobile number is not valid'),\n    // .positive()\n    // .integer()\n    // .number()\n    \"CONTACT_PERSON\": yup\n      .string()\n      .required('Contact Person is required'),\n  },\n    [[\"RES_ID\", \"EMAIL\", \"NAME\", \"MOBILE_NO\", \"CONTACT_PERSON\"]]\n  )\n  const yupOptions = {\n    strict: false,\n    abortEarly: false, // return all errors\n  }\n  const handleAlertClose = () => {\n    setOpenAlert(false)\n  }\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    console.log(tableMeta.tableData[rowIndex]['SITE_GUID'])\n    setSiteID(tableMeta.tableData[rowIndex]['SITE_GUID'])\n    setEdit(true)\n    setRowIndex(rowIndex)\n  }\n  const handleDelete = (tableMeta, rowIndex) => {\n    console.log(tableMeta)\n    const obj = {\n      'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\n      'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\n    }\n\n    // axiosInstance.post('api/Question_Management.svc/delete_question', obj)\n    //     .then(res => alert(\"Question deleted successfully\"))\n    //     .then(getData())\n    //     .catch(err => console.log(err))\n\n    // function getData() {\n    //     axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\n    //         .then(res => setDataTableData([...res.data.data]))\n    //         .catch(err => console.log(err))\n    // }\n\n  }\n  const handleClick = () => {\n    const newRowData = {\n      \"RES_ID\": \"\",\n      \"EMAIL\": \"\",\n      \"MOBILE_NO\": \"\",\n      \"NAME\": \"\",\n      \"CONTACT_PERSON\": \"\"\n    }\n    setDataTableData([newRowData, ...dataTableData])\n    setOpen(true)\n    setRowIndex(\"0\")\n  }\n\n  const handleSiteDashboard = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    history.push(`/app/siteDashboard/${tableMeta.tableData[rowIndex]['SITE_GUID']}`)\n  }\n  const handleAddTimeSlot = (tableMeta, rowIndex) => {\n\n    setSiteID(tableMeta.tableData[rowIndex]['SITE_GUID'])\n    setOpenTimeSlot(true)\n  }\n  const handleCancel = () => {\n    setEdit(false)\n    setRowIndex()\n  }\n  const handleCancelAdd = (rowIndex) => {\n    setOpen(false)\n    console.log(rowIndex)\n    // console.log(dataTableData[rowIndex])\n    dataTableData.shift()\n    setRowIndex()\n  }\n  const getSiteList = () => {\n    axiosInstance.get(`api/Sites_Master.svc/sites_list/${props.businessID}`)\n      // axios.get(`http://betaapp.hygienequotient.com/api/Sites_Master.svc/sites_list/${props.businessID}`)\n      .then(res => {\n        setDataTableData([...res.data.data])\n      })\n      .catch(err => console.log(err))\n  }\n  const handleUpdateAdd = (tableMeta, rowIndex) => {\n\n    console.log(tableMeta)\n    console.log(tableMeta.rowData)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    console.log(newDataArr)\n    // let selectedRole = role && role.find(item => item.text === newDataArr[4])\n    // console.log(selectedRole, selectedRole.id)\n\n    let obj = {\n      \"BUSINESS_GUID\": props.businessID,\n      \"RES_ID\": newDataArr[0],\n      \"NAME\": newDataArr[1],\n      \"MOBILE_NO\": newDataArr[3],\n      \"EMAIL\": newDataArr[4],\n      \"CONTACT_PERSON\": newDataArr[2],\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n    }\n    checkValidity.validate(obj, yupOptions)\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Sites_Master.svc/insert_site`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Sites_Master.svc/insert_site', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setIsLoading(false)\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              setOpen(false)\n              getSiteList()\n              console.log('no error')\n            }\n            else {\n              setIsLoading(false)\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              setOpen(false)\n              setRowIndex()\n              getSiteList()\n              console.log(res.data.response[0])\n            }\n          })\n          .catch(err => {\n            setIsLoading(false)\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setFailure(true)\n            setOpen(false)\n            setRowIndex()\n            getSiteList()\n          })\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => e['message'])\n        console.log(errArray)\n        setIsLoading(false)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setOpen(false)\n        getSiteList()\n      });\n    console.log('add :', obj)\n  }\n\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    // let selectedRole = role.find(item => item.text === newDataArr[4])\n    // console.log(selectedRole, selectedRole.id)\n    console.log(\"update\", newDataArr)\n\n    let obj = {\n      \"SITE_GUID\": siteID,\n      \"RES_ID\": newDataArr[0],\n      \"NAME\": newDataArr[1],\n      \"MOBILE_NO\": newDataArr[3],\n      \"EMAIL\": newDataArr[4],\n      \"CONTACT_PERSON\": newDataArr[2],\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n    }\n    console.log('edit :', obj)\n    // axiosInstance.post('api/Question_Management.svc/insert_question', obj)\n    checkValidity.validate(obj, { abortEarly: false })\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Sites_Master.svc/update_site`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Sites_Master.svc/update_site', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              getSiteList()\n              setEdit(false)\n            }\n            else {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              getSiteList()\n              setEdit(false)\n            }\n          })\n          .catch(err => {\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setFailure(true)\n            getSiteList()\n            setEdit(false)\n          })\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => {\n          console.log(e['message'])\n          return e['message']\n        })\n        console.log(errArray)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setRowIndex()\n        getSiteList()\n        setEdit(false)\n      });\n    console.log(errorMsg)\n    setIsLoading(false)\n  }\n\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n\n  const handleUserTable = (data) => {\n    console.log(data)\n    console.log(data.tableData[data.rowIndex]['SITE_GUID'])\n    let siteID = data.tableData[data.rowIndex]['SITE_GUID']\n    console.log(data.rowData[1])\n    let path = `/app/userslist/sm/${siteID}`;\n    history.push(path)\n  }\n  const handleCloseModal = () => {\n    setOpenModal(false)\n  }\n  const handleCloseTimeSlot = () => {\n    setOpenTimeSlot(false)\n  }\n  const callOnce = (rowIndex) => {\n    setIndexValue(rowIndex)\n    setViewOptions(true)\n  }\n  const debounceFunction = (func, delay) => {\n    clearTimeout(timerId)\n    timerId = setTimeout(func, delay)\n  }\n  console.log('site', dataTableData)\n  console.log(open, edit)\n  return (\n    <>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title=\"Site List\"\n              data={dataTableData}\n              columns={columns}\n              options={{\n                filter: true,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                pagination: true,\n                download: true,\n                rowsPerPage: 5,\n                rowsPerPageOptions: [5, 10, 15, 100],\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                rowHover: false,\n                // setRowProps: (row, dataIndex, rowIndex) => {\n                //   if(open !== true || edit !== true){\n                //   return {\n                //     onMouseOver: () => {\n                //       debounceFunction(callOnce(rowIndex), 200)\n                //     },\n                //     onMouseLeave: () => {\n                //       setIndexValue()\n                //       setViewOptions(false)\n                //     }\n                //   }\n                //   }\n                // },\n                customToolbar: () => {\n                  return (\n                    <>\n                      <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        style={{ fontSize: \"8px\", marginLeft: \"1px\", marginRight: \"1px\" }}\n                        onClick={() => handleClick()}\n                        disabled={open || edit ? true : false}\n                        startIcon={<AddCircleIcon />}\n                      >\n                        Add Site\n                      </Button>\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n      </Grid>\n      {openAlert ?\n        failure === false\n          ? <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\n          : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\n        : \"\"}\n      {openModal ? <AddUser open={openModal} close={handleCloseModal} /> : \"\"}\n      {/* {openTimeSlot ? <AddTimeSlot open={openTimeSlot} siteID={siteID} masterID={masterID} close={handleCloseTimeSlot} /> : \"\"} */}\n      {openTimeSlot ? <AuditSlots open={openTimeSlot} siteID={siteID} masterID={masterID} close={handleCloseTimeSlot} /> : \"\"}\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/AddSection.js",["1669","1670","1671","1672","1673","1674","1675","1676","1677","1678","1679","1680","1681","1682","1683","1684"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    Paper,\n    IconButton\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\n\n//component\nimport Table from './Table';\nimport axiosInstance from '../../../../components/Utils/AxiosInstance';\nimport axios from 'axios';\nimport SubSectionTable from './SubSectionTable';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        display: 'none',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function AddSection(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        sectionText: \"\",\n        subSectionText: \"\"\n        // sectionPosition: \"\",\n    })\n    const [dataTableData, setDataTableData] = useState([])\n    const [saveOpen, setSaveOpen] = useState(true)\n    const [openView, setOpenView] = useState(false)\n    const [sectionID, setSectionID] = useState('')\n    const [subSectionData, setSubSectionData] = useState([])\n    // const [subSectionText, setSubSectionText] = useState('')\n    const history = useHistory();\n    const [checkListID, setCheckListID] = useState()\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n    useEffect(() => {\n        function getData() {\n            axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n                // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n                .then(res => setDataTableData([...res.data.data]))\n                .then(setSaveOpen(true))\n                .catch(err => console.log(err))\n        }\n        getData()\n    }, [])\n\n    const handleChange = (input) => ({ target: { value } }) => {\n        console.log(input, value)\n        setData({\n            ...data,\n            [input]: value\n        })\n    }\n    const handleSave = () => {\n        console.log(data)\n        setSaveOpen(true)\n\n        const obj = {\n            \"NAME\": data.sectionText,\n            \"CREATED_BY\": localStorage.getItem('client_userID')\n\n        }\n\n        axiosInstance.post('api/Question_Section_Management.svc/insert_question_section', obj)\n            // axios.post('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/insert_question_section', obj)\n            .then(res => {\n                setTimeout(() => addNewData(), 1000)\n                setData({\n                    sectionText: \"\"\n                })\n            })\n            .catch(err => console.log(err))\n    }\n    const addNewData = () => {\n        function getData() {\n            axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n                // axios.get(`http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2`)\n                .then(res => setDataTableData([...res.data.data]))\n                .then(props.update)\n                .catch(err => console.log(err))\n        }\n        getData()\n    }\n    const handleChangeSaveOpen = () => {\n        setSaveOpen(false)\n    }\n    const handleSubSectionView = (data) => {\n        console.log(data['tableData'][data['rowIndex']])\n        setSectionID(data['tableData'][data['rowIndex']]['id'])\n        axiosInstance.get(`api/Question_Section_Management.svc/question_sub_section_select2/${data['tableData'][data['rowIndex']]['id']}`)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    setSubSectionData([...res.data.data])\n                    setOpenView(true)\n                } else {\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n\n    }\n    const handleSaveSub = () => {\n        const obj = {\n            \"NAME\": data.subSectionText,\n            \"SECTIONS_ID\": sectionID,\n            \"CREATED_BY\": localStorage.getItem('client_userID')\n        }\n        console.log(obj)\n        axiosInstance.post(`api/Question_Section_Management.svc/insert_question_sub_section`, obj)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === '200') {\n                    handleReload()\n                } else {\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    const handleReload = () => {\n        axiosInstance.get(`api/Question_Section_Management.svc/question_sub_section_select2/${sectionID}`)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === \"200\") {\n                    setSubSectionData([...res.data.data])\n                    setData({\n                        ...data,\n                        subSectionText: \"\"\n                    })\n                } else {\n                    alert(`Could not update the table beacuse ${res.data.response[0]['MESSAGE']}`)\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    console.log(props)\n    console.log(sectionID)\n    console.log(dataTableData)\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth=\"true\" maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}></DialogTitle>\n            <DialogContent spacing={2} >\n                <Grid container spacing={2} style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    <Grid item container xs={4}  >\n                        <Paper elevation={4} style={{ width: \"100%\", padding: \"10px\", textAlign: \"center\", borderRadius: \"20px\" }}>\n                            <Grid item={12} style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n                                <h4>Add Section</h4>\n                            </Grid>\n                            <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"column\" }}>\n                                <TextField\n                                    autoFocus\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    id=\"sectionText\"\n                                    label=\"Section Text\"\n                                    type=\"text\"\n                                    value={data.sectionText}\n                                    onChange={handleChange('sectionText')}\n                                    fullWidth\n                                    required\n                                />\n                                <Button variant=\"contained\" onClick={handleSave} color=\"primary\" startIcon={<Save />}>\n                                    Save\n                            </Button>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item container xs={8}>\n                        <Table data={dataTableData} saveOpen={saveOpen} changeSaveOpen={handleChangeSaveOpen} view={handleSubSectionView} />\n                    </Grid>\n                    {openView ? <>\n                        <Grid item container xs={4}  >\n                            <Paper elevation={4} style={{ width: \"100%\", padding: \"10px\", textAlign: \"center\", borderRadius: \"20px\" }}>\n                                <Grid item={12} style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n                                    <h4>Add Sub Section</h4>\n                                </Grid>\n                                <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"column\" }}>\n                                    <TextField\n                                        autoFocus\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        id=\"subSectionText\"\n                                        label=\"Sub-Section Text\"\n                                        type=\"text\"\n                                        value={data.subSectionText}\n                                        onChange={handleChange('subSectionText')}\n                                        fullWidth\n                                        required\n                                    />\n                                    <Button variant=\"contained\" onClick={handleSaveSub} color=\"primary\" startIcon={<Save />}>\n                                        Save\n                            </Button>\n                                </Grid>\n                            </Paper>\n                        </Grid>\n                        <Grid item container xs={8}>\n                            <SubSectionTable data={subSectionData} reload={handleReload} />\n                        </Grid>\n                    </> : \"\"}\n                </Grid>\n            </DialogContent>\n            {/* <DialogActions>\n                <Button variant=\"contained\" onClick={props.close} color=\"primary\">\n                    Cancel\n                </Button>\n            </DialogActions> */}\n\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/Table.js",["1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\n\n\n// components\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MuiPaper: {\n      rounded: {\n          borderRadius: \"20px\"\n      }\n  },\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        margin: \"8px 3px\",\n        padding: \"0px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [indexData, setIndexData] = useState({})\n  const [data, setData] = useState([])\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [sectionID, setSectionID] = useState('')\n\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\">\n              {tableMeta.rowIndex === rowIndex\n                ? <div style={{ display: \"flex\" }}>\n                  <CheckCircleIcon fontSize=\"small\" onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                  <CancelIcon fontSize=\"small\" onClick={() => handleCancel(tableMeta.rowIndex)} />\n                </div>\n                : <EditRoundedIcon fontSize=\"small\" onClick={() => {\n                  return (\n                    handleEdit(tableMeta, tableMeta.rowIndex)\n                  )\n                }} />}\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"text\",\n      label: \"Section Text\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          tableMeta.rowIndex === rowIndex\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : <div>{value}</div>\n        )\n      }\n    },\n    // {\n    //   name: \"POSITION\",\n    //   label: \"Section Position\",\n    //   options: {\n    //     filter: false,\n    //     sort: true,\n    //     customBodyRender: (value, tableMeta, updateValue) => (\n    //       tableMeta.rowIndex === rowIndex\n    //         ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n    //         : <div>{value}</div>\n    //     )\n    //   }\n    // },\n    {\n      name: \"View\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <IconButton\n              color=\"primary\"\n              size=\"small\"\n            // disabled={open || edit ? true : false}\n            >\n              <VisibilityRounded\n                onClick={() => props.view(tableMeta)}\n              />\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"DELETE\",\n      label: \"Delete\",\n      options: {\n        filter: false,\n        sort: true,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton size=\"small\" color=\"primary\" size=\"small\" onClick={() => handleDelete(dataIndex)}>\n              <DeleteRoundedIcon fontSize=\"small\" />\n            </IconButton>\n          );\n        }\n      }\n    },\n  ]\n  const handleView = (tableMeta) => {\n\n  }\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0 && index < updatedata.length - 1)\n    console.log(newDataArr)\n\n    let obj = {\n      \"NAME\": newDataArr[0],\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n      \"SECTIONS_ID\": sectionID['id']\n    }\n    console.log(obj)\n    axiosInstance.post('api/Question_Section_Management.svc/update_question_section', obj)\n      // axios.post('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/update_question_section', obj)\n      .then(res => getUpdatedData())\n      .catch(err => console.log(err))\n  }\n\n\n  const getUpdatedData = () => {\n    setRowIndex()\n    axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n      // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n      .then(res => setData([...res.data.data]))\n      .then(props.changeSaveOpen)\n      .catch(err => console.log(err))\n  }\n\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    setSectionID(tableMeta.tableData[rowIndex])\n    setRowIndex(rowIndex)\n\n  }\n  const handleCancel = () => {\n    setRowIndex()\n  }\n  const handleDelete = () => {\n\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  console.log(indexData)\n  console.log(props.data)\n  console.log(props)\n  return (\n    <>\n\n      <Grid item xs={12} spacing={2}>\n        <MuiThemeProvider theme={theme}>\n          <MUIDataTable\n            title=\"Section List\"\n            data={props.saveOpen ? props.data ? props.data : 'isLoading...' : data}\n            columns={columns}\n            options={{\n              filter: true,\n              selectableRows: 'none',\n              filterType: 'dropdown',\n              responsive: 'standard',\n              rowsPerPage: 5,\n              rowsPerPageOptions: [5, 10, 15, 100],\n              download: true,\n              downloadOptions: {\n                filename: 'tableDownload.csv',\n                separator: ',',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true || false,\n                  useDisplayedRowsOnly: true || true\n                } || false\n              },\n              tableBodyHeight: '50%',\n              tableBodyMaxHeight: \"\",\n              setTableProps: () => {\n                return {\n                  padding: 'default'\n                }\n              },\n            }}\n          />\n        </MuiThemeProvider>\n      </Grid>\n      {/* <EditForm open={open} data={indexData} close={handleClose} />\n        <AddClient open={openAdd} close={handleCloseAddButton} /> */}\n      {/* <Grid item xs={12}>\n          <Widget title=\"Material-UI Table\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\n            <Table data={mock.table} />\n          </Widget>\n        </Grid> */}\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/ModalAlert/FailureAlert.js",["1698"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\n//fontawesome\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FailureAlert(props) {\n\n    return (\n\n        <Dialog\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={props.close}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle id=\"alert-dialog-slide-title\"></DialogTitle>\n            <DialogContent style={{textAlign:\"center\"}}>\n                <FontAwesomeIcon icon={faTimesCircle} size=\"3x\" color=\"red\"/>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    {/* <h2>Awesome!</h2> */}\n                    {props.message}\n                </DialogContentText>\n                <Button onClick={props.close} color=\"primary\">\n                    Ok\n                </Button>\n            </DialogContent>\n            {/* <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Disagree\n                </Button>\n                <Button onClick={handleClose} color=\"primary\">\n                    Agree\n          </Button>\n            </DialogActions> */}\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddUser/AddUser.js",["1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function AddUser(props) {\n\n    const classes = useStyles();\n    const data = {\n        role: \"\",\n        clientID: \"\",\n        email: \"\",\n        userName: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        mobileNo: \"\",\n        createdBy: \"\"\n    }\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const [qcUser, setQCUser] = useState([]);\n    const [siteID, setSiteID] = useState('');\n  \n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'sm'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add New User</DialogTitle>\n            <DialogContent>\n                <div className={classes.paper}>\n                    <Formik\n                        initialValues={data}\n                        onSubmit={(values, { setSubmitting }) => {\n                            console.log(values)\n                            // setSubmitting(true);\n                            // const obj = {\n                            //     \"ROLE\": props.role === 'bm'? '20A3D20C-7B2D-4C0A-9AAF-840012548914': '42E0E468-68B7-4C14-AD05-E2790FC333D9',\n                            //     \"CLIENT_ID\":props.businessID,\n                            //     \"EMAIL\":values.email,\n                            //     \"USER_NAME\":values.userName,\n                            //     \"F_NAME\":values.firstName,\n                            //     \"L_NAME\":values.lastName,\n                            //     \"MOBILE\":values.mobileNo,\n                            //     \"CREATED_BY\":localStorage.getItem('client_userID')\n                            // }\n                            // console.log(obj)\n                            // axiosInstance.post('universal_api/User_Management.svc/insert_user', obj)\n                            //     .then(res => console.log(res))\n                            //     .then(props.reload)\n                            //     .then(alert(\"New User Added Successfully\"))\n                            //     .catch(err => console.log(err))\n                        }}\n\n                        validationSchema={Yup.object().shape({\n                            firstName: Yup.string().required('Required'),\n                            lastName: Yup.string().required('Required'),\n                            userName: Yup.string().required('Required'),\n                            mobileNo: Yup\n                                .string()\n                                .matches(mobileRegex, 'Mobile number is not valid')\n                                .required('Required'),\n                            email: Yup\n                                .string('Enter your email')\n                                .email('Enter a valid email')\n                                .required('Required'),\n\n\n                        })}\n                    >\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            dirty,\n                            isSubmitting,\n                            handleChange,\n                            handleBlur,\n                            handleReset,\n                        }) =>\n                        (\n                            <Form className={classes.form}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} sm={6} >\n                                        <TextField\n                                            error={errors.firstName && touched.firstName}\n                                            autoComplete=\"firstName\"\n                                            name=\"firstName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.firstName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"firstName\"\n                                            label=\"First Name\"\n                                            required\n                                            helperText={\n                                                errors.firstName && touched.firstName\n                                                    ? errors.firstName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} >\n                                        <TextField\n                                            error={errors.lastName && touched.lastName}\n                                            autoComplete=\"lastName\"\n                                            name=\"lastName\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.lastName}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"lastName\"\n                                            label=\"Last Name\"\n                                            required\n                                            helperText={\n                                                errors.lastName && touched.lastName\n                                                    ? errors.lastName\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item xs={12} sm={6} >\n                                        <TextField\n                                            error={errors.mobileNo && touched.mobileNo}\n                                            autoComplete=\"mobileNo\"\n                                            name=\"mobileNo\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.mobileNo}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"mobileNo\"\n                                            label=\"Mobile Number\"\n                                            required\n                                            helperText={\n                                                errors.mobileNo && touched.mobileNo\n                                                    ? errors.mobileNo\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} >\n                                        <TextField\n                                            error={errors.email && touched.email}\n                                            autoComplete=\"email\"\n                                            name=\"email\"\n                                            variant=\"outlined\"\n                                            fullWidth\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            id=\"email\"\n                                            label=\"Email\"\n                                            required\n                                            helperText={\n                                                errors.email && touched.email\n                                                    ? errors.email\n                                                    : null\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <DialogActions>\n                                    <Button\n                                        type=\"button\"\n                                        className=\"outline\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        onClick={handleReset}\n                                        disabled={!dirty || isSubmitting}\n                                    >\n                                        Reset\n                                            </Button>\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                        disabled={isSubmitting}>\n                                        Submit\n                                            </Button>\n                                </DialogActions>\n                            </Form>\n                        )\n                        }\n                    </Formik>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/TimeSlot.js",["1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/TimeSlotTable.js",["1732","1733","1734","1735","1736","1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\nimport axios from \"axios\";\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: useStyles.tableRowSelectColor\n                }\n            }\n        },\n    },\n})\n\nexport default function Tables(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [indexData, setIndexData] = useState({})\n    const [data, setData] = useState(\"\")\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [sectionID, setSectionID] = useState('')\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" >\n                            <EditRoundedIcon onClick={() => {\n                                return (\n                                    handleEdit(tableMeta, tableMeta.rowIndex)\n                                )\n                            }} />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"Delete\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n                            <DeleteRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"START_TIME\",\n            label: \"Shift Start Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"END_TIME\",\n            label: \"Shift End Time\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"CHECK_LIST_NAME\",\n            label: \"Checklist Name\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n    ]\n\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        props.activeEdit(tableMeta.tableData[rowIndex])\n        //     setSectionID(tableMeta.tableData[rowIndex]['SECTIONS_ID'])\n        // setRowIndex(rowIndex)\n\n    }\n\n    const handleDelete = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        let selectedShiftID = tableMeta.tableData[rowIndex]['SHIFT_ID']\n        console.log(selectedShiftID)\n        let shift =\n        {\n            \"SHIFT_ID\": selectedShiftID\n        }\n        axiosInstance.post(`api/Shift_Timing.svc/delete_shift_timing`, shift)\n        // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/delete_shift_timing', shift)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === '200') {\n                    alert(res.data.response[0]['MESSAGE'])\n                    props.reloadTable()\n                } else {\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n\n            })\n            .catch(err => console.log(err))\n    }\n\n    console.log(indexData)\n    console.log(props.data)\n    console.log(props)\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title=\"Audit Slots\"\n                    // data={props.saveOpen ? props.data ? props.data : 'isLoading...' : \"\"}\n                    data={props.data}\n                    columns={columns}\n                    options={{\n                        filter: true,\n                        selectableRows: 'none',\n                        filterType: 'dropdown',\n                        responsive: 'standard',\n                        rowsPerPage: 5,\n                        download: true,\n                        downloadOptions: {\n                            filename: 'tableDownload.csv',\n                            separator: ',',\n                            filterOptions: {\n                                useDisplayedColumnsOnly: true || false,\n                                useDisplayedRowsOnly: true || true\n                            } || false\n                        },\n\n                        tableBodyHeight: '',\n                        tableBodyMaxHeight: \"\",\n                        setTableProps: () => {\n                            return {\n                                padding: 'default'\n                            }\n                        },\n                    }}\n                />\n            </MuiThemeProvider>\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Site/AddTimeSlot.js",["1751","1752","1753","1754","1755","1756","1757","1758","1759","1760","1761","1762","1763","1764","1765","1766","1767","1768","1769","1770"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\n//component\nimport Table from '../TimeSlotTable'\nimport EditTimeSlot from './EditTimeSlot';\nimport axiosInstance from '../../../../../components/Utils/AxiosInstance';\n\n\n// const useStyles = makeStyles((theme) => ({\n//     input: {\n//         display: 'none',\n//     },\n//     formControl: {\n//         margin: theme.spacing(1),\n//         minWidth: 120\n//     },\n//     root: {\n//         margin: 0,\n//         padding: theme.spacing(2),\n//     },\n//     closeButton: {\n//         position: 'absolute',\n//         right: theme.spacing(1),\n//         top: theme.spacing(1),\n//         color: theme.palette.grey[500],\n//     },\n//     selectEmpty: {\n//         marginTop: theme.spacing(2),\n//     },\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }))\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function TimeSlot(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n        siteID: props.siteID\n    })\n    const [dataTableData, setDataTableData] = useState()\n    const [editEnable, setEditEnable] = useState(false)\n    const [checkListArr, setCheckListArr] = useState([])\n    const [editData, setEditData] = useState()\n    // const [updateData, setUpdateData] = useState({\n    //     start: editData['TIME'],\n    //     end: editData['END_TIME'],\n    //     flag: editData['AUDIT_CLOSE_FLAG'],\n    //     checklistName: editData['CHECK_LIST_NAME']\n    // })\n    // const masterID = window.location.href.split('/').slice(-2).shift()\n    // const masterID = props.masterID\n    const history = useHistory();\n    useEffect(() => {\n        getCheckList()\n    }, [])\n\n    useEffect(() => {\n        getData()\n    }, [props.siteID])\n\n    function getCheckList() {\n        axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n        // axios.get('http://betaapp.hygienequotient.com/api/Check_List_Master.svc/get_checklist/all')\n            .then(res => {\n                setCheckListArr([...res.data.data])\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n    function getData() {\n        axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n        // axios.get(`http://betaapp.hygienequotient.com/api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n            .then(res => {\n                if (res.data.data !== null && res.data.response[0]['CODE'] === \"200\") {\n                    console.log(res.data.data)\n                    setDataTableData([...res.data.data])\n                } else {\n                    setDataTableData([])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    // const addNewData = () => {\n    //     axiosInstance.get(`api/Audit_Time_Slots.svc/get_audit_slots/${props.siteID}`)\n    //         .then(res => setDataTableData([...res.data.data]))\n    //         .catch(err => console.log(err))\n    // }\n\n    const handleActiveEdit = (arg) => {\n        console.log(arg)\n        setEditData({\n            start: arg['START_TIME'],\n            end: arg['END_TIME'],\n            flag: arg['AUDIT_CLOSE_FLAG'] === \"0\" ? \"No\" : arg['AUDIT_CLOSE_FLAG'] === \"1\" ? \"Yes\" : \"\",\n            checklistName: arg['CHECK_LIST_NAME'],\n            shiftID: arg['SHIFT_ID'],\n        })\n        setEditEnable(true)\n    }\n    const handelCancel = () => {\n        setEditEnable(false)\n    }\n    console.log(props)\n    console.log(dataTableData)\n    console.log(editData)\n    return (\n        <>\n            <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Add and Edit Time Slot</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={1}>\n                        <Grid item xs={4} >\n                            {!editEnable ?\n                                <Grid container>\n                                    <Grid item xs={12} alignContent=\"space-around\" justify=\"center\">\n                                        <h3>Insert New Slot</h3>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <div className={classes.paper}>\n                                            <Formik\n                                                initialValues={data}\n                                                onSubmit={(values, { setSubmitting, handleReset }) => {\n                                                    console.log(values)\n                                                    setSubmitting(true);\n                                                    \n                                                    const obj = {\n                                                        \"SITE_GUID\": props.siteID,\n                                                        \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                                                        \"START_TIME\": values.startTime,\n                                                        \"END_TIME\": values.endTime,\n                                                        \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : 0,\n                                                        \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n                                                    }\n                                                    console.log(obj)\n                                                    axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                                                    // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/insert_shift_timing', obj)\n\n                                                        .then(res => {\n                                                            if (res.data.response[0]['CODE'] === \"200\") {\n                                                                setTimeout(() => getData(), 1000)\n                                                                \n                                                            } else {\n                                                                alert(res.data.response[0]['MESSAGE'])\n                                                            }\n                                                        })\n                                                        .then(setSubmitting(false))\n                                                        .catch(err => console.log(err))\n                                                }}\n\n                                                validationSchema={Yup.object().shape({\n\n                                                    startTime: Yup.string()\n                                                        .required('Required'),\n                                                    endTime: Yup.string()\n                                                        .required('Required'),\n                                                    auditCloseFlag: Yup.string()\n                                                        .required('Required'),\n                                                    selectChecklist: Yup.string()\n                                                        .required('Required'),\n                                                })}\n                                            >\n                                                {({\n                                                    values,\n                                                    touched,\n                                                    errors,\n                                                    dirty,\n                                                    isSubmitting,\n                                                    handleChange,\n                                                    handleBlur,\n                                                    handleReset,\n                                                }) =>\n                                                (\n                                                    <Form className={classes.form}>\n                                                        <Grid container spacing={2}>\n\n                                                            <Grid item xs={12} sm={6}>\n                                                                <TextField\n                                                                    error={errors.startTime && touched.startTime}\n                                                                    autoComplete=\"startTime\"\n                                                                    id=\"startTime\"\n                                                                    label='Start Time'\n                                                                    type=\"time\"\n                                                                    name=\"startTime\"\n                                                                    variant=\"outlined\"\n                                                                    fullWidth\n                                                                    value={values.startTime}\n                                                                    onChange={handleChange}\n                                                                    onBlur={handleBlur}\n                                                                    required\n                                                                    InputLabelProps={{\n                                                                        shrink: true,\n                                                                    }}\n                                                                    inputProps={{\n                                                                        style: {\n                                                                            paddingRight: 2\n                                                                        }\n                                                                    }}\n                                                                    helperText={\n                                                                        errors.startTime && touched.startTime\n                                                                            ? errors.startTime\n                                                                            : null\n                                                                    }\n                                                                />\n                                                            </Grid>\n                                                            <Grid item xs={12} sm={6}>\n                                                                <TextField\n                                                                    error={errors.endTime && touched.endTime}\n                                                                    autoComplete=\"endTime\"\n                                                                    id=\"endTime\"\n                                                                    label=\"End Time\"\n                                                                    type=\"time\"\n                                                                    name=\"endTime\"\n                                                                    variant=\"outlined\"\n                                                                    fullWidth\n                                                                    value={values.endTime}\n                                                                    onChange={handleChange}\n                                                                    onBlur={handleBlur}\n                                                                    required\n                                                                    InputLabelProps={{\n                                                                        shrink: true,\n\n                                                                    }}\n                                                                    inputProps={{\n                                                                        style: {\n                                                                            paddingRight: 2\n                                                                        }\n                                                                    }}\n                                                                    helperText={\n                                                                        errors.endTime && touched.endTime\n                                                                            ? errors.endTime\n                                                                            : null\n                                                                    }\n                                                                />\n                                                            </Grid>\n                                                            <Grid item xs={12} >\n                                                                <TextField\n                                                                    error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                                                    id=\"auditCloseFlag\"\n                                                                    select\n                                                                    label=\"Audit Close Flag\"\n                                                                    variant=\"outlined\"\n                                                                    className={classes.textField}\n                                                                    value={values.auditCloseFlag}\n                                                                    onChange={handleChange(\"auditCloseFlag\")}\n                                                                    fullWidth\n                                                                    required\n                                                                    helperText={\n                                                                        errors.auditCloseFlag && touched.auditCloseFlag\n                                                                            ? errors.auditCloseFlag\n                                                                            : null\n                                                                    }\n                                                                >\n                                                                    <MenuItem value=\"\">\n                                                                        <em>None</em>\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                                                                    <MenuItem value=\"No\">No</MenuItem>\n                                                                </TextField>\n                                                            </Grid>\n                                                            <Grid item xs={12} >\n                                                                <TextField\n                                                                    error={errors.selectChecklist && touched.selectChecklist}\n                                                                    id=\"selectChecklist\"\n                                                                    select\n                                                                    label=\"Checklist Name\"\n                                                                    variant=\"outlined\"\n                                                                    className={classes.textField}\n                                                                    value={values.selectChecklist}\n                                                                    onChange={handleChange(\"selectChecklist\")}\n                                                                    fullWidth\n                                                                    required\n                                                                    helperText={\n                                                                        errors.selectChecklist && touched.selectChecklist\n                                                                            ? errors.selectChecklist\n                                                                            : null\n                                                                    }\n                                                                >\n                                                                    <MenuItem value=\"\">\n                                                                        <em>None</em>\n                                                                    </MenuItem>\n                                                                    {checkListArr && checkListArr.map(item => (\n                                                                        <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                                                    ))}\n                                                                </TextField>\n                                                            </Grid>\n                                                        </Grid>\n                                                        <DialogActions>\n                                                            <Button\n                                                                type=\"button\"\n                                                                className=\"outline\"\n                                                                variant=\"contained\"\n                                                                color=\"primary\"\n                                                                className={classes.submit}\n                                                                onClick={handleReset}\n                                                                disabled={!dirty || isSubmitting}\n                                                            >\n                                                                Reset\n                                                            </Button>\n                                                            <Button\n                                                                type=\"submit\"\n                                                                variant=\"contained\"\n                                                                color=\"primary\"\n                                                                className={classes.submit}\n                                                                disabled={isSubmitting}>\n                                                                Submit\n                                                            </Button>\n                                                        </DialogActions>\n                                                    </Form>\n                                                )\n                                                }\n                                            </Formik>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                                :\n\n                                <Grid container xs={12} >\n                                    <Grid item xs={12}>\n                                        <h3>Edit Slot</h3>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <EditTimeSlot checkListArr={checkListArr} editData={editData} siteID={props.siteID} close={props.close} reloadTable={getData} cancel={handelCancel} />\n                                    </Grid>\n                                </Grid>\n                            }\n                        </Grid>\n                        <Grid item xs={8}>\n                            <Table\n                                data={dataTableData}\n                                siteID={props.siteID}\n                                activeEdit={handleActiveEdit}\n                                reloadTable={getData}\n                            />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Site/EditTimeSlot.js",["1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Button, Grid, Paper } from \"@material-ui/core\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Save } from '@material-ui/icons';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport axios from 'axios'\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from \"../../../../../components/Utils/AxiosInstance\";\n\n// const useStyles = makeStyles((theme) => ({\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }));\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function EditTimeSlot(props) {\n    const classes = useStyles();\n\n    const [updatedData, setUpdatedData] = useState()\n    const checkListArr = props.checkListArr\n    const shiftID = props.editData['shiftID']\n    const siteID = props.siteID\n    useEffect(() => {\n        const { editData, checkListArr } = props\n        console.log(editData)\n        setUpdatedData({\n            start: editData['start'],\n            end: editData['end'],\n            flag: editData['flag'],\n            checklistName: editData['checklistName'],\n        })\n    }, [props.editData])\n    console.log(updatedData)\n    const handleChangeEdit = (input) => ({ target: { value } }) => {\n        console.log({ [input]: value });\n        setUpdatedData({\n            ...updatedData,\n            [input]: value\n        })\n    };\n    const handleSaveEdit = () => {\n        console.log(updatedData)\n        console.log(checkListArr)\n       \n        const obj ={\n            \"SITE_GUID\":siteID,\n            \"CHECKLIST_ID\":checkListArr.filter(item => item['CHECK_LIST_NAME'] === updatedData.checklistName)[0]['CHECK_LIST_ID'],\n            \"START_TIME\": updatedData['start'].includes('PM') || updatedData['start'].includes('AM') ? handleTimeFormat(updatedData['start']) : updatedData['start'],\n            \"END_TIME\": updatedData['end'].includes('PM') || updatedData['end'].includes('AM') ? handleTimeFormat(updatedData['end']) : updatedData['end'],\n            \"AUDIT_CLOSE_FLAG\": updatedData['flag'] === \"Yes\" ? \"1\" : updatedData['flag'] === \"No\" ? \"0\" : \"\",\n            \"CREATED_BY\":\"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n            \"SHIFT_ID\":shiftID\n        \n        }\n        console.log(obj)\n        axiosInstance.post('api/Shift_Timing.svc/update_shift_timing', obj)\n        // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/update_shift_timing', obj)\n            .then(res => {\n                if(res.data.response[0]['CODE'] !== \"200\"){\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .then(props.reloadTable)\n            .catch(err => console.log(err))\n    }\n    const handleTimeFormat = (time) => {\n        var pmCheck = time.includes(\"PM\");\n        var hrs = parseInt(time.split(\":\")[0]);\n        var newtime = '';\n        // this is for between  12 AM to 12:59AM  = 00:00\n        if (hrs == 12 && pmCheck == false) {\n            newtime = \"00\" + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between  12 PM to 12:59 =12:00\n        else if (hrs == 12 && pmCheck == true) {\n            newtime = \"12\" + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        //this is for between 1 AM and 9:59 AM\n        else if (!pmCheck && hrs < 10) {\n\n            newtime = \"0\" + hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 10:00 AM and 11:59 AM\n        else if (!pmCheck && hrs >= 10) {\n\n            newtime = hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 1 PM and 11:59 PM\n        else if (pmCheck) {\n            newtime = (hrs + 12) + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        console.log(time, \": \", newtime)\n        return newtime\n    }\n    return (\n        <>\n            <div className={classes.paper}>\n                <div className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoFocus\n                                margin=\"normal\"\n                                id=\"startTime1\"\n                                label=\"Start Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['start'] ? handleTimeFormat(updatedData['start']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"start\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                margin=\"normal\"\n                                id=\"endTime1\"\n                                label=\"End Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['end'] ? handleTimeFormat(updatedData['end']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"end\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select1\"\n                                label=\"Audit Close Flag\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['flag'] ? updatedData['flag'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"flag\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                <MenuItem value=\"Yes\">Yes</MenuItem>\n                                <MenuItem value=\"No\">No</MenuItem>\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select2\"\n                                label=\"Checklist Name\"\n                                margin=\"normal\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['checklistName'] ? updatedData['checklistName'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"checklistName\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                {checkListArr && checkListArr.map(item => (\n                                    <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <DialogActions>\n                                <Button variant=\"contained\" onClick={props.cancel} color=\"primary\">\n                                    Cancel\n                            </Button>\n                                <Button variant=\"contained\" onClick={handleSaveEdit} color=\"primary\" startIcon={<Save />}>\n                                    Save\n                            </Button>\n                            </DialogActions>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/clientManagement/business/component/Site/component/EditTimeSlot.js",["1786","1787","1788","1789","1790","1791","1792","1793","1794","1795","1796","1797","1798","1799","1800"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Button, Grid, Paper } from \"@material-ui/core\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Save } from '@material-ui/icons';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport axios from 'axios'\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from \"../../../../../../components/Utils/AxiosInstance\";\n\n// const useStyles = makeStyles((theme) => ({\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }));\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nexport default function EditTimeSlot(props) {\n    const classes = useStyles();\n\n    const [updatedData, setUpdatedData] = useState()\n    const checkListArr = props.checkListArr\n    const shiftID = props.editData['shiftID']\n    const siteID = props.siteID\n    useEffect(() => {\n        const { editData, checkListArr } = props\n        console.log(editData)\n        setUpdatedData({\n            start: editData['start'],\n            end: editData['end'],\n            flag: editData['flag'],\n            checklistName: editData['checklistName'],\n        })\n    }, [props.editData])\n    console.log(updatedData)\n    const handleChangeEdit = (input) => ({ target: { value } }) => {\n        console.log({ [input]: value });\n        setUpdatedData({\n            ...updatedData,\n            [input]: value\n        })\n    };\n    const handleSaveEdit = () => {\n        console.log(updatedData)\n        console.log(checkListArr)\n       \n        const obj ={\n            \"SITE_GUID\":siteID,\n            \"CHECKLIST_ID\":checkListArr.filter(item => item['CHECK_LIST_NAME'] === updatedData.checklistName)[0]['CHECK_LIST_ID'],\n            \"START_TIME\": updatedData['start'].includes('PM') || updatedData['start'].includes('AM') ? handleTimeFormat(updatedData['start']) : updatedData['start'],\n            \"END_TIME\": updatedData['end'].includes('PM') || updatedData['end'].includes('AM') ? handleTimeFormat(updatedData['end']) : updatedData['end'],\n            \"AUDIT_CLOSE_FLAG\": updatedData['flag'] === \"Yes\" ? \"1\" : updatedData['flag'] === \"No\" ? \"0\" : \"\",\n            \"CREATED_BY\":localStorage.getItem('client_userID'),\n            \"SHIFT_ID\":shiftID\n        \n        }\n        console.log(obj)\n        axiosInstance.post('api/Shift_Timing.svc/update_shift_timing', obj)\n        // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/update_shift_timing', obj)\n            .then(res => {\n                if(res.data.response[0]['CODE'] === \"200\"){\n                    \n                    alert(res.data.response[0]['MESSAGE'])\n                }else{\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n            })\n            .then(props.reloadTable)\n            .catch(err => console.log(err))\n    }\n    const handleTimeFormat = (time) => {\n        var pmCheck = time.includes(\"PM\");\n        var hrs = parseInt(time.split(\":\")[0]);\n        var newtime = '';\n        // this is for between  12 AM to 12:59AM  = 00:00\n        if (hrs == 12 && pmCheck == false) {\n            newtime = \"00\" + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between  12 PM to 12:59 =12:00\n        else if (hrs == 12 && pmCheck == true) {\n            newtime = \"12\" + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        //this is for between 1 AM and 9:59 AM\n        else if (!pmCheck && hrs < 10) {\n\n            newtime = \"0\" + hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 10:00 AM and 11:59 AM\n        else if (!pmCheck && hrs >= 10) {\n\n            newtime = hrs + ':' + time.split(\":\")[1].replace(\"AM\", '');\n        }\n        //this is for between 1 PM and 11:59 PM\n        else if (pmCheck) {\n            newtime = (hrs + 12) + ':' + time.split(\":\")[1].replace(\"PM\", '');\n        }\n        console.log(time, \": \", newtime)\n        return newtime\n    }\n    return (\n        <>\n            <div className={classes.paper}>\n                <div className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoFocus\n                                margin=\"normal\"\n                                id=\"startTime1\"\n                                label=\"Start Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['start'] ? handleTimeFormat(updatedData['start']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"start\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                margin=\"normal\"\n                                id=\"endTime1\"\n                                label=\"End Time\"\n                                type=\"time\"\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['end'] ? handleTimeFormat(updatedData['end']) : \"\" : \"\"}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleChangeEdit(\"end\")}\n                                fullWidth\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select1\"\n                                label=\"Audit Close Flag\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['flag'] ? updatedData['flag'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"flag\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                <MenuItem value=\"Yes\">Yes</MenuItem>\n                                <MenuItem value=\"No\">No</MenuItem>\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"select2\"\n                                label=\"Checklist Name\"\n                                margin=\"normal\"\n                                select\n                                variant='outlined'\n                                value={updatedData !== undefined ? updatedData['checklistName'] ? updatedData['checklistName'] : \"\" : \"\"}\n                                onChange={handleChangeEdit(\"checklistName\")}\n                                className={classes.textField}\n                                fullWidth\n                            >\n                                {checkListArr && checkListArr.map(item => (\n                                    <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <DialogActions>\n                                <Button variant=\"contained\" onClick={props.cancel} color=\"primary\">\n                                    Cancel\n                            </Button>\n                                <Button variant=\"contained\" onClick={handleSaveEdit} color=\"primary\" startIcon={<Save />}>\n                                    Save\n                            </Button>\n                            </DialogActions>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/changePassword/ChangePassword.js",["1801","1802","1803","1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\nimport {\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    AppBar,\n    Tabs,\n    Tab,\n    Box,\n    Typography,\n    LinearProgress,\n    Select,\n    OutlinedInput,\n    MenuItem,\n    Button,\n    Paper,\n    TextField\n} from \"@material-ui/core\";\nimport styles from \"../../components/PageTitle/styles\";\nimport axiosInstance from \"../../components/Utils/AxiosInstance\";\nimport { faBullseye } from \"@fortawesome/free-solid-svg-icons\";\nimport NotifyAlert from '../../components/ModalAlert/NotifyAlert';\nimport FailureAlert from \"../../components/ModalAlert/FailureAlert\";\nimport { signOut, useUserDispatch } from \"../../context/UserContext\";\n\nexport default function ChangePassword() {\n\n    const history = useHistory();\n    var userDispatch = useUserDispatch();\n    const [oldPassword, setOldPassword] = useState('')\n    const [newPassword, setNewPassword] = useState('')\n    const [addUserAlert, setAddUserAlert] = useState('')\n    const [openAlert, setOpenAlert] = useState(false)\n    const [failure, setFailure] = useState(false)\n\n    const checkValidity = yup.object().shape({\n        \"OLD_PASSWORD\": yup\n            .string()\n            .required(),\n        \"PASSWORD\": yup\n            .string()\n            .required(),\n    },\n        [[\"OLD_PASSWORD\", \"PASSWORD\"]]\n    )\n    const yupOptions = {\n        strict: false,\n        abortEarly: false, // return all errors\n    }\n    const handleSubmit = () => {\n        const obj = {\n            \"MOBILE_NO\": localStorage.getItem('client_mobile'),\n            \"OLD_PASSWORD\": oldPassword,\n            \"PASSWORD\": newPassword\n        }\n        checkValidity.validate(obj, { abortEarly: false })\n            .then(() => {\n                axiosInstance.post('api/Change_Password.svc/change_password', obj)\n                    .then(res => {\n                        if (res.data.response[0]['CODE'] === '200') {\n                            setAddUserAlert(res.data.response[0]['MESSAGE'])\n                            setOpenAlert(true)\n                            setFailure(false)\n                            signOut(userDispatch, history)\n                        } else {\n                            setAddUserAlert(res.data.response[0]['MESSAGE'])\n                            setOpenAlert(true)\n                            setFailure(true)\n                        }\n                    })\n                    .catch(err => {\n                        setAddUserAlert(err)\n                        setOpenAlert(true)\n                        setFailure(true)\n                    })\n            })\n            .catch(err => {\n                setAddUserAlert(err)\n                setOpenAlert(true)\n                setFailure(true)\n            })\n    }\n    const handleClose = () => {\n        setOpenAlert(false)\n    }\n\n\n    return (\n        <>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                style={{ marginBottom: \"50px;\" }}\n            >\n\n                <Grid item xs={6}>\n                    <Card className=\"info_card\">\n                        <CardContent >\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                spacing={2}\n                            >\n                                <Grid item xs={12}>\n                                    <h3 className={styles.heading}>Change Password</h3>\n                                </Grid>\n                                <Grid item container xs={12} spacing={2}>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            required\n                                            type=\"password\"\n                                            label=\"Old Password\"\n                                            value={oldPassword}\n                                            onChange={e => setOldPassword(e.target.value)}\n                                            variant=\"outlined\"\n                                            fullWidth\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            required\n                                            label=\"New password\"\n                                            type=\"password\"\n                                            value={newPassword}\n                                            onChange={e => setNewPassword(e.target.value)}\n                                            variant=\"outlined\"\n                                            fullWidth\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12} container justify='center'>\n                                    {/* <Grid item xs={6}> */}\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleSubmit()}\n                                    >\n                                        Submit\n                                    </Button>\n                                    {/* </Grid> */}\n                                </Grid>\n                            </Grid>\n\n                        </CardContent>\n\n                    </Card>\n                </Grid>\n            </Grid>\n            {openAlert ?\n                failure === false\n                    ? <NotifyAlert message={addUserAlert} open={true} close={handleClose} />\n                    : <FailureAlert message={addUserAlert} open={true} close={handleClose} />\n                : \"\"}\n        </>\n    )\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/liveQC/QueueTable.js",["1815","1816","1817","1818","1819","1820","1821","1822"],"import React from 'react'\nimport MUIDataTable from \"mui-datatables\";\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    },\n    tableRowSelectColor: {\n        backgroundColor: 'red',\n        color: \"white\"\n    },\n    tableRowHoverColor: {\n        backgroundColor: \"pink\"\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                fontSize: \"12px\",\n                padding: \"5px 3px\",\n                '&:nth-child(3)': { textAlign: 'center' },\n                '&:nth-child(6)': { textAlign: 'center' },\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n                fontSize: \"13px\"\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: \"lightgrey\"\n                }\n            },\n            footer: {\n                '& td': {\n                    padding: \"0px\",\n                    margin: \"0px\"\n                }\n            }\n        },\n        MuiTypography: {\n            body2: {\n                fontSize: \"10px\"\n            }\n        },\n        MuiTablePagination: {\n            selectRoot: {\n                marginRight: \"5px\"\n            },\n            actions: {\n                marginLeft: \"5px\"\n            }\n        },\n        MainInputBase: {\n            input: {\n                fontSize: \"10px\"\n            }\n        }\n    },\n})\nfunction QueueTable(props) {\n\n    const columns = [\n        {\n            name: \"View\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton\n                            color=\"primary\"\n                            size=\"small\"\n                            disabled={false}\n                        >\n                            <VisibilityRounded\n                                fontSize=\"small\"\n                                onClick={() => handleView(tableMeta)}\n                            />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"QUESTION_TEXT\",\n            label: \"Question\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NAME\",\n            label: \"Site Name\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n\n\n\n\n    ]\n    const options = {\n        filter: false,\n        print: false,\n        viewColumns: false,\n        selectableRows: 'none',\n        filterType: 'dropdown',\n        responsive: 'standard',\n        rowsPerPage: 5,\n        rowsPerPageOptions: [5, 10, 15, 100],\n        download: false,\n        downloadOptions: {\n            filename: 'tableDownload.csv',\n            separator: ',',\n            filterOptions: {\n                useDisplayedColumnsOnly: true || false,\n                useDisplayedRowsOnly: true || true\n            } || false\n        },\n        tableBodyHeight: '',\n        tableBodyMaxHeight: \"\",\n    }\n    const handleView = (data) => {\n        console.log(data)\n    }\n\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title={\"QC in Queue\"}\n                    data={props.data}\n                    columns={columns}\n                    options={options}\n                />\n            </MuiThemeProvider>\n        </>\n    )\n}\n\nexport default QueueTable\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/CreatePlan.js",["1823","1824","1825","1826","1827","1828","1829"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    LinearProgress,\n    Select,\n    OutlinedInput,\n    MenuItem,\n    Button,\n    Paper\n} from \"@material-ui/core\";\nimport PlanForm from \"./PlanForm\";\nimport PlanDetails from \"./PlanDetails\";\nimport PlanInfo from \"./PlanInfo\";\nimport PlanEditForm from \"./PlanEditForm\";\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n\n    },\n}));\n\nfunction CreatePlan() {\n    const classes = useStyles();\n\n    const [viewDetails, setViewDetails] = useState()\n    const [planDetailsID, setPlanDetailsID] = useState(\"\")\n    const [planList, setPlanList] = useState([])\n    const [editEnable, setEditEnable] = useState(false)\n    const [editData, setEditData] = useState()\n\n    useEffect(()=>{\n        getPlanList()\n    }, [])\n    const getPlanList = () => {\n        axiosInstance.get('api/Plans.svc/get_plan')\n        .then((res) => {\n            setPlanList([...res.data.data])\n        })\n        .catch(err => console.log(err))\n    }\n    const handleReload = () => {\n        getPlanList()\n    }\n    const handleView =(planID) => {\n        setPlanDetailsID(planID)\n    }\n\n    const handleActiveEdit = (arg) => {\n        console.log(arg)\n        setEditData({\n            \"IS_IT_PUBLIC\": arg['IS_IT_PUBLIC'] === '1'? \"Yes\": \"No\",\n            \"PLAN_TYPE\": arg['PLAN_TYPE'],\n            \"PLAN_PRICE\": arg['PLAN_PRICE'],\n            \"GRACE_DAY\": arg['GRACE_DAY'],\n            \"EXP_DAY\": arg['EXP_DAY'],\n            \"SIZE\": arg['SIZE'],\n            \"NO_IMAGES_ALLOW_PERDAY\": arg['NO_IMAGES_ALLOW_PERDAY'],\n            \"NO_SITES_ALLOW\": arg['NO_SITES_ALLOW'],\n            \"NO_OF_REPORT\": arg['NO_OF_REPORT'],\n            \"PAYMENT_MODE\": arg['PAYMENT_MODE'].trim(),\n            \"NO_OF_CHECKLIST\": arg['NO_OF_CHECKLIST'],\n            \"NOTIFY_BEFORE_EXP_DAY\": arg['NOTIFY_BEFORE_EXP_DAY'],\n        })\n        setEditEnable(true)\n    }\n    const handelCancel = () => {\n        setEditEnable(false)\n    }\n    return (\n        <>\n            <div className={classes.root}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} >\n                        <Paper elevation={4} className={classes.paper} style={{ padding: \"1px\" }}><h3>Site Title</h3></Paper>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Paper elevation={4} className={classes.paper} style={{ height: \"550px\" }}>\n                            <Grid item xs={12}>\n                                <h4>Plan</h4>\n                            </Grid>\n                            <Grid item xs={12}>\n                                {!editEnable \n                                ? <PlanForm reloadData={handleReload}/> \n                                : <PlanEditForm editData={editData} reloadData={handleReload} cancel={handelCancel}/>}\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Paper elevation={4} className={classes.paper} style={{ height: \"550px\" }}>\n                            <Grid item xs={12} style={{ paddingBottom: \"20px\" }}>\n                                <h4>Plan Details</h4>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <PlanDetails id={planDetailsID}/>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper elevation={4} className={classes.paper}>\n                                <PlanInfo viewDetails={handleView} data={planList} activeEdit={handleActiveEdit}/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    )\n}\n\nexport default CreatePlan\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanDetails.js",["1830","1831","1832","1833","1834"],"import React, { useEffect, useState } from 'react'\nimport MUIDataTable from \"mui-datatables\";\nimport * as yup from 'yup';\n\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\nimport NotifyAlert from '../../../components/ModalAlert/NotifyAlert';\nimport FailureAlert from '../../../components/ModalAlert/FailureAlert';\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    },\n    tableRowSelectColor: {\n        backgroundColor: 'red',\n        color: \"white\"\n    },\n    tableRowHoverColor: {\n        backgroundColor: \"pink\"\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                fontSize: \"12px\",\n                padding: \"5px 3px\",\n                // '&:nth-child(3)': { textAlign: 'center' },\n                // '&:nth-child(6)': { textAlign: 'center' },\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        MuiPaper: {\n            elevation4: {\n                boxShadow: \"0px 0px 0px 0px\"\n            }\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n                fontSize: \"13px\"\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: \"lightgrey\"\n                }\n            },\n            footer: {\n                '& td': {\n                    padding: \"0px\",\n                    margin: \"0px\"\n                }\n            }\n        },\n        MuiTypography: {\n            body2: {\n                fontSize: \"10px\"\n            }\n        },\n        MuiTablePagination: {\n            selectRoot: {\n                marginRight: \"5px\"\n            },\n            actions: {\n                marginLeft: \"5px\"\n            }\n        },\n        MainInputBase: {\n            input: {\n                fontSize: \"10px\"\n            }\n        }\n    },\n})\nfunction PlanDetails(props) {\n    const [open, setOpen] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [dataTableData, setDataTableData] = useState()\n    const [addUserAlert, setAddUserAlert] = useState('')\n    const [openAlert, setOpenAlert] = useState(false)\n    const [failure, setFailure] = useState(false)\n\n    useEffect(() => {\n        getPlanData()\n    }, [props.id])\n\n    const getPlanData = () => {\n        axiosInstance.get(`api/Plans.svc/get_plan_details/${props.id}`)\n            .then(res => {\n                setDataTableData([...res.data.data])\n            })\n            .catch(err => console.log(err))\n    }\n\n    const checkValidity = yup.object().shape({\n        \"DESCRIPTION\": yup\n            .string()\n            .required('Name is required')\n    })\n    const yupOptions = {\n        strict: false,\n        abortEarly: false, // return all errors\n    }\n    const columns = [\n        {\n            name: \"\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        open === true && tableMeta.rowIndex === 0\n                            ? <IconButton color=\"primary\" size=\"small\" >\n                                <div style={{ display: \"flex\" }}>\n                                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n                                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n                                </div>\n                            </IconButton>\n                            : \"\"\n                    );\n                }\n            }\n        },\n\n        {\n            name: \"Sr. No.\",\n            label: \"\",\n            options: {\n                filter: false,\n                sort: false,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        tableMeta.rowIndex + 1\n                    );\n                }\n            }\n        },\n        {\n            name: \"DESCRIPTION\",\n            label: \"Name\",\n            options: {\n                filter: false,\n                sort: false,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        open && tableMeta.rowIndex === 0\n                            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                            : <div>{value}</div>\n                    )\n                }\n            }\n        },\n    ]\n    const options = {\n        filter: false,\n        print: false,\n        viewColumns: false,\n        selectableRows: 'none',\n        filterType: 'dropdown',\n        responsive: 'standard',\n        pagination: false,\n        rowsPerPage: 5,\n        rowsPerPageOptions: [5, 10, 15, 100],\n        download: false,\n        downloadOptions: {\n            filename: 'tableDownload.csv',\n            separator: ',',\n            filterOptions: {\n                useDisplayedColumnsOnly: true || false,\n                useDisplayedRowsOnly: true || true\n            } || false\n        },\n        tableBodyHeight: '260px',\n        tableBodyMaxHeight: \"\",\n        setTableProps: () => {\n            return {\n                size: \"small\"\n            }\n        },\n        customToolbar: () => {\n            return (\n                <>\n                    <IconButton >\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"primary\"\n                            startIcon={<AddCircleIcon />}\n                            onClick={() => handleAddButton()}\n                            disabled={open? true: false}\n                        >\n                            Add New Row\n                        </Button>\n                    </IconButton>\n                </>\n            );\n        }\n    }\n    const handleCancelAdd = (rowIndex) => {\n        setOpen(false)\n        console.log(rowIndex)\n        dataTableData.shift()\n        setRowIndex()\n    }\n    const handleUpdateAdd = (tableMeta, rowIndex) => {\n\n        console.log(tableMeta)\n        console.log(tableMeta.rowData)\n        let updatedata = tableMeta.rowData\n        let newDataArr = updatedata.filter((item, index) => index > 1)\n        console.log(newDataArr)\n\n        let obj = {\n            \"PLAN_ID\": props.id,\n            \"DESCRIPTION\": newDataArr[0]\n        }\n        console.log(obj)\n        checkValidity.validate(obj, yupOptions)\n            .then(() => {\n                axiosInstance.post('api/Plans.svc/insert_plan_details', obj)\n                    .then(res => {\n                        if (res.data.response[0]['CODE'] === \"200\") {\n                            setAddUserAlert(res.data.response[0]['MESSAGE'])\n                            setOpenAlert(true)\n                            setFailure(false)\n                            setRowIndex()\n                            setOpen(false)\n                            getPlanData()\n                        }\n                        else {\n                            setAddUserAlert(res.data.response[0]['MESSAGE'])\n                            setOpenAlert(true)\n                            setFailure(true)\n                            setRowIndex()\n                            setOpen(false)\n                            getPlanData()\n\n                        }\n                    })\n                    .catch(err => {\n                        setAddUserAlert(err)\n                        setOpenAlert(true)\n                        setFailure(true)\n                        setRowIndex()\n                        setOpen(false)\n                        getPlanData()\n\n                    })\n            })\n            .catch(function (err) {\n                let errArray = err.inner.map(e => e['message'])\n                console.log(errArray)\n                setAddUserAlert(errArray.map(item => <li>{item}</li>))\n                setOpenAlert(true)\n                setFailure(true)\n                setRowIndex()\n                setOpen(false)\n                getPlanData()\n\n            });\n        // console.log('add :', obj)\n\n    }\n    const handleAddButton = () => {\n        const newRowData = {\n            \"DESCRIPTION\": \"\"\n        }\n        setDataTableData([newRowData, ...dataTableData])\n        setOpen(true)\n        setRowIndex(\"0\")\n    }\n    const handleAlertClose = () => {\n        setOpenAlert(false)\n      }\n    console.log(props)\n    console.log(dataTableData)\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title={\"\"}\n                    data={dataTableData}\n                    columns={columns}\n                    options={options}\n                />\n            </MuiThemeProvider>\n            {openAlert ?\n                failure === false ?\n                    <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\n                    : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\n                : \"\"}\n        </>\n    )\n}\n\nexport default PlanDetails\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanForm.js",["1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849"],"import React, { useState, useEffect } from 'react'\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nfunction PlanForm(props) {\n    const classes = useStyles();\n    const data = {\n        planName: \"\",\n        planType: \"\",\n        price: \"\",\n        expiryDay: \"\",\n        graceDay: \"\",\n        notifyBeforeExpire: \"\",\n        storageSize: \"\",\n        imageAllow: \"\",\n        numberOfSites: \"\",\n        numberOfChecklists: \"\",\n        numberOfReport: \"\",\n        paymentMode: \"\"\n    }\n    const mobileRegex = /^[6789]\\d{9}$/;\n\n    useEffect(() => {\n\n    }, [])\n\n    return (\n        <>\n            <Formik\n                initialValues={data}\n                onSubmit={(values, { setSubmitting, handleReset }) => {\n                    console.log(values)\n                    setSubmitting(true);\n                    const obj = {\n                        \"IS_IT_PUBLIC\": values.planType === \"Yes\" ? 1: 0,\n                        \"PLAN_TYPE\": values.planName,\n                        \"PLAN_PRICE\": values.price,\n                        \"GRACE_DAY\": values.graceDay,\n                        \"EXP_DAY\": values.expiryDay,\n                        \"SIZE\": values.storageSize,\n                        \"NO_IMAGES_ALLOW_PERDAY\": values.imageAllow,\n                        \"NO_SITES_ALLOW\": values.numberOfSites,\n                        \"NO_OF_REPORT\": values.numberOfReport,\n                        \"PAYMENT_MODE\": values.paymentMode,\n                        \"NO_OF_CHECKLIST\": values.numberOfChecklists,\n                        \"NOTIFY_BEFORE_EXP_DAY\": values.notifyBeforeExpire,\n                        \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\"\n                    }\n                    console.log(obj)\n                    axiosInstance.post('api/Plans.svc/insert_plan', obj)\n                        .then(res => {\n                            // setMessage(res.data.response[0]['MESSAGE'])\n                            // setNotifyOpen(true)\n                            if(res.data.response[0]['CODE'] === '200'){\n                                alert(res.data.response[0]['MESSAGE'])\n                                props.reloadData()\n                            }else{\n                                alert(res.data.response[0]['MESSAGE'])\n                            }\n                        })\n                        \n                        .catch(err => console.log(err))\n                    setSubmitting(false)\n                }}\n\n                validationSchema={Yup.object().shape({\n\n                    planName: Yup.string()\n                        .required('Required'),\n                    planType: Yup.string()\n                        .required('Required'),\n                    price: Yup.number().positive().integer()\n                        .required('Required'),\n                    expiryDay: Yup.string()\n                        .required('Required'),\n                    graceDay: Yup.string()\n                        .required('Required'),\n                    notifyBeforeExpire: Yup.string()\n                        .required('Required'),\n                    storageSize: Yup.string()\n                        .required('Required'),\n                    imageAllow: Yup.number().positive().integer()\n                        .required('Required'),\n                    numberOfSites: Yup.number().positive().integer()\n                        .required('Required'),\n                    numberOfChecklists: Yup.number().positive().integer()\n                        .required('Required'),\n                    numberOfReport: Yup.number().positive().integer()\n                        .required('Required'),\n                    paymentMode: Yup.string()\n                        .required('Required'),\n\n                })}\n            >\n                {({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleReset,\n                }) =>\n                (\n                    <Form className={classes.form}>\n                        <Grid container spacing={1}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.planName && touched.planName}\n                                    autoComplete=\"planName\"\n                                    name=\"planName\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.planName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"planName\"\n                                    label=\"Plan Name\"\n                                    autoFocus\n                                    required\n                                    helperText={\n                                        errors.planName && touched.planName\n                                            ? errors.planName\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} >\n                                <TextField\n                                    error={errors.planType && touched.planType}\n                                    id=\"planType\"\n                                    select\n                                    label=\"Type\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.planType}\n                                    onChange={handleChange('planType')}                                   \n                                    fullWidth\n                                    size=\"small\"\n                                    required\n                                    helperText={\n                                        errors.planType && touched.planType\n                                            ? errors.planType\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Yes\">\n                                        Yes\n                                    </MenuItem>\n                                    <MenuItem value=\"No\">\n                                        No\n                                    </MenuItem>\n\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.price && touched.price}\n                                    autoComplete=\"price\"\n                                    name=\"price\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.price}\n                                    onChange={handleChange}                                \n                                    onBlur={handleBlur}\n                                    id=\"price\"\n                                    label=\"Price\"\n                                    required\n                                    helperText={\n                                        errors.price && touched.price\n                                            ? errors.price\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.expiryDay && touched.expiryDay}\n                                    autoComplete=\"expiryDay\"\n                                    name=\"expiryDay\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.expiryDay}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"expiryDay\"\n                                    label=\"Expiry Day\"\n                                    required\n                                    helperText={\n                                        errors.expiryDay && touched.expiryDay\n                                            ? errors.expiryDay\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.graceDay && touched.graceDay}\n                                    autoComplete=\"graceDay\"\n                                    name=\"graceDay\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.graceDay}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"graceDay\"\n                                    label=\"Grace Day\"\n                                    required\n                                    helperText={\n                                        errors.graceDay && touched.graceDay\n                                            ? errors.graceDay\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.notifyBeforeExpire && touched.notifyBeforeExpire}\n                                    autoComplete=\"notifyBeforeExpire\"\n                                    name=\"notifyBeforeExpire\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.notifyBeforeExpire}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"notifyBeforeExpire\"\n                                    label=\"Notify Before Expire\"\n                                    required\n                                    helperText={\n                                        errors.notifyBeforeExpire && touched.notifyBeforeExpire\n                                            ? errors.notifyBeforeExpire\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.storageSize && touched.storageSize}\n                                    autoComplete=\"storageSize\"\n                                    name=\"storageSize\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.storageSize}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"storageSize\"\n                                    label=\"Storage Size\"\n                                    required\n                                    helperText={\n                                        errors.storageSize && touched.storageSize\n                                            ? errors.storageSize\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.imageAllow && touched.imageAllow}\n                                    autoComplete=\"imageAllow\"\n                                    name=\"imageAllow\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.imageAllow}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"imageAllow\"\n                                    label=\"Images Allow Per Day\"\n                                    required\n                                    helperText={\n                                        errors.imageAllow && touched.imageAllow\n                                            ? errors.imageAllow\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.numberOfSites && touched.numberOfSites}\n                                    autoComplete=\"numberOfSites\"\n                                    name=\"numberOfSites\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.numberOfSites}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"numberOfSites\"\n                                    label=\"Number Of Sites\"\n                                    required\n                                    helperText={\n                                        errors.numberOfSites && touched.numberOfSites\n                                            ? errors.numberOfSites\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.numberOfChecklists && touched.numberOfChecklists}\n                                    autoComplete=\"numberOfChecklists\"\n                                    name=\"numberOfChecklists\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.numberOfChecklists}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"numberOfChecklists\"\n                                    label=\"Number of Checklists\"\n                                    required\n                                    helperText={\n                                        errors.numberOfChecklists && touched.numberOfChecklists\n                                            ? errors.numberOfChecklists\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.numberOfReport && touched.numberOfReport}\n                                    autoComplete=\"numberOfReport\"\n                                    name=\"numberOfReport\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values.numberOfReport}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"numberOfReport\"\n                                    label=\"Number of Report\"\n                                    required\n                                    helperText={\n                                        errors.numberOfReport && touched.numberOfReport\n                                            ? errors.numberOfReport\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.paymentMode && touched.paymentMode}\n                                    id=\"paymentMode\"\n                                    select\n                                    label=\"Payment Mode\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.paymentMode}\n                                    onChange={handleChange('paymentMode')}\n                                    fullWidth\n                                    size=\"small\"\n                                    required\n                                    helperText={\n                                        errors.paymentMode && touched.paymentMode\n                                            ? errors.paymentMode\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"Monthly\">\n                                        Monthly\n                                    </MenuItem>\n                                    <MenuItem value=\"Quaterly\">\n                                        Quaterly\n                                    </MenuItem>\n                                    <MenuItem value=\"Half-Yearly\">\n                                        Half-Yearly\n                                    </MenuItem>\n                                    <MenuItem value=\"Annually\">\n                                        Annually\n                                    </MenuItem>\n\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    type=\"button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className={classes.submit}\n                                    style ={{marginRight: \"5px\"}}\n                                    onClick={handleReset}\n                                    disabled={!dirty || isSubmitting}\n                                >\n                                    Reset\n                                </Button>\n\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style ={{marginLeft: \"5px\"}}\n                                    className={classes.submit}\n                                    disabled={isSubmitting}>\n                                    Submit\n                            </Button>\n                            </Grid>\n                        </Grid>\n\n                    </Form>\n                )\n                }\n            </Formik>\n        </>\n    )\n}\n\nexport default PlanForm\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanInfo.js",["1850","1851","1852","1853","1854","1855","1856","1857","1858","1859","1860"],"import React, { useEffect, useState } from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    },\n    tableRowSelectColor: {\n        backgroundColor: 'red',\n        color: \"white\"\n    },\n    tableRowHoverColor: {\n        backgroundColor: \"pink\"\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                fontSize: \"12px\",\n                padding: \"5px 3px\",\n                \n                // '&:nth-child(3)': { textAlign: 'center' },\n                // '&:nth-child(6)': { textAlign: 'center' },\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        MuiPaper: {\n            elevation4: {\n                boxShadow: \"0px 0px 0px 0px\"\n            }\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n                fontSize: \"13px\"\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\n            root: {\n                border: \"1px solid black\",\n                '&$selected': {\n                    backgroundColor: \"lightgrey\"\n                }\n            },\n            footer: {\n                '& td': {\n                    padding: \"0px\",\n                    margin: \"0px\"\n                }\n            }\n        },\n        MuiTypography: {\n            body2: {\n                fontSize: \"10px\"\n            }\n        },\n        MuiTablePagination: {\n            selectRoot: {\n                marginRight: \"5px\"\n            },\n            actions: {\n                marginLeft: \"5px\"\n            }\n        },\n        MainInputBase: {\n            input: {\n                fontSize: \"10px\"\n            }\n        }\n    },\n})\nfunction PlanInfo(props) {\n    const columns = [\n        {\n            name: \"View\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton\n                            color=\"primary\"\n                            size=\"small\"\n                            disabled={false}\n                        >\n                            <VisibilityRounded\n                                fontSize=\"small\"\n                                onClick={() => handleView(tableMeta)}\n                            />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"PLAN_TYPE\",\n            label: \"Plan Name\",\n            options: {\n                filter: false,\n                sort: false,\n                // customBodyRender: (value, tableMeta, updateValue) => {\n                //     return (\n                //        tableMeta.rowIndex + 1\n                //     );\n                // }               \n            }\n        },\n        {\n            name: \"IS_IT_PUBLIC\",\n            label: \"Is Public\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"PLAN_PRICE\",\n            label: \"Price(Rs.)\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"EXP_DAY\",\n            label: \"Validity(In day)\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"GRACE_DAY\",\n            label: \"Grace period(In day)\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NOTIFY_BEFORE_EXP_DAY\",\n            label: \"Notify Before Expiry\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NO_IMAGES_ALLOW_PERDAY\",\n            label: \"Images Allowed\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NO_OF_CHECKLIST\",\n            label: \"No.Of Checklist\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NO_OF_REPORT\",\n            label: \"No.Of Reports\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"NO_SITES_ALLOW\",\n            label: \"No.Of Sites\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"PAYMENT_MODE\",\n            label: \"Payment Mode\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"SIZE\",\n            label: \"Storage Size\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n        {\n            name: \"DESCRIPTION\",\n            label: \"Description\",\n            options: {\n                filter: false,\n                sort: false,\n            }\n        },\n    ]\n    const options = {\n        filter: false,\n        print: false,\n        viewColumns: false,\n        search:false,\n        selectableRows: 'none',\n        filterType: 'dropdown',\n        responsive: 'standard',\n        pagination:false,\n        rowsPerPage: 5,\n        rowsPerPageOptions: [5, 10, 15, 100],\n        download: false,\n        downloadOptions: {\n            filename: 'tableDownload.csv',\n            separator: ',',\n            filterOptions: {\n                useDisplayedColumnsOnly: true || false,\n                useDisplayedRowsOnly: true || true\n            } || false\n        },\n        tableBodyHeight: '',\n        tableBodyMaxHeight: \"\",\n        setTableProps: () => {\n            return {\n                size: \"small\"\n            }\n        },\n    }\n\n    console.log(props.data)\n    const handleView =(data) => {\n        console.log(data['tableData'][data['rowIndex']]['PLAN_ID'])\n        props.viewDetails(data['tableData'][data['rowIndex']]['PLAN_ID'])\n        props.activeEdit(data['tableData'][data['rowIndex']])\n    }\n\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title={\"\"}\n                    data={props.data}\n                    columns={columns}\n                    options={options}\n                />\n            </MuiThemeProvider>\n        </>\n    )\n}\n\nexport default PlanInfo\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/priceplans/createPlan/PlanEditForm.js",["1861","1862","1863","1864","1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876"],"import React, { useState, useEffect } from 'react'\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    MenuItem,\n    IconButton\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\nfunction PlanEditForm(props) {\n    const classes = useStyles();\n    // const data = {\n    //     planName: \"\",\n    //     planType: \"\",\n    //     price: \"\",\n    //     expiryDay: \"\",\n    //     graceDay: \"\",\n    //     notifyBeforeExpire: \"\",\n    //     SIZE: \"\",\n    //     imageAllow: \"\",\n    //     numberOfSites: \"\",\n    //     numberOfChecklists: \"\",\n    //     numberOfReport: \"\",\n    //     paymentMode: \"\"\n    // }\n    \n    const { editData } = props\n    console.log(editData)\n    const updatedData = {\n        \"IS_IT_PUBLIC\": editData['IS_IT_PUBLIC'] === '1'? \"Yes\": \"No\",\n        \"PLAN_TYPE\": editData['PLAN_TYPE'],\n        \"PLAN_PRICE\": editData['PLAN_PRICE'],\n        \"GRACE_DAY\": editData['GRACE_DAY'],\n        \"EXP_DAY\": editData['EXP_DAY'],\n        \"SIZE\": editData['SIZE'],\n        \"NO_IMAGES_ALLOW_PERDAY\": editData['NO_IMAGES_ALLOW_PERDAY'],\n        \"NO_SITES_ALLOW\": editData['NO_SITES_ALLOW'],\n        \"NO_OF_REPORT\": editData['NO_OF_REPORT'],\n        \"PAYMENT_MODE\": editData['PAYMENT_MODE'],\n        \"NO_OF_CHECKLIST\": editData['NO_OF_CHECKLIST'],\n        \"NOTIFY_BEFORE_EXP_DAY\": editData['NOTIFY_BEFORE_EXP_DAY'],\n    }\n   \n    console.log(editData)\n    console.log(updatedData)\n\n    return (\n        <>\n            <Formik\n                initialValues={updatedData}\n                onSubmit={(values, { setSubmitting, handleReset }) => {\n                    console.log(values)\n                    // setSubmitting(true);\n                    // const obj = {\n                    //     \"IS_IT_PUBLIC\": updatedData['IS_IT_PUBLIC'] === \"Yes\" ? 1: 0,\n                    //     \"PLAN_TYPE\": updatedData['PLAN_TYPE'],\n                    //     \"PLAN_PRICE\": updatedData['PLAN_PRICE'],\n                    //     \"GRACE_DAY\": updatedData['GRACE_DAY'],\n                    //     \"EXP_DAY\": updatedData['EXP_DAY'],\n                    //     \"SIZE\": updatedData['SIZE'],\n                    //     \"NO_IMAGES_ALLOW_PERDAY\": updatedData['NO_IMAGES_ALLOW_PERDAY'],\n                    //     \"NO_SITES_ALLOW\": updatedData['NO_SITES_ALLOW'],\n                    //     \"NO_OF_REPORT\": updatedData['NO_OF_REPORT'],\n                    //     \"PAYMENT_MODE\": updatedData['PAYMENT_MODE'],\n                    //     \"NO_OF_CHECKLIST\": updatedData['NO_OF_CHECKLIST'],\n                    //     \"NOTIFY_BEFORE_EXP_DAY\": updatedData['NOTIFY_BEFORE_EXP_DAY'],\n                    //     \"CREATED_BY\": localStorage.getItem('client_userID'),\n                    // }\n                    // console.log(obj)\n                    // axiosInstance.post('api/Plans.svc/insert_plan', obj)\n                    //     .then(res => {\n                    //         // setMessage(res.data.response[0]['MESSAGE'])\n                    //         // setNotifyOpen(true)\n                    //         if(res.data.response[0]['CODE'] === '200'){\n                    //             alert(res.data.response[0]['MESSAGE'])\n                    //             props.reloadData()\n                    //         }else{\n                    //             alert(res.data.response[0]['MESSAGE'])\n                    //         }\n                    //     })\n                        \n                    //     .catch(err => console.log(err))\n                    // setSubmitting(false)\n                }}\n                validationSchema={Yup.object().shape({\n                    PLAN_TYPE: Yup.string()\n                        .required('Required'),\n                    IS_IT_PUBLIC: Yup.string()\n                        .required('Required'),\n                    PLAN_PRICE: Yup.number().typeError('Plan Price must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    EXP_DAY: Yup.number('Must be a number').typeError('Expiry day must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    GRACE_DAY: Yup.number('Must be a number').typeError('Grace day must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    NOTIFY_BEFORE_EXP_DAY: Yup.number('Must be a number').typeError('Notify Before Expiry day must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    SIZE: Yup.number('Must be a number').typeError('Storage Size must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    NO_IMAGES_ALLOW_PERDAY: Yup.number('Must be a number').typeError('Number of Images Allowed must be a number')\n                        .required('Required').positive('Must be greater than Zero').integer(),\n                    NO_SITES_ALLOW: Yup.number('Must be a number').typeError('Number of Sites Allowed must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    NO_OF_CHECKLIST: Yup.number('Must be a number').typeError('Number of Checklists must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    NO_OF_REPORT: Yup.number('Must be a number').typeError('Number of Reports must be a number')\n                    .required('Required').positive('Must be greater than Zero').integer(),\n                    PAYMENT_MODE: Yup.string()\n                        .required('Required'),\n\n                })}\n            >\n                {({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleReset,\n                }) =>\n                (\n                    <Form className={classes.form}>\n                        <Grid container spacing={1}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['PLAN_TYPE'] && touched['PLAN_TYPE']}\n                                    autoComplete=\"PLAN_TYPE\"\n                                    name=\"PLAN_TYPE\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['PLAN_TYPE']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"PLAN_TYPE\"\n                                    label=\"Plan Name\"\n                                    autoFocus\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['PLAN_TYPE'] && touched['PLAN_TYPE']\n                                            ? errors['PLAN_TYPE']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} >\n                                <TextField\n                                    error={errors['IS_IT_PUBLIC'] && touched['IS_IT_PUBLIC']}\n                                    id=\"IS_IT_PUBLIC\"\n                                    select\n                                    name=\"IS_IT_PUBLIC\"\n                                    label=\"Plan Type\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values['IS_IT_PUBLIC']}\n                                    onChange={handleChange('IS_IT_PUBLIC')}                                   \n                                    fullWidth\n                                    size=\"small\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['IS_IT_PUBLIC'] && touched['IS_IT_PUBLIC']\n                                            ? errors['IS_IT_PUBLIC']\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Yes\">\n                                        Yes\n                                    </MenuItem>\n                                    <MenuItem value=\"No\">\n                                        No\n                                    </MenuItem>\n\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['PLAN_PRICE'] && touched['PLAN_PRICE']}\n                                    autoComplete=\"PLAN_PRICE\"\n                                    name=\"PLAN_PRICE\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['PLAN_PRICE']}\n                                    onChange={handleChange}                                \n                                    onBlur={handleBlur}\n                                    id=\"PLAN_PRICE\"\n                                    label=\"Price\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['PLAN_PRICE'] && touched['PLAN_PRICE']\n                                            ? errors['PLAN_PRICE']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['EXP_DAY'] && touched['EXP_DAY']}\n                                    autoComplete=\"EXP_DAY\"\n                                    name=\"EXP_DAY\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['EXP_DAY']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"EXP_DAY\"\n                                    label=\"Expiry Day\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['EXP_DAY'] && touched['EXP_DAY']\n                                            ? errors['EXP_DAY']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['GRACE_DAY'] && touched['GRACE_DAY']}\n                                    autoComplete=\"GRACE_DAY\"\n                                    name=\"GRACE_DAY\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['GRACE_DAY']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"GRACE_DAY\"\n                                    label=\"Grace Day\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['GRACE_DAY'] && touched['GRACE_DAY']\n                                            ? errors['GRACE_DAY']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['NOTIFY_BEFORE_EXP_DAY'] && touched['NOTIFY_BEFORE_EXP_DAY']}\n                                    autoComplete=\"NOTIFY_BEFORE_EXP_DAY\"\n                                    name=\"NOTIFY_BEFORE_EXP_DAY\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['NOTIFY_BEFORE_EXP_DAY']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"NOTIFY_BEFORE_EXP_DAY\"\n                                    label=\"Notify Before Expire\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['NOTIFY_BEFORE_EXP_DAY'] && touched['NOTIFY_BEFORE_EXP_DAY']\n                                            ? errors['NOTIFY_BEFORE_EXP_DAY']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['SIZE'] && touched['SIZE']}\n                                    autoComplete=\"SIZE\"\n                                    name=\"SIZE\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['SIZE']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"SIZE\"\n                                    label=\"Storage Size\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['SIZE'] && touched['SIZE']\n                                            ? errors['SIZE']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['NO_IMAGES_ALLOW_PERDAY'] && touched['NO_IMAGES_ALLOW_PERDAY']}\n                                    autoComplete=\"NO_IMAGES_ALLOW_PERDAY\"\n                                    name=\"NO_IMAGES_ALLOW_PERDAY\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['NO_IMAGES_ALLOW_PERDAY']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"NO_IMAGES_ALLOW_PERDAY\"\n                                    label=\"Images Allow Per Day\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['NO_IMAGES_ALLOW_PERDAY'] && touched['NO_IMAGES_ALLOW_PERDAY']\n                                            ? errors['NO_IMAGES_ALLOW_PERDAY']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['NO_SITES_ALLOW'] && touched['NO_SITES_ALLOW']}\n                                    autoComplete=\"NO_SITES_ALLOW\"\n                                    name=\"NO_SITES_ALLOW\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['NO_SITES_ALLOW']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"NO_SITES_ALLOW\"\n                                    label=\"Number Of Sites\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['NO_SITES_ALLOW'] && touched['NO_SITES_ALLOW']\n                                            ? errors['NO_SITES_ALLOW']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['NO_OF_CHECKLIST'] && touched['NO_OF_CHECKLIST']}\n                                    autoComplete=\"NO_OF_CHECKLIST\"\n                                    name=\"NO_OF_CHECKLIST\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['NO_OF_CHECKLIST']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"NO_OF_CHECKLIST\"\n                                    label=\"Number of Checklists\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['NO_OF_CHECKLIST'] && touched['NO_OF_CHECKLIST']\n                                            ? errors['NO_OF_CHECKLIST']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['NO_OF_REPORT'] && touched['NO_OF_REPORT']}\n                                    autoComplete=\"NO_OF_REPORT\"\n                                    name=\"NO_OF_REPORT\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    size=\"small\"\n                                    value={values['NO_OF_REPORT']}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    id=\"NO_OF_REPORT\"\n                                    label=\"Number of Report\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['NO_OF_REPORT'] && touched['NO_OF_REPORT']\n                                            ? errors['NO_OF_REPORT']\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors['PAYMENT_MODE'] && touched['PAYMENT_MODE']}\n                                    id=\"PAYMENT_MODE\"\n                                    name=\"PAYMENT_MODE\"\n                                    select\n                                    label=\"Payment Mode\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values['PAYMENT_MODE']}\n                                    onChange={handleChange('PAYMENT_MODE')}\n                                    fullWidth\n                                    size=\"small\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                    helperText={\n                                        errors['PAYMENT_MODE'] && touched['PAYMENT_MODE']\n                                            ? errors['PAYMENT_MODE']\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"Monthly\">\n                                        Monthly\n                                    </MenuItem>\n                                    <MenuItem value=\"Quaterly\">\n                                        Quaterly\n                                    </MenuItem>\n                                    <MenuItem value=\"Half-Yearly\">\n                                        Half-Yearly\n                                    </MenuItem>\n                                    <MenuItem value=\"Annually\">\n                                        Annually\n                                    </MenuItem>\n\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    type=\"button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className={classes.submit}\n                                    style ={{marginRight: \"5px\"}}\n                                    onClick={handleReset}\n                                    disabled={!dirty || isSubmitting}\n                                >\n                                    Reset\n                                </Button>\n\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style ={{marginLeft: \"5px\"}}\n                                    className={classes.submit}\n                                    disabled={isSubmitting}>\n                                    Submit\n                            </Button>\n                            </Grid>\n                        </Grid>\n\n                    </Form>\n                )\n                }\n            </Formik>\n        </>\n    )\n}\n\nexport default PlanEditForm\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/PaymentPage/PaymentPage.js",["1877"],"import axios from 'axios';\nimport React,{useEffect} from 'react'\nimport axiosInstance from '../../components/Utils/AxiosInstance';\n\nfunction PaymentPage() {\n    const getUrlParams = url => `${url}?`.split('?')[1]\n        .split('&').reduce((params, pair) =>\n            ((key, val) => key ? { ...params, [key]: val } : params)\n                (...`${pair}=`.split('=').map(decodeURIComponent)), {});\n    const paymentID = getUrlParams(window.location.href)['payment_id']\n    const paymentStatus = getUrlParams(window.location.href)['payment_status']\n    const id = getUrlParams(window.location.href)['id']\n    const transactionID = getUrlParams(window.location.href)['transaction_id']\n\n    console.log(paymentID, paymentStatus, id, transactionID)\n    useEffect(() => {\n        const obj ={\n            \"STATUS\": paymentStatus,\n            \"SUCCESS_ID\":paymentID,\n            \"PAYMENT_GATWAY_ID\":id,\n            \"ORDER_ID\": transactionID       \n        }\n        axiosInstance.post('api/Plan_Purchase.svc/order_status_update', obj)\n        // axios.post('http://d97316973874.ngrok.io/Plan_Purchase.svc/order_status_update', obj)\n        .then(res => console.log(res))\n        .catch(err => console.log(err))\n    })\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default PaymentPage\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/AuditReport.js",["1878","1879","1880","1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893","1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910","1911","1912","1913","1914"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper,\n    RadioGroup,\n    FormLabel,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport Table from \"./Component/Table\";\nimport CustomizedRadios from './Component/RadioButtons';\nimport Daily from './Component/Daily';\nimport Weekly from './Component/Weekly';\nimport Monthly from './Component/Monthly'\n//component\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//     input: {\n//         display: 'none',\n//     },\n//     formControl: {\n//         margin: theme.spacing(1),\n//         minWidth: 120\n//     },\n//     root: {\n//         margin: 0,\n//         padding: theme.spacing(2),\n//     },\n//     closeButton: {\n//         position: 'absolute',\n//         right: theme.spacing(1),\n//         top: theme.spacing(1),\n//         color: theme.palette.grey[500],\n//     },\n//     selectEmpty: {\n//         marginTop: theme.spacing(2),\n//     },\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }))\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function AuditReport() {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n        startDay:\"\",\n        endDay:\"\",\n        startDate: \"\",\n        endDate: \"\"\n    })\n    const [dataTableData, setDataTableData] = useState()\n    const [report, setReport] = useState('Daily')\n    const history = useHistory();\n    const handleValue = (value) => {\n        setReport(value)\n    }\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                <Paper elevation={4} style={{ borderRadius: \"20px\", width:\"100%\" }}><h2>Audit Slots</h2></Paper>\n                </Grid>\n                <Grid item xs={4} container>\n                    <Paper elevation={4} style={{ borderRadius: \"20px\", width:\"100%\", height:\"468px\" }}>\n                        <Grid item xs={12}>\n                            <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\", marginBottom: \"50px\"}}>\n                                <CustomizedRadios report={handleValue} />\n                            </Grid>\n                            <div className={classes.paper}>\n                                {/* <Formik \n                                    initialValues={data}\n                                    onSubmit={(values, { setSubmitting, handleReset }) => {\n                                        console.log(values)\n                                        setSubmitting(true);\n\n\n                                    }}\n\n                                    validationSchemaOne={Yup.object().shape({\n\n                                        startTime: Yup.string()\n                                            .required('Required'),\n                                        endTime: Yup.string()\n                                            .required('Required'),\n                                        auditCloseFlag: Yup.string()\n                                            .required('Required'),\n                                        selectChecklist: Yup.string()\n                                            .required('Required'),\n                                    })}\n                                    validationSchemaTwo={Yup.object().shape({\n\n                                        auditCloseFlag: Yup.string()\n                                            .required('Required'),\n                                        selectChecklist: Yup.string()\n                                            .required('Required'),\n                                    })}\n                                >\n                                    {({\n                                        values,\n                                        touched,\n                                        errors,\n                                        dirty,\n                                        isSubmitting,\n                                        handleChange,\n                                        handleBlur,\n                                        handleReset,\n                                    }) =>\n                                    (\n                                        <Form className={classes.form}>\n                                            <Grid container spacing={2}>\n                                                {report === \"Daily\" ?\n                                                    <>\n                                                        <Grid item xs={12} sm={6}>\n                                                            <TextField\n                                                                error={errors.startTime && touched.startTime}\n                                                                autoComplete=\"startTime\"\n                                                                id=\"startTime\"\n                                                                label='Start Time'\n                                                                type=\"time\"\n                                                                name=\"startTime\"\n                                                                variant=\"outlined\"\n                                                                fullWidth\n                                                                value={values.startTime}\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                required\n                                                                InputLabelProps={{\n                                                                    shrink: true,\n                                                                }}\n                                                                inputProps={{\n                                                                    style: {\n                                                                        paddingRight: 2\n                                                                    }\n                                                                }}\n                                                                helperText={\n                                                                    errors.startTime && touched.startTime\n                                                                        ? errors.startTime\n                                                                        : null\n                                                                }\n                                                            />\n                                                        </Grid>\n                                                        <Grid item xs={12} sm={6}>\n                                                            <TextField\n                                                                error={errors.endTime && touched.endTime}\n                                                                autoComplete=\"endTime\"\n                                                                id=\"endTime\"\n                                                                label=\"End Time\"\n                                                                type=\"time\"\n                                                                name=\"endTime\"\n                                                                variant=\"outlined\"\n                                                                fullWidth\n                                                                value={values.endTime}\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                required\n                                                                InputLabelProps={{\n                                                                    shrink: true,\n\n                                                                }}\n                                                                inputProps={{\n                                                                    style: {\n                                                                        paddingRight: 2\n                                                                    }\n                                                                }}\n                                                                helperText={\n                                                                    errors.endTime && touched.endTime\n                                                                        ? errors.endTime\n                                                                        : null\n                                                                }\n                                                            />\n                                                        </Grid>\n                                                    </>\n                                                    : \"\"}\n                                                <Grid item xs={12} >\n                                                    <TextField\n                                                        error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                                        id=\"auditCloseFlag\"\n                                                        select\n                                                        label=\"Audit Close Flag\"\n                                                        variant=\"outlined\"\n                                                        className={classes.textField}\n                                                        value={values.auditCloseFlag}\n                                                        onChange={handleChange(\"auditCloseFlag\")}\n                                                        fullWidth\n                                                        required\n                                                        helperText={\n                                                            errors.auditCloseFlag && touched.auditCloseFlag\n                                                                ? errors.auditCloseFlag\n                                                                : null\n                                                        }\n                                                    >\n                                                        <MenuItem value=\"\">\n                                                            <em>None</em>\n                                                        </MenuItem>\n                                                        <MenuItem value=\"Yes\">Yes</MenuItem>\n                                                        <MenuItem value=\"No\">No</MenuItem>\n                                                    </TextField>\n                                                </Grid>\n                                                <Grid item xs={12} >\n                                                    <TextField\n                                                        error={errors.selectChecklist && touched.selectChecklist}\n                                                        id=\"selectChecklist\"\n                                                        select\n                                                        label=\"Checklist Name\"\n                                                        variant=\"outlined\"\n                                                        className={classes.textField}\n                                                        value={values.selectChecklist}\n                                                        onChange={handleChange(\"selectChecklist\")}\n                                                        fullWidth\n                                                        required\n                                                        helperText={\n                                                            errors.selectChecklist && touched.selectChecklist\n                                                                ? errors.selectChecklist\n                                                                : null\n                                                        }\n                                                    >\n                                                        <MenuItem value=\"\">\n                                                            <em>None</em>\n                                                        </MenuItem>\n                                                        <MenuItem value=\"Checklist-1\">\n                                                            <em>Checklist-1</em>\n                                                        </MenuItem>\n                                                        <MenuItem value=\"Checklist-2\">\n                                                            <em>Checklist-2</em>\n                                                        </MenuItem>\n                                                    </TextField>\n                                                </Grid>\n                                            </Grid>\n                                            <Grid item xs={12} style={{ display: \"flex\", }}>\n                                                <Button\n                                                    type=\"button\"\n                                                    className=\"outline\"\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    style ={{marginRight: \"10px\"}}\n                                                    className={classes.submit}\n                                                    onClick={handleReset}\n                                                    disabled={!dirty || isSubmitting}\n                                                >\n                                                    Reset\n                                                </Button>\n                                                <Button\n                                                    type=\"submit\"\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    className={classes.submit}\n                                                    disabled={isSubmitting}>\n                                                    Submit\n                                                </Button>\n                                            </Grid>\n                                        </Form>\n                                    )\n                                    }\n                                </Formik>\n                                */}\n                            </div>\n                            <div className={classes.paper}>\n                             {report === \"Daily\" ?<Daily/> : report === \"Weekly\" ? <Weekly/> : <Monthly/>}\n                            </div>\n                        </Grid>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>\n                    <Table\n                    // data={dataTableData}\n                    // siteID={props.siteID}\n                    // activeEdit={handleActiveEdit}\n                    // reloadTable={getData}\n                    />\n                </Grid>\n            </Grid>\n\n        </>\n    );\n}",["1915","1916"],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/RadioButtons.js",["1917"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles({\n    root: {\n        '&:hover': {\n            backgroundColor: 'transparent',\n        },\n    },\n    icon: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n        backgroundColor: '#f5f8fa',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n        '$root.Mui-focusVisible &': {\n            outline: '2px auto rgba(19,124,189,.6)',\n            outlineOffset: 2,\n        },\n        'input:hover ~ &': {\n            backgroundColor: '#ebf1f5',\n        },\n        'input:disabled ~ &': {\n            boxShadow: 'none',\n            background: 'rgba(206,217,224,.5)',\n        },\n    },\n    checkedIcon: {\n        backgroundColor: '#137cbd',\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n        '&:before': {\n            display: 'block',\n            width: 16,\n            height: 16,\n            backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n            content: '\"\"',\n        },\n        'input:hover ~ &': {\n            backgroundColor: '#106ba3',\n        },\n    },\n});\n\n// Inspired by blueprintjs\nfunction StyledRadio(props) {\n    const classes = useStyles();\n\n    return (\n        <Radio\n            className={classes.root}\n            disableRipple\n            color=\"default\"\n            checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\n            icon={<span className={classes.icon} />}\n            {...props}\n        />\n    );\n}\n\nexport default function CustomizedRadios(props) {\n    const handleChange = (value) => {\n        props.report(value)\n    }\n    return (\n        <FormControl component=\"fieldset\">\n            {/* <FormLabel component=\"legend\" style={{textAlign:\"center\"}}>Audit Report</FormLabel> */}\n            <RadioGroup row defaultValue=\"Daily\" aria-label=\"report\" name=\"customized-radios\" onChange={(e) => handleChange(e.target.value)}>\n                <FormControlLabel value=\"Daily\" control={<StyledRadio />} label=\"Daily\" />\n                <FormControlLabel value=\"Weekly\" control={<StyledRadio />} label=\"Weekly\" />\n                <FormControlLabel value=\"Monthly\" control={<StyledRadio />} label=\"Monthly\" />\n            </RadioGroup>\n        </FormControl>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Table.js",["1918","1919","1920","1921","1922","1923","1924","1925","1926","1927","1928","1929","1930","1931","1932","1933","1934","1935","1936"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\";\nimport axiosInstance from \"../../../components/Utils/AxiosInstance\";\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MuiPaper: {\n            rounded: {\n                borderRadius: \"20px\"\n            }\n        },\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n\n            }\n        },\n        MUIDataTableToolbar: {\n\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                color: \"white\",\n                padding: \"5px 10px\",\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#12ACC6',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: useStyles.tableRowSelectColor\n                }\n            }\n        },\n    },\n})\n\nexport default function Tables(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [indexData, setIndexData] = useState({})\n    const [data, setData] = useState(\"\")\n    const [open, setOpen] = useState(false)\n    const [openAdd, setOpenAdd] = useState(false)\n    const [rowIndex, setRowIndex] = useState()\n    const [sectionID, setSectionID] = useState('')\n\n    const columns = [\n        {\n            name: \"Edit\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" >\n                            <EditRoundedIcon onClick={() => {\n                                return (\n                                    handleEdit(tableMeta, tableMeta.rowIndex)\n                                )\n                            }} />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"Delete\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <IconButton color=\"primary\" size=\"small\" onClick={() => handleDelete(tableMeta, tableMeta.rowIndex)}>\n                            <DeleteRoundedIcon />\n                        </IconButton>\n                    );\n                }\n            }\n        },\n        {\n            name: \"AUDIT_TYPE\",\n            label: \"Check Type\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"START_TIME\",\n            label: \"Start\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"END_TIME\",\n            label: \"End\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"CHECK_LIST_NAME\",\n            label: \"Checklist Name\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    tableMeta.rowIndex === rowIndex\n                        ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n                        : <div>{value}</div>\n                )\n            }\n        },\n        {\n            name: \"LASTUPDATED_ON\",\n            label: \"Updated On\",\n            options: {\n                filter: false,\n                sort: true,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                     <div>{value}</div>\n                )\n            }\n        },\n        \n    ]\n\n    const handleEdit = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        props.activeEdit(tableMeta.tableData[rowIndex])\n        //     setSectionID(tableMeta.tableData[rowIndex]['SECTIONS_ID'])\n        // setRowIndex(rowIndex)\n\n    }\n\n    const handleDelete = (tableMeta, rowIndex) => {\n        console.log(tableMeta.tableData[rowIndex])\n        let selectedShiftID = tableMeta.tableData[rowIndex]['SHIFT_ID']\n        console.log(selectedShiftID)\n        let shift =\n        {\n            \"SHIFT_ID\": selectedShiftID\n        }\n        axiosInstance.post(`api/Shift_Timing.svc/delete_shift_timing`, shift)\n        // axios.post('http://betaapp.hygienequotient.com/api/Shift_Timing.svc/delete_shift_timing', shift)\n            .then(res => {\n                if (res.data.response[0]['CODE'] === '200') {\n                    alert(res.data.response[0]['MESSAGE'])\n                    props.reloadTable()\n                } else {\n                    alert(res.data.response[0]['MESSAGE'])\n                }\n\n            })\n            .catch(err => console.log(err))\n    }\n\n    console.log(indexData)\n    console.log(props.data)\n    console.log(props)\n    return (\n        <>\n            <MuiThemeProvider theme={theme}>\n                <MUIDataTable\n                    title=\"Audit Slots\"\n                    // data={props.saveOpen ? props.data ? props.data : 'isLoading...' : \"\"}\n                    data={props.data}\n                    columns={columns}\n                    options={{\n                        filter: true,\n                        selectableRows: 'none',\n                        filterType: 'dropdown',\n                        responsive: 'standard',\n                        rowsPerPage: 5,\n                        download: true,\n                        downloadOptions: {\n                            filename: 'tableDownload.csv',\n                            separator: ',',\n                            filterOptions: {\n                                useDisplayedColumnsOnly: true || false,\n                                useDisplayedRowsOnly: true || true\n                            } || false\n                        },\n\n                        tableBodyHeight: '350px',\n                        tableBodyMaxHeight: \"\",\n                        setTableProps: () => {\n                            return {\n                                padding: 'default'\n                            }\n                        },\n                    }}\n                />\n            </MuiThemeProvider>\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Daily.js",["1937","1938","1939","1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper,\n    RadioGroup,\n    FormLabel,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\n//component\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function Daily(props) {\n\n\n    const classes = useStyles();\n    const [checkListArr, setCheckListArr] = useState([])\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n\n    })\n    const history = useHistory();\n    useEffect(() => {\n        getCheckList()\n    }, [])\n\n    function getCheckList() {\n        axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n            .then(res => {\n                setCheckListArr([...res.data.data])\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    return (\n        <>\n            <Formik\n                initialValues={data}\n                onSubmit={(values, { setSubmitting, handleReset }) => {\n                    setSubmitting(true);\n                    const obj = {\n                        \"SITE_GUID\": props.siteID,\n                        \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                        \"AUDIT_TYPE\": \"Daily\",\n                        \"START_DAY\": null,\n                        \"END_DAY\": null,\n                        \"START_TIME\": values.startTime,\n                        \"END_TIME\": values.endTime,\n                        \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : 0,\n                        \"CREATED_BY\": localStorage.getItem('client_userID')\n                    }\n                    console.log(obj)\n                    console.log(values)\n\n                    axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                        .then(res => {\n                            if (res.data.response[0]['CODE'] === \"200\") {\n                                props.reload()\n                            } else {\n                                alert(res.data.response[0]['MESSAGE'])\n                            }\n                        })\n                        .then(setSubmitting(false))\n                        .catch(err => console.log(err))\n                }}\n\n                validationSchema={Yup.object().shape({\n\n                    startTime: Yup.string()\n                        .required('Required'),\n                    endTime: Yup.string()\n                        .required('Required'),\n                    auditCloseFlag: Yup.string()\n                        .required('Required'),\n                    selectChecklist: Yup.string()\n                        .required('Required'),\n                })}\n\n            >\n                {({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleReset,\n                }) =>\n                (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.startTime && touched.startTime}\n                                    autoComplete=\"startTime\"\n                                    id=\"startTime\"\n                                    label='Start Time'\n                                    type=\"time\"\n                                    name=\"startTime\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    value={values.startTime}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    inputProps={{\n                                        style: {\n                                            paddingRight: 2\n                                        }\n                                    }}\n                                    helperText={\n                                        errors.startTime && touched.startTime\n                                            ? errors.startTime\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.endTime && touched.endTime}\n                                    autoComplete=\"endTime\"\n                                    id=\"endTime\"\n                                    label=\"End Time\"\n                                    type=\"time\"\n                                    name=\"endTime\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    value={values.endTime}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true,\n\n                                    }}\n                                    inputProps={{\n                                        style: {\n                                            paddingRight: 2\n                                        }\n                                    }}\n                                    helperText={\n                                        errors.endTime && touched.endTime\n                                            ? errors.endTime\n                                            : null\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                    id=\"auditCloseFlag\"\n                                    select\n                                    label=\"Audit Close Flag\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.auditCloseFlag}\n                                    onChange={handleChange(\"auditCloseFlag\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.auditCloseFlag && touched.auditCloseFlag\n                                            ? errors.auditCloseFlag\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                                    <MenuItem value=\"No\">No</MenuItem>\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.selectChecklist && touched.selectChecklist}\n                                    id=\"selectChecklist\"\n                                    select\n                                    label=\"Checklist Name\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.selectChecklist}\n                                    onChange={handleChange(\"selectChecklist\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.selectChecklist && touched.selectChecklist\n                                            ? errors.selectChecklist\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {checkListArr && checkListArr.map(item => (\n                                        <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\", }}>\n                            <Button\n                                type=\"button\"\n                                className=\"outline\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ marginRight: \"10px\" }}\n                                className={classes.submit}\n                                onClick={handleReset}\n                                disabled={!dirty || isSubmitting}\n                            >\n                                Reset\n                                                </Button>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                disabled={isSubmitting}>\n                                Submit\n                            </Button>\n                        </Grid>\n                    </Form>\n                )\n                }\n            </Formik>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Weekly.js",["1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper,\n    RadioGroup,\n    FormLabel,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\n//component\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//     input: {\n//         display: 'none',\n//     },\n//     formControl: {\n//         margin: theme.spacing(1),\n//         minWidth: 120\n//     },\n//     root: {\n//         margin: 0,\n//         padding: theme.spacing(2),\n//     },\n//     closeButton: {\n//         position: 'absolute',\n//         right: theme.spacing(1),\n//         top: theme.spacing(1),\n//         color: theme.palette.grey[500],\n//     },\n//     selectEmpty: {\n//         marginTop: theme.spacing(2),\n//     },\n//     container: {\n//         display: \"flex\",\n//         flexWrap: \"wrap\"\n//     },\n//     textField: {\n//         marginLeft: theme.spacing(1),\n//         marginRight: theme.spacing(1),\n//         // width: 200\n//     }\n// }))\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function Weekly(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startDay: \"\",\n        endDay: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n\n    })\n    const history = useHistory();\n    const [checkListArr, setCheckListArr] = useState([])\n    useEffect(() => {\n        getCheckList()\n    }, [])\n\n    function getCheckList() {\n        axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n            .then(res => {\n                setCheckListArr([...res.data.data])\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n    return (\n        <>\n            <Formik\n                initialValues={data}\n                onSubmit={(values, { setSubmitting, handleReset }) => {\n                    setSubmitting(true);\n                    const obj = {\n                        \"SITE_GUID\": props.siteID,\n                        \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                        \"AUDIT_TYPE\": \"Weekly\",\n                        \"START_DAY\": values.startDay,\n                        \"END_DAY\": values.endDay,\n                        \"START_TIME\": null,\n                        \"END_TIME\": null,\n                        \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : 0,\n                        \"CREATED_BY\": localStorage.getItem('client_userID')\n                    }\n                    console.log(obj)\n                    console.log(values)\n\n                    axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                        .then(res => {\n                            if (res.data.response[0]['CODE'] === \"200\") {\n                                props.reload()\n                            } else {\n                                alert(res.data.response[0]['MESSAGE'])\n                            }\n                        })\n                        .then(setSubmitting(false))\n                        .catch(err => console.log(err))\n                }}\n\n                validationSchema={Yup.object().shape({\n\n                    startDay: Yup.number()\n                        .required('Required'),\n                    endDay: Yup.number().notOneOf([Yup.ref('startDay'), null], \"End Day cannot be same as Start Day\")\n                        .required('Required'),\n                    auditCloseFlag: Yup.string()\n                        .required('Required'),\n                    selectChecklist: Yup.string()\n                        .required('Required'),\n                })}\n\n            >\n                {({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleReset,\n                }) =>\n                (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.startDay && touched.startDay}\n                                    id=\"startDay\"\n                                    select\n                                    label=\"Start Day\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.startDay}\n                                    onChange={handleChange(\"startDay\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.startDay && touched.startDay\n                                            ? errors.startDay\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"1\">Sunday</MenuItem>\n                                    <MenuItem value=\"2\">Monday</MenuItem>\n                                    <MenuItem value=\"3\">Tuesday</MenuItem>\n                                    <MenuItem value=\"4\">Wednesday</MenuItem>\n                                    <MenuItem value=\"5\">Thursday</MenuItem>\n                                    <MenuItem value=\"6\">Friday</MenuItem>\n                                    <MenuItem value=\"7\">Saturday</MenuItem>\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.endDay && touched.endDay}\n                                    id=\"endDay\"\n                                    select\n                                    label=\"End Day\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.endDay}\n                                    onChange={handleChange(\"endDay\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.endDay && touched.endDay\n                                            ? errors.endDay\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"1\">Sunday</MenuItem>\n                                    <MenuItem value=\"2\">Monday</MenuItem>\n                                    <MenuItem value=\"3\">Tuesday</MenuItem>\n                                    <MenuItem value=\"4\">Wednesday</MenuItem>\n                                    <MenuItem value=\"5\">Thursday</MenuItem>\n                                    <MenuItem value=\"6\">Friday</MenuItem>\n                                    <MenuItem value=\"7\">Saturday</MenuItem>\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                    id=\"auditCloseFlag\"\n                                    select\n                                    label=\"Audit Close Flag\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.auditCloseFlag}\n                                    onChange={handleChange(\"auditCloseFlag\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.auditCloseFlag && touched.auditCloseFlag\n                                            ? errors.auditCloseFlag\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                                    <MenuItem value=\"No\">No</MenuItem>\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.selectChecklist && touched.selectChecklist}\n                                    id=\"selectChecklist\"\n                                    select\n                                    label=\"Checklist Name\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.selectChecklist}\n                                    onChange={handleChange(\"selectChecklist\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.selectChecklist && touched.selectChecklist\n                                            ? errors.selectChecklist\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {checkListArr && checkListArr.map(item => (\n                                        <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\", }}>\n                            <Button\n                                type=\"button\"\n                                className=\"outline\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ marginRight: \"10px\" }}\n                                className={classes.submit}\n                                onClick={handleReset}\n                                disabled={!dirty || isSubmitting}\n                            >\n                                Reset\n                            </Button>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                disabled={isSubmitting}>\n                                Submit\n                            </Button>\n                        </Grid>\n                    </Form>\n                )\n                }\n            </Formik>\n        </>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/Component/Monthly.js",["1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper,\n    RadioGroup,\n    FormLabel,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport axiosInstance from '../../../components/Utils/AxiosInstance';\n\n//component\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function Monthly(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startDate: \"\",\n        endDate: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n\n    })\n    const history = useHistory();\n    const [checkListArr, setCheckListArr] = useState([])\n    const dates = [...Array(31).keys()]\n    useEffect(() => {\n        getCheckList()\n    }, [])\n\n    function getCheckList() {\n        axiosInstance.get(`api/Check_List_Master.svc/get_checklist/all`)\n            .then(res => {\n                setCheckListArr([...res.data.data])\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n    console.log(dates)\n    return (\n        <>\n            <Formik\n                initialValues={data}\n                onSubmit={(values, { setSubmitting, handleReset }) => {\n                    console.log(values)\n                    setSubmitting(true);\n                    const obj = {\n                        \"SITE_GUID\": props.siteID,\n                        \"CHECKLIST_ID\": checkListArr.filter(item => item['CHECK_LIST_NAME'] === values.selectChecklist)[0]['CHECK_LIST_ID'],\n                        \"AUDIT_TYPE\": \"Monthly\",\n                        \"START_DAY\": values.startDate,\n                        \"END_DAY\": values.endDate,\n                        \"START_TIME\": null,\n                        \"END_TIME\": null,\n                        \"AUDIT_CLOSE_FLAG\": values.auditCloseFlag === \"Yes\" ? 1 : 0,\n                        \"CREATED_BY\": localStorage.getItem('client_userID')\n                    }\n                    console.log(obj)\n                    console.log(values)\n\n                    axiosInstance.post('api/Shift_Timing.svc/insert_shift_timing', obj)\n                        .then(res => {\n                            if (res.data.response[0]['CODE'] === \"200\") {\n                                props.reload()\n                            } else {\n                                alert(res.data.response[0]['MESSAGE'])\n                            }\n                        })\n                        .then(setSubmitting(false))\n                        .catch(err => console.log(err))\n\n\n                }}\n\n                validationSchema={Yup.object().shape({\n\n                    startDate: Yup.number()\n                        .required('Required'),\n                    endDate: Yup.number().notOneOf([Yup.ref('startDate'), null], \"End Date cannot be same as Start Date\")\n                        .required('Required'),\n                    auditCloseFlag: Yup.string()\n                        .required('Required'),\n                    selectChecklist: Yup.string()\n                        .required('Required'),\n                })}\n\n            >\n                {({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleReset,\n                }) =>\n                (\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.startDate && touched.startDate}\n                                    id=\"startDate\"\n                                    select\n                                    label=\"Start Date\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.startDate}\n                                    onChange={handleChange(\"startDate\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.startDate && touched.startDate\n                                            ? errors.startDate\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {dates.map(i => (\n                                        <MenuItem key={i} value={i+1}>{i+1}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    error={errors.endDate && touched.endDate}\n                                    id=\"endDate\"\n                                    select\n                                    label=\"End Date\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.endDate}\n                                    onChange={handleChange(\"endDate\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.endDate && touched.endDate\n                                            ? errors.endDate\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {dates.map(i => (\n                                        <MenuItem key={i} value={i+1}>{i+1}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.auditCloseFlag && touched.auditCloseFlag}\n                                    id=\"auditCloseFlag\"\n                                    select\n                                    label=\"Audit Close Flag\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.auditCloseFlag}\n                                    onChange={handleChange(\"auditCloseFlag\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.auditCloseFlag && touched.auditCloseFlag\n                                            ? errors.auditCloseFlag\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                                    <MenuItem value=\"No\">No</MenuItem>\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} >\n                                <TextField\n                                    error={errors.selectChecklist && touched.selectChecklist}\n                                    id=\"selectChecklist\"\n                                    select\n                                    label=\"Checklist Name\"\n                                    variant=\"outlined\"\n                                    className={classes.textField}\n                                    value={values.selectChecklist}\n                                    onChange={handleChange(\"selectChecklist\")}\n                                    fullWidth\n                                    required\n                                    helperText={\n                                        errors.selectChecklist && touched.selectChecklist\n                                            ? errors.selectChecklist\n                                            : null\n                                    }\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {checkListArr && checkListArr.map(item => (\n                                        <MenuItem key={item['CHECK_LIST_NAME']} value={item['CHECK_LIST_NAME']}>{item['CHECK_LIST_NAME']}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} style={{ display: \"flex\", }}>\n                            <Button\n                                type=\"button\"\n                                className=\"outline\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ marginRight: \"10px\" }}\n                                className={classes.submit}\n                                onClick={handleReset}\n                                disabled={!dirty || isSubmitting}\n                            >\n                                Reset\n                            </Button>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                disabled={isSubmitting}>\n                                Submit\n                            </Button>\n                        </Grid>\n                    </Form>\n                )\n                }\n            </Formik>\n        </>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/AddSection/SubSectionTable.js",["2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\n\n\n// components\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MuiPaper: {\n        rounded: {\n            borderRadius: \"20px\"\n        }\n    },\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        margin: \"8px 3px\",\n        padding: \"0px\",\n\n      }\n    },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function SubSectionTable(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [openAdd, setOpenAdd] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [sectionID, setSectionID] = useState('')\n\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <IconButton color=\"primary\" size=\"small\">\n              {tableMeta.rowIndex === rowIndex\n                ? <div style={{ display: \"flex\" }}>\n                  <CheckCircleIcon fontSize=\"small\" onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                  <CancelIcon fontSize=\"small\" onClick={() => handleCancel(tableMeta.rowIndex)} />\n                </div>\n                : <EditRoundedIcon fontSize=\"small\" onClick={() => {\n                  return (\n                    handleEdit(tableMeta, tableMeta.rowIndex)\n                  )\n                }} />}\n            </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"text\",\n      label: \"Sub-Section Text\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          tableMeta.rowIndex === rowIndex\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : <div>{value}</div>\n        )\n      }\n    },\n\n    {\n      name: \"DELETE\",\n      label: \"Delete\",\n      options: {\n        filter: false,\n        sort: true,\n        empty: true,\n        customBodyRenderLite: (dataIndex, rowIndex) => {\n          return (\n            <IconButton size=\"small\" color=\"primary\" size=\"small\" onClick={() => handleDelete(dataIndex)}>\n              <DeleteRoundedIcon fontSize=\"small\" />\n            </IconButton>\n          );\n        }\n      }\n    },\n  ]\n  const handleView = (tableMeta) => {\n\n  }\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0 && index < updatedata.length - 1)\n    console.log(newDataArr)\n\n    let obj = {\n        \"NAME\":newDataArr[0],\n        \"SUB_SECTIONS_ID\":sectionID['id'],\n        \"CREATED_BY\":localStorage.getItem('client_userID')\n        }\n    console.log(obj)\n    axiosInstance.post('api/Question_Section_Management.svc/update_question_sub_section', obj)\n      // axios.post('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/update_question_section', obj)\n      .then(res => {\n          if(res.data.response[0]['CODE'] === '200'){\n            setRowIndex('')  \n            props.reload()\n              \n          }else{\n              alert(res.data.response[0]['MESSAGE'])\n          }\n      })\n      .catch(err => console.log(err))\n  }\n\n\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex])\n    setSectionID(tableMeta.tableData[rowIndex])\n    setRowIndex(rowIndex)\n\n  }\n  const handleCancel = () => {\n    setRowIndex()\n  }\n  const handleDelete = () => {\n\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  console.log(indexData)\n  console.log(props.data)\n  console.log(props)\n  return (\n    <>\n\n      <Grid item xs={12} spacing={2}>\n        <MuiThemeProvider theme={theme}>\n          <MUIDataTable\n            title=\"Sub Section List\"\n            data={props.data}\n            columns={columns}\n            options={{\n              filter: true,\n              selectableRows: 'none',\n              filterType: 'dropdown',\n              responsive: 'standard',\n              rowsPerPage: 5,\n              rowsPerPageOptions: [5, 10, 15, 100],\n              download: true,\n              downloadOptions: {\n                filename: 'tableDownload.csv',\n                separator: ',',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true || false,\n                  useDisplayedRowsOnly: true || true\n                } || false\n              },\n              tableBodyHeight: '50%',\n              tableBodyMaxHeight: \"\",\n              setTableProps: () => {\n                return {\n                  padding: 'default'\n                }\n              },\n            }}\n          />\n        </MuiThemeProvider>\n      </Grid>\n\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/masterclient_onboarding/components/Table/Quest.js",["2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport { CircularProgress, Typography } from '@material-ui/core';\n\n\n// components\nimport AddSection from '../AddSection/AddSection'\nimport NotifyAlert from \"../../../../components/ModalAlert/NotifyAlert\";\nimport FailureAlert from \"../../../../components/ModalAlert/FailureAlert\";\nimport axios from \"axios\";\nimport axiosInstance from \"../../../../components/Utils/AxiosInstance\";\n\n// data\n\nconst subS ={\n  \"Section -1\": [\"Sub-10\", \"Sub-11\", \"Sub-12\", \"Sub-13\"],\n  \"Section -2\": [\"Sub-20\", \"Sub-21\", \"Sub-22\", \"Sub-23\"],\n  \"Section -3\": [\"Sub-30\", \"Sub-31\", \"Sub-32\", \"Sub-33\"],\n  \"Section -4\": [\"Sub-40\", \"Sub-41\", \"Sub-42\", \"Sub-43\"]\n}\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MuiPaper: {\n      rounded: {\n        borderRadius: \"20px\"\n      }\n    },\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n      headerCell: {\n        backgroundColor: '#12acc6'\n      }\n    },\n\n    // MUIDataTableBodyCell: {\n    //   root: {\n    //     padding: \"5px 3px\",\n    //     '&:nth-child(3)': { textAlign: 'center' },\n    //     '&:nth-child(6)': { textAlign: 'center' },\n    //   }\n    // },\n    MUIDataTableToolbar: {\n\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      hover: { '&$root': { '&:hover': { backgroundColor: useStyles.tableRowHoverColor }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: useStyles.tableRowSelectColor\n        }\n      }\n    },\n  },\n})\n\nexport default function Tablesx(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [indexData, setIndexData] = useState({})\n  const [open, setOpen] = useState(false)\n  const [edit, setEdit] = useState(false)\n  const [openModal, setOpenModal] = useState(false)\n  const [rowIndex, setRowIndex] = useState()\n  const [openAdd, setOpenAdd] = useState(false)\n  const [section, setSection] = useState([])\n  const [questionID, setQuestionID] = useState('')\n  const [addUserAlert, setAddUserAlert] = useState('')\n  const [openAlert, setOpenAlert] = useState(false)\n  const [failure, setFailure] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [sectionValue, setSectionValue] = useState('')\n  const [subSecArr, setSubSecArr] = useState()\n\n  const mobileRegex = /^[6789]\\d{9}$/;\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const sectionText = section.map(item => item.text)\n\n\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get(`api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n        // axios.get(`http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n        .then(res => {\n          console.log(res.data)\n          setDataTableData([...res.data.data])\n        })\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [props.checkListID])\n  useEffect(() => {\n    function getData() {\n      axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n        // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n        .then(res => setSection([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }, [])\n  const handleSubS =(e) => {\n    for (const [key, value] of Object.entries(subS)) {\n      if(e === key){\n        console.log(e, key)\n        setSubSecArr([...value])\n      }\n    }\n  }\n  const columns = [\n    {\n      name: \"Edit\",\n      // label: \"EDIT\",\n      options: {\n        filter: true,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            open === true && tableMeta.rowIndex === 0\n              ? !isLoading\n                ? <IconButton color=\"primary\" size=\"small\" >\n                  <div style={{ display: \"flex\" }}>\n                    <CheckCircleIcon onClick={() => handleUpdateAdd(tableMeta, tableMeta.rowIndex)} />\n                    <CancelIcon onClick={() => handleCancelAdd(tableMeta.rowIndex)} />\n                  </div>\n                </IconButton>\n                : <CircularProgress size={20} style={{ color: \"blue\" }} />\n              : edit === true && tableMeta.rowIndex === rowIndex\n                ? !isLoading\n                  ? <IconButton color=\"primary\" size=\"small\" >\n                    <div style={{ display: \"flex\" }}>\n                      <CheckCircleIcon onClick={() => handleUpdateEdit(tableMeta, tableMeta.rowIndex)} />\n                      <CancelIcon onClick={() => handleCancel(tableMeta.rowIndex)} />\n                    </div>\n                  </IconButton>\n                  : <CircularProgress size={20} style={{ color: \"blue\" }} />\n                : <IconButton color=\"primary\" size=\"small\" disabled={open || edit ? true : false}>\n                  <EditRoundedIcon\n\n                    onClick={() => {\n                      return (\n                        handleEdit(tableMeta, tableMeta.rowIndex)\n                      )\n                    }}\n                  />\n                </IconButton>\n          );\n        }\n      }\n    },\n    {\n      name: \"POSITION\",\n      label: \"Sr. No\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <div>{dataTableData.length}</div>\n            : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"QUESTION_TEXT\",\n      label: \"Question\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"SECTION\",\n      label: \"Section\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n\n          return open && tableMeta.rowIndex === 0\n            ? <FormControl>\n              <Select \n                defaultValue={value} \n                onChange={event => {\n                  updateValue(event.target.value)\n                  // setSectionValue(event.target.value)\n                  handleSubS(event.target.value)\n                }} \n                style={{ fontSize: 'inherit' }}>\n                <MenuItem value=\"\"><em>None</em></MenuItem>\n                {sectionText && sectionText.map((item, index) =>\n                  <MenuItem key={index} value={item}>{item}</MenuItem>\n                )}\n              </Select>\n            </FormControl>\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControl>\n                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                  <MenuItem value=\"\"><em>None</em></MenuItem>\n                  {sectionText && sectionText.map((item, index) =>\n                    <MenuItem key={index} value={item}>{item}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n              : <div>{value}</div>\n\n\n        }\n      }\n    },\n    {\n        name: \"SUB_SECTION\",\n        label: \"Sub-Section\",\n        options: {\n          filter: true,\n          sort: true,\n          customBodyRender: (value, tableMeta, updateValue) => {\n            \n            return open && tableMeta.rowIndex === 0\n              ? <FormControl>\n                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                  <MenuItem value=\"\"><em>None</em></MenuItem>\n                  {subSecArr && subSecArr.map((item, index) =>\n                    <MenuItem key={index} value={item}>{item}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n              : edit && tableMeta.rowIndex === rowIndex\n                ? <FormControl>\n                  <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                    {sectionText && sectionText.map((item, index) =>\n                      <MenuItem key={index} value={item}>{item}</MenuItem>\n                    )}\n                  </Select>\n                </FormControl>\n                : <div>{value}</div>\n  \n  \n          }\n        }\n      },\n    {\n      name: \"ANSWER_TYPE\",\n      label: \"Ans Type\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n\n          return open && tableMeta.rowIndex === 0\n            ? <FormControl>\n              <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                <MenuItem value=\"YN\">Yes/No</MenuItem>\n                <MenuItem value=\"YNN\">Yes/No/Not Applicable</MenuItem>\n                <MenuItem value=\"C\">Compliance</MenuItem>\n                <MenuItem value=\"CNNA\">Compliance/Non-Compliance/NA</MenuItem>\n              </Select>\n            </FormControl>\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControl>\n                <Select defaultValue={value} onChange={event => updateValue(event.target.value)} style={{ fontSize: 'inherit' }}>\n                  <MenuItem value=\"YN\">Yes/No</MenuItem>\n                  <MenuItem value=\"YNN\">Yes/No/Not Applicable</MenuItem>\n                  <MenuItem value=\"C\">Compliance</MenuItem>\n                  <MenuItem value=\"CNNA\">Compliance/Non-Compliance/NA</MenuItem>\n                </Select>\n              </FormControl>\n              : <div>{handleAnsType(value)}</div>\n\n\n        }\n      }\n    },\n    {\n      name: \"WEIGHTAGE\",\n      label: \"Weightage\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"NUMBER_OF_IMG\",\n      label: \"No.Of Images\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} type=\"number\" />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n    {\n      name: \"QUESTION_INFORMATION\",\n      label: \"Info\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n\n    {\n      name: \"QC_NOTES\",\n      label: \"Qc Notes\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => (\n          open && tableMeta.rowIndex === 0\n            ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n            : edit && tableMeta.rowIndex === rowIndex\n              ? <FormControlLabel control={<TextField defaultValue={value} />} onChange={event => updateValue(event.target.value)} />\n              : <div>{value}</div>\n        )\n      }\n    },\n\n\n\n\n  ]\n\n  const checkValidity = yup.object().shape({\n    \"QUESTION_TEXT\": yup\n      .string()\n      .required(),\n    \"SECTION_ID\": yup\n      .string()\n      .required('Section is required'),\n    \"ANSWER_TYPE\": yup\n      .string()\n      .required('Answer Type is required'),\n    \"WEIGHTAGE\": yup\n      .number()\n      .transform(value => (isNaN(value) ? undefined : value))\n      .positive()\n      .integer()\n      .required('Weightage is required'),\n    \"NUMBER_OF_IMG\": yup\n      .number()\n      .positive()\n      .integer()\n      .transform(value => (isNaN(value) ? undefined : value))\n      .required('Number of Images are required'),\n    \"QUESTION_INFORMATION\": yup\n      .string()\n      .required('Question Information is required'),\n    \"QC_NOTES\": yup\n      .string()\n      .required('Question Notes are required'),\n  },\n    [[\"QUESTION_TEXT\", \"SECTION\", \"ANSWER_TYPE\", \"WEIGHTAGE\", \"NUMBER_OF_IMG\", \"QUESTION_INFORMATION\", \"QC_NOTES\"]]\n  )\n  const yupOptions = {\n    strict: false,\n    abortEarly: false, // return all errors\n  }\n\n  const getData = () => {\n    axiosInstance.get(`api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n      // axios.get(`http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/get_question_list/${props.checkListID}`)\n      .then(res => setDataTableData([...res.data.data]))\n      .catch(err => console.log(err))\n  }\n  const handleEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n    setQuestionID(tableMeta.tableData[rowIndex]['QUESTION_ID'])\n    setEdit(true)\n    setRowIndex(rowIndex)\n\n  }\n  const handleDelete = (tableMeta, rowIndex) => {\n    console.log(tableMeta)\n    const obj = {\n      'CHECK_LIST_ID': tableMeta.tableData[rowIndex]['CHECK_LIST_ID'],\n      'QUESTION_ID': tableMeta.tableData[rowIndex]['QUESTION_ID']\n    }\n\n    // axiosInstance.post('api/Question_Management.svc/delete_question', obj)\n    //     .then(res => alert(\"Question deleted successfully\"))\n    //     .then(getData())\n    //     .catch(err => console.log(err))\n\n    // function getData() {\n    //     axiosInstance.get(`api/Check_List_Management.svc/get_question_from_checklist/${checkListID}`)\n    //         .then(res => setDataTableData([...res.data.data]))\n    //         .catch(err => console.log(err))\n    // }\n  }\n  const handleClickQuestion = () => {\n    const newRowData = {\n      ANSWER_TYPE: \"\",\n      CHECK_LIST_ID: \"\",\n      CREATED_BY: \"\",\n      NUMBER_OF_IMG: \"\",\n      POSITION: \"\",\n      QUESTION_INFORMATION: \"\",\n      QUESTION_TEXT: \"\",\n      SECTION: \"\",\n      SECTION_ID: \"\",\n      WEIGHTAGE: \"\",\n      QC_NOTES: \"\",\n    }\n    setDataTableData([newRowData, ...dataTableData])\n    setOpen(true)\n    setRowIndex(\"0\")\n    console.log(props)\n  }\n  const handleAnsType = (value) => {\n    switch (value) {\n      case \"YN\":\n        return \"Yes/No\";\n      case \"YNN\":\n        return \"Yes/No/NA\";\n      case \"C\":\n        return \"Compliance\";\n      case \"CNNA\":\n        return \"Compliance/Non-Compliance/NA\";\n      default: return;\n    }\n  }\n  const handleCancel = () => {\n    setEdit(false)\n    setRowIndex()\n  }\n  const handleCancelAdd = (rowIndex) => {\n    setOpen(false)\n    console.log(rowIndex)\n    // console.log(dataTableData[rowIndex])\n    dataTableData.shift()\n    setRowIndex()\n  }\n  const handleClickChecklist = () => {\n\n  }\n  const handleClickSection = () => {\n    setOpenModal(true)\n  }\n  const handleUpdateAdd = (tableMeta, rowIndex) => {\n    console.log(tableMeta)\n    console.log(tableMeta.rowData)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    console.log(newDataArr)\n    let sectionSelected = section && section.find(item => item.text === newDataArr[2])\n    console.log(sectionSelected ? sectionSelected.id : \"undefined\")\n\n    let obj = {\n      POSITION: dataTableData.length,\n      QUESTION_TEXT: newDataArr[1],\n      SECTION_ID: sectionSelected ? sectionSelected.id : \"\",\n      ANSWER_TYPE: newDataArr[3],\n      WEIGHTAGE: newDataArr[4],\n      QUESTION_INFORMATION: newDataArr[6],\n      CHECK_LIST_ID: props.checkListID,\n      CREATED_BY: \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n      NUMBER_OF_IMG: newDataArr[5],\n      QC_NOTES: newDataArr[7],\n    }\n    console.log(obj)\n    checkValidity.validate(obj, yupOptions)\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Master_Question_Bank.svc/insert_question`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/insert_question', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              setOpen(false)\n              getData()\n            }\n            else {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              setRowIndex()\n              setOpen(false)\n              getData()\n            }\n          })\n          .catch(err => {\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setRowIndex()\n            setOpen(false)\n            setFailure(true)\n            getData()\n          })\n          setIsLoading(false)\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => e['message'])\n        console.log(errArray)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setOpen(false)\n        setRowIndex()\n        getData()\n      });\n    console.log(obj)\n  }\n\n  const handleUpdateEdit = (tableMeta, rowIndex) => {\n    console.log(tableMeta.rowData)\n    console.log(tableMeta)\n    let updatedata = tableMeta.rowData\n    let newDataArr = updatedata.filter((item, index) => index > 0)\n    let sectionSelected = section && section.find(item => item.text === newDataArr[2])\n    console.log(\"update\", newDataArr)\n    console.log(sectionSelected ? sectionSelected.id : \"undefined\")\n    // setRowIndex()\n    let obj = {\n      \"QUESTION_TEXT\": newDataArr[1],\n      \"SECTION_ID\": sectionSelected ? sectionSelected.id : \"\",\n      \"ANSWER_TYPE\": newDataArr[3],\n      \"NUMBER_OF_IMG\": newDataArr[5],\n      \"QUESTION_INFORMATION\": newDataArr[6],\n      \"CREATED_BY\": \"A5C47ECB-9E29-4AB1-959D-C3B28732C6AA\",\n      \"CHECK_LIST_ID\": props.checklistID,\n      \"WEIGHTAGE\": newDataArr[4],\n      \"POSITION\": newDataArr[0],\n      \"QUESTION_ID\": questionID,\n      \"QC_NOTES\": newDataArr[7],\n\n    }\n    console.log(obj)\n    checkValidity.validate(obj, yupOptions)\n      .then(() => {\n        setIsLoading(true)\n        axiosInstance.post(`api/Master_Question_Bank.svc/update_question`, obj)\n          // axios.post('http://betaapp.hygienequotient.com/api/Master_Question_Bank.svc/update_question', obj)\n          .then(res => {\n            if (res.data.response[0]['CODE'] === \"200\") {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(false)\n              setRowIndex()\n              setEdit(false)\n              getData()\n            }\n            else {\n              setAddUserAlert(res.data.response[0]['MESSAGE'])\n              setOpenAlert(true)\n              setFailure(true)\n              setRowIndex()\n              setEdit(false)\n              getData()\n            }\n          })\n          .catch(err => {\n            setAddUserAlert(err)\n            setOpenAlert(true)\n            setRowIndex()\n            setEdit(false)\n            setFailure(true)\n            getData()\n          })\n          setIsLoading(false)\n      })\n      .catch(function (err) {\n        let errArray = err.inner.map(e => e['message'])\n        console.log(errArray)\n        setAddUserAlert(errArray.map(item => <li>{item}</li>))\n        setOpenAlert(true)\n        setFailure(true)\n        setEdit(false)\n        setRowIndex()\n        getData()\n      });\n  }\n  const handleSectionUpdate = () => {\n    function getData() {\n      axiosInstance.get(`api/Question_Section_Management.svc/question_section_select2`)\n        // axios.get('http://betaapp.hygienequotient.com/api/Question_Section_Management.svc/question_section_select2')\n        .then(res => setSection([...res.data.data]))\n        .catch(err => console.log(err))\n    }\n    getData()\n  }\n  const handleCloseAddButton = () => {\n    setOpenAdd(false)\n  }\n  const handleAlertClose = () => {\n    setOpenAlert(false)\n  }\n  const handleOpenModal = () => {\n    setOpenModal(true)\n  }\n  const handleCloseModal = () => {\n    setOpenModal(false)\n\n  }\n  console.log(dataTableData)\n  console.log(props.checkListID)\n  // console.log(checkListID)\n  console.log(section)\n  console.log(subSecArr)\n  return (\n    <>\n\n\n      <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n\n        <Grid item xs={12}>\n          <MuiThemeProvider theme={theme}>\n            <MUIDataTable\n              title={props.checkListID ? \"Question List\" : \"Select View from Checklist Table\"}\n              data={dataTableData}\n              columns={columns}\n              options={{\n                print: props.checkListID ? true : false,\n                filter: props.checkListID ? true : false,\n                search: props.checkListID ? true : false,\n                selectableRows: 'none',\n                filterType: 'dropdown',\n                responsive: 'standard',\n                viewColumns: props.checkListID ? true : false,\n                rowsPerPage: 5,\n                rowsPerPageOptions: [5, 10, 15, 100],\n                download: props.checkListID ? true : false,\n                downloadOptions: {\n                  filename: 'tableDownload.csv',\n                  separator: ',',\n                  filterOptions: {\n                    useDisplayedColumnsOnly: true || false,\n                    useDisplayedRowsOnly: true || true\n                  } || false\n                },\n                tableBodyHeight: '270px',\n                tableBodyMaxHeight: \"\",\n                setTableProps: () => {\n                  return {\n                    padding: 'default'\n                  }\n                },\n                customToolbar: () => {\n                  return (\n                    <>\n                      <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        style={{ fontSize: \"8px\", marginRight: \"1px\" }}\n                        disabled={open || edit || !props.checkListID ? true : false}\n                        onClick={() => handleClickQuestion()}\n                        startIcon={<AddCircleIcon fontSize=\"small\" />}\n                      >\n                        Add New Question\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        disabled={open || edit || !props.checkListID ? true : false}\n                        onClick={() => handleClickSection()}\n                        style={{ fontSize: \"8px\" }}\n                        startIcon={<AddCircleIcon fontSize=\"small\" />}\n                      >\n                        Add Section\n                      </Button>\n                    </>\n                  );\n                }\n              }}\n            />\n          </MuiThemeProvider>\n        </Grid>\n        {openModal ? <AddSection open={openModal} close={handleCloseModal} update={handleSectionUpdate} /> : \"\"}\n        {openAlert ?\n          failure === false ?\n            <NotifyAlert message={addUserAlert} open={true} close={handleAlertClose} />\n            : <FailureAlert message={addUserAlert} open={true} close={handleAlertClose} />\n          : \"\"}\n      </Grid>\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/auditReport/AuditSlots.js",["2057","2058","2059","2060","2061","2062","2063","2064","2065","2066","2067","2068","2069","2070","2071","2072","2073","2074","2075","2076","2077","2078","2079","2080","2081","2082","2083","2084","2085"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n    FormHelperText,\n    Paper,\n    RadioGroup,\n    FormLabel,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PhotoCamera, Save } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport Table from \"./Component/Table\";\nimport CustomizedRadios from './Component/RadioButtons';\nimport Daily from './Component/Daily';\nimport Weekly from './Component/Weekly';\nimport Monthly from './Component/Monthly';\nimport axiosInstance from '../../components/Utils/AxiosInstance';\n//component\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nexport default function AuditReport(props) {\n\n\n    const classes = useStyles();\n    const [data, setData] = useState({\n        startTime: \"\",\n        endTime: \"\",\n        auditCloseFlag: \"\",\n        selectChecklist: \"\",\n        startDay: \"\",\n        endDay: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    })\n    const [dataTableData, setDataTableData] = useState()\n    const [report, setReport] = useState('Daily')\n    const history = useHistory();\n    const handleValue = (value) => {\n        setReport(value)\n    }\n    useEffect(()=>{\n        getData()\n    },[])\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n    function getData() {\n        axiosInstance.get(`api/Shift_Timing.svc/get_shift_timing/${props.siteID}`)\n            .then(res => {\n                if (res.data.data !== null && res.data.response[0]['CODE'] === \"200\") {\n                    console.log(res.data.data)\n                    setDataTableData([...res.data.data])\n                } else {\n                    setDataTableData([])\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    const handleReload = () => {\n        getData()\n    }\n    return (\n        <Dialog open={props.open} onClose={props.close} fullWidth={true} maxWidth={'lg'} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}></DialogTitle>\n            <DialogContent>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                        <Paper elevation={4} style={{ borderRadius: \"20px\", width: \"100%\" }}><h2>Audit Slots</h2></Paper>\n                    </Grid>\n                    <Grid item xs={4} container>\n                        <Paper elevation={4} style={{ borderRadius: \"20px\", width: \"100%\", height: \"468px\" }}>\n                            <Grid item xs={12}>\n                                <Grid item xs={12} style={{ textAlign: \"center\", marginTop: \"30px\", marginBottom: \"50px\" }}>\n                                    <CustomizedRadios report={handleValue} />\n                                </Grid>\n                                <div className={classes.paper}>\n                                    {report === \"Daily\" ? <Daily siteID={props.siteID} reload={handleReload}/> \n                                        : report === \"Weekly\" ? <Weekly siteID={props.siteID} reload={handleReload}/> \n                                            : <Monthly siteID={props.siteID} reload={handleReload}/>\n                                            }\n                                </div>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={8}>\n                        <Table\n                            data={dataTableData}\n                        // siteID={props.siteID}\n                        // activeEdit={handleActiveEdit}\n                            reloadTable={getData}\n                        />\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/PublicChecklist.js",["2086","2087","2088","2089","2090","2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103"],"import React, { useState, useEffect } from \"react\";\nimport clsx from 'clsx';\nimport {\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    AppBar,\n    Tabs,\n    Tab,\n    Box,\n    Typography,\n    LinearProgress,\n    Select,\n    OutlinedInput,\n    MenuItem,\n    Button,\n    Paper,\n    Container,\n    InputAdornment,\n    IconButton,\n    FormControlLabel,\n    FormControl,\n    TextField,\n    InputLabel,\n    Link\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/Add';\nimport excel from './component/images/excel.png';\nimport pdf from './component/images/pdf.png';\nimport word from './component/images/word.png';\nimport { useTheme } from \"@material-ui/styles\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Tables from './component/Table';\nimport data from './dummy'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 100,\n        '&:hover': {\n            boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n            cursor: \"pointer\"\n        },\n        height: \"120px\"\n    },\n    formControl: {\n        // margin: theme.spacing(1),\n        // minWidth: 120,\n        backgroundColor: \"white\",\n        width: \"100%\"\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    iconAdd: {\n        fontSize: \"60px\"\n    },\n    content: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\"\n    },\n\n}));\n\nfunction PublicChecklist() {\n    const classes = useStyles();\n    const bull = <span className={classes.bullet}>•</span>;\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([]);\n    const handleChange = event => {\n        setSearchTerm(event.target.value);\n    };\n    useEffect(() => {\n        let res = []\n        const results = data.map(item => {\n            //    item['CHECKLIST_NAME']['heading']\n            if (item['CHECKLIST_NAME']['heading'].toLowerCase().includes(searchTerm.toLowerCase())) {\n                res.push(item)\n            }\n            // else if(item['CHECKLIST_NAME']['subhead'].toLowerCase().includes(searchTerm.toLowerCase())){\n            //     res.push(item)\n            // }\n\n        }\n        );\n\n        console.log(res)\n        setSearchResults([...res]);\n    }, [searchTerm]);\n    console.log(searchTerm)\n    console.log(searchResults)\n    return (\n        <Container maxWidth=\"sm\" disableGutters=\"true\" >\n            <Grid container spacing={3}>\n                <Grid item xs>\n                    <Link to=\"/app/blankTemplate\">\n                        <Card className={classes.root} variant=\"outlined\" >\n                            <CardActions className={classes.content}>\n                                <AddIcon color=\"primary\" className={classes.iconAdd} />\n                                <Typography variant=\"body2\" component=\"h3\">\n                                    Blank template\n                            </Typography>\n                            </CardActions>\n                        </Card>\n                    </Link>\n                </Grid>\n                <Grid item xs>\n                    <Card className={classes.root} variant=\"outlined\">\n                        <CardActions className={classes.content}>\n                            <div style={{ height: \"60px\", width: \"100%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-evenly\" }}>\n                                <img src={excel} alt=\"\" height=\"35px\" />\n                                <img src={word} alt=\"\" height=\"35px\" />\n                                <img src={pdf} alt=\"\" height=\"35px\" />\n                            </div>\n                            <Typography variant=\"body2\" component=\"h3\">\n                                Upload and convert form\n                            </Typography>\n                        </CardActions>\n                    </Card>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"body1\" component=\"h3\">\n                        Need Inspiration ?\n                    </Typography>\n                    <Typography variant=\"body\" component=\"h3\">\n                        <b>Find and customize a template from the public library</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} container spacing={1}\n                // style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}\n                >\n                    <Grid item xs={7}>\n                        <FormControl\n                            variant=\"outlined\">\n                            {/* <InputLabel htmlFor=\"filter\">Search</InputLabel> */}\n                            <OutlinedInput\n                                id=\"search\"\n                                type=\"search\"\n                                placeholder=\"Search\"\n                                fullWidth\n                                size=\"small\"\n                                margin=\"dense\"\n                                className={classes.formControl}\n                                value={searchTerm}\n                                onChange={handleChange}\n                                startAdornment={\n                                    <InputAdornment position=\"start\">\n                                        <IconButton\n                                            aria-label=\"search_from_list\"\n                                            // onClick={handleClickShowPassword}\n                                            // onMouseDown={handleMouseDownPassword}\n                                            edge=\"start\"\n                                        >\n                                            {/* {values.showPassword ? <ArrowDropDownIcon /> : <ArrowDropUpIcon />} */}\n                                            <SearchIcon />\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                labelWidth={0}\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={5}>\n                        <TextField\n                            id=\"filter\"\n                            select\n                            label=\"Filter By Industry\"\n                            variant=\"outlined\"\n                            className={classes.formControl}\n                            // value={values.startDate}\n                            // onChange={handleChange(\"startDate\")}\n                            fullWidth\n                            size=\"small\"\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            <MenuItem value={10}>\n                                <em>Ten</em>\n                            </MenuItem>\n                            <MenuItem value={20}>\n                                <em>Twenty</em>\n                            </MenuItem>\n                            <MenuItem value={30}>\n                                <em>Thirty</em>\n                            </MenuItem>\n\n                        </TextField>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Tables data={searchResults} />\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default PublicChecklist\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/Table.js",["2104","2105","2106","2107","2108","2109","2110","2111","2112","2113","2114","2115","2116","2117","2118","2119","2120","2121","2122","2123"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport * as yup from 'yup';\n\n\n//material-UI\nimport { Grid, ListItemText } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\n\n// component\nimport PreviewDialog from \"./PreviewDialog\"\n\nconst useStyles = makeStyles(theme => ({\n  tableOverflow: {\n    overflow: 'auto'\n  },\n  tableRowSelectColor: {\n    backgroundColor: 'red',\n    color: \"white\"\n  },\n  tableRowHoverColor: {\n    backgroundColor: \"pink\"\n  },\n  chip: {\n    backgroundColor:\"#d6e6f4\",\n    fontSize: \"10px\",\n    padding:\"0px\",\n    color:\"#186fdf\",\n    border: \"1px solid #a9c0e6\"\n  }\n}))\n\nconst theme = createMuiTheme({\n\n  overrides: {\n    MuiPaper: {\n      elevation4: {\n        boxShadow: \"0px 0px\",\n        border: \"1px solid rgba(0, 0, 0, 0.12)\"\n      }\n      //   rounded: {\n      //     borderRadius: \"20px\"\n      //   }\n    },\n    MUIDataTableSelectCell: {\n      expandDisabled: {\n        // Soft hide the button.\n        visibility: 'hidden',\n      },\n    },\n\n    MUIDataTableBodyCell: {\n      root: {\n        padding: \"5px 3px\",\n        '&:nth-child(3)': { textAlign: 'center' },\n        '&:nth-child(6)': { textAlign: 'center' },\n\n      }\n    },\n    MUIDataTableToolbar: {\n      root: { display: 'none' }\n    },\n    // handles table data header color\n    MUIDataTableHeadCell: {\n      root: {\n        color: \"white\",\n        padding: \"5px 10px\",\n        visibility: \"hidden\"\n      },\n\n\n      fixedHeader: {\n        backgroundColor: '#12ACC6',\n      }\n    },\n    MUIDataTablePagination: {\n      root: {\n        backgroundColor: useStyles.tableFooter,\n        color: useStyles.textPrimary\n      }\n    },\n    // handles row hover color and selected row color\n    MuiTableRow: {\n      // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\n      root: {\n        '&$selected': {\n          backgroundColor: \"lightgrey\"\n        }\n      },\n      footer: {\n        '& td': {\n          padding: \"0px\",\n          margin: \"0px\"\n        }\n      }\n    },\n    MuiTypography: {\n      body2: {\n        fontSize: \"12px\",\n        fontStyle:\"italic\"\n      },\n      body1: {\n        fontSize: \"14px\",\n        color:\"#186fdf\"\n      }\n    },\n    MuiTablePagination: {\n      selectRoot: {\n        marginRight: \"5px\",\n        marginLeft: \"0px\"\n      },\n      actions: {\n        marginLeft: \"5px\"\n      }\n    },\n    MainInputBase: {\n      input: {\n        fontSize: \"10px\"\n      }\n    },\n    MuiToolbar: {\n      gutters: {\n        '& *': {\n          paddingLeft: \"0px\"\n        }\n      }\n    },\n  },\n})\n\nexport default function Tables(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [dataTableData, setDataTableData] = useState([])\n  const [viewIndex, setViewIndex] = useState()\n  const [checkListID, setCheckListID] = useState('')\n  const [openDialog, setOpenDialog] = useState(false)\n  \n  const columns = [\n    {\n      name: \"CHECKLIST_NAME\",\n      label: \"\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          console.log(value)\n          return (\n            <div>\n              <ListItemText primary={value['heading']} secondary={value['subhead']} />\n            </div>\n          )\n        }\n      }\n    },\n\n    {\n      name: \"View\",\n      options: {\n        filter: false,\n        sort: false,\n        empty: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Chip label={\"Featured\"} className={classes.chip}/>\n          );\n        }\n      }\n    },\n\n\n  ]\n\n  const handleDialogClose = () => {\n    setOpenDialog(false)\n  }\n  console.log(props.data)\n  return (\n    <>\n      <MuiThemeProvider theme={theme}>\n        <MUIDataTable\n          title=\"Checklist\"\n          data={props.data}\n          columns={columns}\n          options={{\n            filter: false,\n            print: false,\n            viewColumns: false,\n            disableToolbarSelect: true,\n            selectableRows: 'none',\n            filterType: 'dropdown',\n            responsive: 'standard',\n            rowsPerPage: 5,\n            rowsPerPageOptions: [5, 10, 15, 100],\n            download: false,\n            downloadOptions: {\n              filename: 'tableDownload.csv',\n              separator: ',',\n              filterOptions: {\n                useDisplayedColumnsOnly: true || false,\n                useDisplayedRowsOnly: true || true\n              } || false\n            },\n            tableBodyHeight: '',\n            tableBodyMaxHeight: \"\",\n            onRowClick: (rowData, rowState) => {\n              console.log(rowData)\n              console.log(rowState)\n              setDataTableData(props.data[rowState['dataIndex']])\n              setOpenDialog(true)\n            },\n            setTableProps: () => {\n              return {\n                padding: 'default'\n              }\n            },\n            setRowProps: (row, dataIndex, rowIndex) => {\n              console.log(row, dataIndex, rowIndex)\n              console.log(viewIndex)\n              if (viewIndex === rowIndex) {\n                return {\n                  style: { background: \"rgb(220,220,220)\" }\n                };\n              }\n            },\n          }}\n        />\n      </MuiThemeProvider>\n      {openDialog? <PreviewDialog open={true} close={handleDialogClose} data={dataTableData}/>:\"\"}\n    </>\n  );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/dummy.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/PreviewDialog.js",["2124","2125","2126","2127","2128","2129","2130","2131","2132","2133","2134","2135","2136","2137","2138","2139","2140","2141","2142"],"import React, { useEffect, useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n    Grid,\n    CircularProgress,\n    Typography,\n    Button,\n    Tabs,\n    Tab,\n    TextField,\n    Fade,\n    IconButton,\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport ChecklistAccordian from './Accordian'\n\nconst useStyles = makeStyles((theme) => ({\n    \"@global\": {\n        body: {\n            backgroundColor: theme.palette.common.white\n        }\n    },\n    dialog: {\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        height: \"100vh\",\n        width: \"35vw\",\n        margin: \"0px\",\n        maxHeight: \"100vh\"\n    },\n\n    paper: {\n        margin: theme.spacing(2),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    paperOne: {\n\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        margin: theme.spacing(0),\n        padding: theme.spacing(2),\n        paddingBottom: theme.spacing(0),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    },\n    closeButton: {\n        position: 'absolute',\n        left: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    btn: {\n        textTransform:'none'\n    },\n    btnGrid: {\n\n        '& > *': {\n            margin: theme.spacing(1),\n          },\n    },\n    content:{\n        padding:\"8px 0px\"\n    }\n}))\nexport default function PreviewDialog(props) {\n\n    const classes = useStyles();\n    const { data } = props\n\n    const mobileRegex = /^[6789]\\d{9}$/;\n    const history = useHistory();\n    const DialogTitle = (props) => {\n        const { children, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    };\n\n    console.log(props.data)\n    return (\n        <Dialog open={props.open} onClose={props.close} maxWidth={'sm'} classes={{ paper: classes.dialog }} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\" onClose={props.close}>Preview</DialogTitle>\n            <DialogContent className={classes.content}>\n                <div className={classes.paper}>\n                    <Grid item xs={12}>\n                        <h5>{data['CHECKLIST_NAME']['heading']}</h5>\n                        <p style={{fontSize:\"10px\", textAlign:\"justify\"}}>{data['CHECKLIST_NAME']['description']}</p>\n                    </Grid>\n                    <Grid item xs={12} container spacing={1}>\n                        <Grid item xs={7}><Button variant=\"contained\" color=\"primary\" className={classes.btn} fullWidth>\n                            Import &amp; Start Inspection\n                        </Button></Grid>\n                        <Grid item xs={5}><Button variant=\"outlined\" color=\"primary\" className={classes.btn} fullWidth>\n                            Edit Question\n                        </Button></Grid>\n                    </Grid>\n\n                </div>\n                <div className={classes.paperOne}>\n                    <ChecklistAccordian/>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/publicChecklist/component/Accordian.js",["2143","2144","2145","2146"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Card, CardActions, CardContent, Grid, Paper } from '@material-ui/core';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n        fontStyle: \"bold\"\n    },\n    btn: {\n        textTransform: \"none\",\n        margin: \"5px\"\n    },\n    accord: {\n        backgroundColor:\"blue\",\n        color:\"white\",\n        marginBottom: \"2px\"\n    }\n}));\n\nexport default function ChecklistAccordion() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}} />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>Primary Point of Contact</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n                        sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}}/>}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>Planning Ahead</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body2\" component=\"h3\" style={{ textAlign: \"justify\", fontSize: \"12px\" }}>\n                                Nominate a worker or a team of workers to champion safe practices in the workplace and teach their colleagues the proper procedure.\n                            </Typography>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Compliance\n                            </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Non Compliance\n                                </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Partially Compliance\n                                </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Not Applicable\n                                </Button>\n                            <Grid item xs={12} container>\n                                <Grid item xs={4}>\n                                    <Button size=\"small\" className={classes.btn}>Add note..</Button>\n                                </Grid>\n                                <Grid item xs={2}></Grid>\n                                <Grid item xs={2}></Grid>\n                                <Grid item xs={2}>\n                                    <Button\n                                        size=\"small\"\n                                        className={classes.btn}\n                                        startIcon={<PhotoCamera />}\n                                    >\n                                        Photo\n                                        </Button>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Button\n                                        size=\"small\"\n                                        className={classes.btn}\n                                        startIcon={<PhotoCamera />}\n                                    >\n                                        Action\n                                        </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body2\" component=\"h3\" style={{ textAlign: \"justify\", fontSize: \"12px\" }}>\n                                Nominate a worker or a team of workers to champion safe practices in the workplace and teach their colleagues the proper procedure.\n                            </Typography>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Compliance\n                            </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Non Compliance\n                                </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Partially Compliance\n                                </Button>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth className={classes.btn}>\n                                Not Applicable\n                                </Button>\n                            <Grid item xs={12} container>\n                                <Grid item xs={4}>\n                                    <Button size=\"small\" className={classes.btn}>Add note..</Button>\n                                </Grid>\n                                <Grid item xs={2}></Grid>\n                                <Grid item xs={2}></Grid>\n                                <Grid item xs={2}>\n                                    <Button\n                                        size=\"small\"\n                                        className={classes.btn}\n                                        startIcon={<PhotoCamera />}\n                                    >\n                                        Photo\n                                        </Button>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Button\n                                        size=\"small\"\n                                        className={classes.btn}\n                                        startIcon={<PhotoCamera />}\n                                    >\n                                        Action\n                                        </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                </AccordionDetails>\n            </Accordion>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}} />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>Cleaning</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n                        sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}} />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>HandWashing and Hygiene</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n                        sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}} />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>Physical Distancing</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n                        sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{color:\"white\"}} />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                    className={classes.accord}\n                >\n                    <Typography className={classes.heading}>Monitoring Symptoms</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n                        sit amet blandit leo lobortis eget.\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/BlankTemplate.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/components/Common/Back.js",["2147"],"import React, { Component } from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport Typography from '@material-ui/core/Typography';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst styles = theme => ({\n    link: {\n        textDecoration: 'none',\n        color: 'inherit'\n    },\n    text: {\n        display: 'inline-block',\n        verticalAlign: 'text-bottom'\n    }\n});\n\nclass Back extends Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    render() {\n        const { classes } = this.props;\n        console.log(this.props)\n        return (\n            <div>\n                <Typography variant=\"h6\" gutterBottom>\n                    <Link className={classes.link} to={{ pathname: this.props.path }}>\n                        <KeyboardArrowLeft />\n                        <span className={classes.text}>Back to List</span>\n                    </Link>\n                </Typography>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(withStyles(styles)(Back));","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/TopHeader.js",["2148","2149","2150","2151","2152","2153","2154","2155","2156","2157","2158","2159"],"import React, { useState } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Link as MaterialLink } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Back from '../../../components/Common/Back';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Build from './Tabs/Build';\n\nconst useStyles = makeStyles((theme) => ({\n    '@global': {\n        ul: {\n            margin: 0,\n            padding: 0,\n            listStyle: 'none',\n        },\n    },\n    appBar: {\n        position: \"relative\",\n        boxShadow: \"none\",\n        borderBottom: `1px solid ${theme.palette.grey[\"100\"]}`,\n        backgroundColor: \"white\"\n    },\n    link: {\n        textDecoration: \"none\",\n        color: \"black\"\n    },\n    toolbar: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignitems: \"center\",\n        justifyContent: \"space-between\"\n    },\n    tabCustom: {\n        textTransform: \"none\",\n        minWidth: 72,\n        minHeight: \"60px\",\n        '&$selected': {\n            color: '#1890ff',\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n        '&:focus': {\n            color: '#40a9ff',\n        },\n    },\n    link: {\n        margin: theme.spacing(1, 1.5),\n    },\n    heroContent: {\n        padding: theme.spacing(8, 0, 6),\n    },\n    cardHeader: {\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\n    },\n\n    footer: {\n        marginTop: theme.spacing(8),\n        paddingTop: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        [theme.breakpoints.up('sm')]: {\n            paddingTop: theme.spacing(6),\n            paddingBottom: theme.spacing(6),\n        },\n    },\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\nexport default function TopHeader() {\n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <React.Fragment>\n            <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    <Back path=\"/app/list\" />\n                    <Tabs\n                        value={value}\n                        onChange={handleChange}\n                        indicatorColor=\"primary\"\n                        // textColor=\"primary\"\n\n                        centered\n                    >\n                        <Tab className={classes.tabCustom} label=\"Build\" />\n                        <Tab className={classes.tabCustom} label=\"Reports\" />\n                        <Tab className={classes.tabCustom} label=\"Share\" />\n                    </Tabs>\n                    <Button href=\"#\" color=\"primary\" variant=\"outlined\" className={classes.link}>\n                        Menu\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <Build/>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                Item Two\n             </TabPanel>\n            <TabPanel value={value} index={2}>\n                Item Three\n            </TabPanel>\n        </React.Fragment>\n    );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Build.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/InputChecklistName.js",["2160","2161","2162","2163"],"import React, { useRef, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        flexDirection: \"row\",\n        alignItems: 'center',\n        boxShadow: \"0px 0px\",\n        border: \"1px solid #05b3f7\",\n        borderRadius: \"10px\",\n        width: \"100%\"\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 5,\n        textTransform: \"none\"\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n}));\n\nexport default function InputChecklistName(props) {\n    const classes = useStyles();\n    const [checklistName, setChecklistName] = useState('');\n    const innerRef = useOuterClick(e => {\n        props.closeInputBox()\n    });\n    function useOuterClick(callback) {\n        const innerRef = useRef();\n        const callbackRef = useRef();\n\n        // set current callback in ref, before second useEffect uses it\n        useEffect(() => { // useEffect wrapper to be safe for concurrent mode\n            callbackRef.current = callback;\n        });\n\n        useEffect(() => {\n            document.addEventListener(\"click\", handleClick);\n            return () => document.removeEventListener(\"click\", handleClick);\n\n            // read most recent callback and innerRef dom node from refs\n            function handleClick(e) {\n                if (\n                    innerRef.current &&\n                    callbackRef.current &&\n                    !innerRef.current.contains(e.target)\n                ) {\n                    callbackRef.current(e);\n                }\n            }\n        }, []); // no need for callback + innerRef dep\n\n        return innerRef; // return ref; client can omit `useRef`\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (checklistName !== \"\") {\n            props.submit(checklistName)\n        }else{\n            props.closeInputBox()\n        }\n    }\n    return (\n        <Paper component=\"form\" className={classes.root} id=\"container\" ref={innerRef} onSubmit={handleSubmit}>\n            <InputBase\n                className={classes.input}\n                placeholder=\"Enter Checklist Name\"\n                inputProps={{ 'aria-label': 'checklist-name' }}\n                value={checklistName}\n                onChange={(e) => setChecklistName(e.target.value)}\n                fullWidth\n            />\n            <Divider className={classes.divider} orientation=\"vertical\" />\n            <Button variant=\"text\" color=\"primary\" type=\"submit\" className={classes.iconButton} aria-label=\"checklist-name\">\n                Submit\n            </Button>\n        </Paper>\n    );\n}\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/Accordion/NewChecklistAccordion.js",["2164","2165","2166","2167","2168","2169"],"import React, { useState } from 'react'\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionItemHeading,\n    AccordionItemButton,\n    AccordionItemPanel,\n} from 'react-accessible-accordion';\n\n//material UI\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Container, Grid, Typography } from '@material-ui/core';\n\n\n//component\nimport styles from './NewChecklistAccordion.module.css';\nimport InputChecklistName from '../InputChecklistName';\nimport Content from '../Content/Content';\nimport Section from '../NewContent/Section';\n\n\n\nfunction NewChecklistAccordion() {\n   \n    const [editableID, setEditableID] = useState(false)\n    const [checklistName, setChecklistName] = useState('Inspection')\n    const handleEditHeading = () => {\n        setEditableID(true)\n    }\n    const handleCloseChecklistName = () => {\n        setEditableID(false)\n    }\n    const handleSubmitName =(name) => {\n        setChecklistName(name)\n        setEditableID(false)\n    }\n    return (\n        <div>\n            <Accordion allowZeroExpanded >\n                    <AccordionItem className={styles.accordion__item}>\n                        <AccordionItemHeading>\n                            {editableID   \n                                ? <InputChecklistName closeInputBox={handleCloseChecklistName} submit={handleSubmitName}/>\n                                : <AccordionItemButton className={styles.accordion__button}>\n                                {checklistName}\n                                {/* <span><EditIcon style={{fontSize: \"15px\"}} onClick={handleEditHeading}/></span> */}\n                            </AccordionItemButton>}\n                        </AccordionItemHeading>\n                        <AccordionItemPanel className={styles.accordion__panel}>\n                           <Section/>\n                        </AccordionItemPanel>\n                    </AccordionItem>\n            </Accordion>\n        </div>\n    )\n}\n\nexport default NewChecklistAccordion\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/Content/Content.js",["2170","2171","2172","2173","2174","2175","2176","2177","2178","2179","2180","2181","2182","2183","2184","2185","2186","2187","2188"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n//material-UI\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityRounded from \"@material-ui/icons/VisibilityRounded\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n//material-ui-popup-state\nimport Menu from 'material-ui-popup-state/HoverMenu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport {\n    usePopupState,\n    bindHover,\n    bindMenu,\n} from 'material-ui-popup-state/hooks'\nimport InputChecklistName from \"../InputChecklistName\";\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    tableOverflow: {\n        overflow: 'auto'\n    },\n    tableRowSelectColor: {\n        backgroundColor: 'red',\n        color: \"white\"\n    },\n    tableRowHoverColor: {\n        backgroundColor: \"pink\"\n    },\n    chip: {\n        backgroundColor: \"#d6e6f4\",\n        fontSize: \"10px\",\n        padding: \"0px\",\n        color: \"#186fdf\",\n        border: \"1px solid #a9c0e6\"\n    },\n    menuItem: {\n        fontSize: \"10px\",\n        color:\"blue\"\n    }\n}))\n\nconst theme = createMuiTheme({\n\n    overrides: {\n        MuiPaper: {\n            elevation4: {\n                boxShadow: \"0px 0px\",\n                border: \"1px solid rgba(0, 0, 0, 0.12)\"\n            },\n            rounded: {\n                borderRadius: \"5px\"\n            }\n        },\n        MUIDataTableSelectCell: {\n            expandDisabled: {\n                // Soft hide the button.\n                visibility: 'hidden',\n            },\n        },\n\n        MUIDataTableBodyCell: {\n            root: {\n                padding: \"5px 3px\",\n                '&:nth-child(3)': { textAlign: 'center' },\n                '&:nth-child(6)': { textAlign: 'center' },\n\n            }\n        },\n        MUIDataTableToolbar: {\n            root: { display: 'none' }\n        },\n        // handles table data header color\n        MUIDataTableHeadCell: {\n            root: {\n                padding: \"5px 10px\",\n                // visibility: \"hidden\",\n                '&:nth-child(1)': { width: '70%' },\n\n            },\n\n\n            fixedHeader: {\n                backgroundColor: '#E8E8E8',\n            }\n        },\n        MUIDataTablePagination: {\n            root: {\n                backgroundColor: useStyles.tableFooter,\n                color: useStyles.textPrimary\n            }\n        },\n        // handles row hover color and selected row color\n        MuiTableRow: {\n            // hover: { '&$root': { '&:hover': { backgroundColor: \"pink\" }, } },\n            root: {\n                '&$selected': {\n                    backgroundColor: \"lightgrey\"\n                }\n            },\n            footer: {\n                '& td': {\n                    padding: \"0px\",\n                    margin: \"0px\"\n                }\n            }\n        },\n        MuiTypography: {\n            body2: {\n                fontSize: \"12px\",\n                fontStyle: \"italic\"\n            },\n            body1: {\n                fontSize: \"14px\",\n                color: \"#186fdf\"\n            }\n        },\n        MuiTablePagination: {\n            selectRoot: {\n                marginRight: \"5px\",\n                marginLeft: \"0px\"\n            },\n            actions: {\n                marginLeft: \"5px\"\n            }\n        },\n        MainInputBase: {\n            input: {\n                fontSize: \"10px\"\n            }\n        },\n        MuiToolbar: {\n            gutters: {\n                '& *': {\n                    paddingLeft: \"0px\"\n                }\n            }\n        },\n    },\n})\nconst data = [\n    {\n        \"Question\": \" + Add New\",\n    }\n]\n\nexport default function Content() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [dataTableData, setDataTableData] = useState([...data])\n    const [sectionName, setSectionName] = useState('+ Add New')\n    const [questionName, setQuestionName] = useState('+ Add New')\n    const [viewIndex, setViewIndex] = useState()\n    const [option, setOption] = useState('')\n    const [checkListID, setCheckListID] = useState('')\n    const [openDialog, setOpenDialog] = useState(false)\n    const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })\n\n    const columns = [\n        {\n            name: \"Question\",\n            // label: \"EDIT\",\n            options: {\n                filter: false,\n                sort: false,\n                empty: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <>\n                            {viewIndex === tableMeta['rowIndex'] && option === \"section\"\n                            ?<InputChecklistName closeInputBox={handleClose} submit={handleSubmit}/>\n                            :<div {...bindHover(popupState)}>\n                                    {sectionName}\n                            </div>}\n                            <Menu\n                                {...bindMenu(popupState)}\n                                getContentAnchorEl={null}\n                                anchorOrigin={{\n                                    vertical: 'center',\n                                    horizontal: 'left',\n                                  }}\n                                  transformOrigin={{\n                                    vertical: 'center',\n                                    horizontal: 'right',\n                                  }}\n                            >\n                                <MenuItem onClick={()=> handleAdd(tableMeta, \"section\")} className={classes.menuItem}>Add Section</MenuItem>\n                                <MenuItem onClick={popupState.close} className={classes.menuItem}>Add Question</MenuItem>\n                            </Menu>\n                        </>\n                    )\n                }\n            }\n        },\n\n        {\n            name: \"Type of response\",\n            label: \"\",\n            options: {\n                filter: true,\n                sort: true,\n            }\n        },\n\n    ]\n\n   const handleAdd =(tableMeta, option) => {\n       setViewIndex(tableMeta['rowIndex'])\n       setOption(option)\n    // console.log(tableMeta['rowIndex'])\n   }\n\n    const handleClose = () => {\n        setViewIndex()\n    }\n    const handleSubmit = (value) => {\n        option === \"section\" ? setSectionName(value) : setQuestionName(value)\n        setViewIndex()\n    }\n    const handleCloseAddButton = () => {\n    }\n    const handleReload = () => {\n\n    }\n    const callOnce = (rowIndex) => {\n\n    }\n    const debounceFunction = (func, delay) => {\n\n    }\n\n\n    return (\n        <>\n            <Grid container spacing={4} direction=\"row\" justify=\"flex-end\">\n                <Grid item xs={12}>\n                    <MuiThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title=\"\"\n                            data={data}\n                            columns={columns}\n                            options={{\n                                filter: false,\n                                print: false,\n                                viewColumns: false,\n                                pagination: false,\n                                disableToolbarSelect: true,\n                                selectableRows: 'none',\n                                filterType: 'dropdown',\n                                responsive: 'standard',\n                                rowsPerPage: 5,\n                                rowsPerPageOptions: [5, 10, 15, 100],\n                                download: false,\n                                downloadOptions: {\n                                    filename: 'tableDownload.csv',\n                                    separator: ',',\n                                    filterOptions: {\n                                        useDisplayedColumnsOnly: true || false,\n                                        useDisplayedRowsOnly: true || true\n                                    } || false\n                                },\n                                tableBodyHeight: '',\n                                tableBodyMaxHeight: \"\",\n                                onRowClick: (rowData, rowState) => {\n                                    // console.log(rowData)\n                                    // console.log(rowState)\n                                    // setDataTableData(props.data[rowState['dataIndex']])\n                                    // setOpenDialog(true)\n                                },\n                                setTableProps: () => {\n                                    return {\n                                        padding: 'default'\n                                    }\n                                },\n                                setRowProps: (row, dataIndex, rowIndex) => {\n                                    return {\n                                        onMouseOver: () => {\n\n                                        },\n                                        onMouseLeave: () => {\n\n                                        }\n                                    }\n                                },\n                            }}\n                        />\n                    </MuiThemeProvider>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Section.js",["2189","2190","2191","2192","2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204"],"import React, { Component, useState, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Reorder, getItemStyle, getQuestionListStyle } from \"./Utils\";\nimport Question from \"./Question.js\";\nimport PopUp from \"./PopUp\";\nimport { v4 as uuidv4 } from 'uuid';\n\n// material -ui\nimport { Grid } from \"@material-ui/core\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { makeStyles } from \"@material-ui/styles\";\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/Add';\n\n\n//material-ui-popup-state\nimport Menu from 'material-ui-popup-state/HoverMenu'\nimport MenuItem from '@material-ui/core/MenuItem'\n// import {\n//   usePopupState,\n//   bindHover,\n//   bindMenu,\n// } from 'material-ui-popup-state/hooks'\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\nimport InputChecklistName from \"../InputChecklistName\";\n\n// fake data generator\nconst getSection = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `section-${k}`,\n    content: `section ${k}`,\n    questions: [`question-1`, `question-2`, `question-3`],\n    subSections: []\n  }));\n\nconst getQuestion = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `question-${k + 1}`,\n    content: `question ${k + 1}`,\n  }));\n\nconst useStyles = makeStyles(theme => ({\n  menuItem: {\n    fontSize: \"10px\",\n    color: \"blue\"\n  }\n}))\nexport default function Section() {\n  const classes = useStyles();\n  const [count, setCount] = useState(3)\n  const [countQ, setCountQ] = useState(3)\n  const [open, setOpen] = useState(false)\n  const [qID, setQID] = useState('')\n  const [propQID, setPropQID] = useState('')\n  const [questions, setQuestions] = useState(() => getQuestion(countQ))\n  const [sections, setSections] = useState(() => getSection(count))\n  const [openInput, setOpenInput] = useState(false)\n  const [openQuestInput, setOpenQuestInput] = useState(false)\n  const [openSubSecInput, setOpenSubSecInput] = useState(false)\n  const [newSectionName, setNewSectionName] = useState('')\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      //console.log(\"no-change\");\n      return;\n    }\n\n    if (result.type === \"SECTIONS\") {\n      console.log(result);\n      const section = Reorder(\n        sections,\n        result.source.index,\n        result.destination.index\n      );\n      setSections(section)\n      // this.setState({\n      //   sections\n      // });\n    } else {\n      const questions = Reorder(\n        sections[parseInt(result.type, 10)].questions,\n        // this.state.sections[parseInt(result.type, 10)].questions,\n        result.source.index,\n        result.destination.index\n      );\n      const section = JSON.parse(JSON.stringify(sections));\n      section[result.type].questions = questions;\n      setSections(section)\n      // this.setState({\n      //   sections\n      // });\n    }\n  }\n  const onDragUpdate = () => {\n\n  }\n  const handleOpen = (id) => {\n    open\n      ?\n      setQID(id)\n      :\n      setOpen(true)\n    setQID(id)\n\n  }\n  const handleClose = (id) => {\n    setOpen(false)\n    setQID('')\n  }\n  const handleCloseInputBox = () => {\n    setOpenInput(false)\n  }\n  const handleSubmitSection = (nam) => {\n    setNewSectionName(nam)\n    setOpenInput(false)\n    setCount(count + 1)\n    const obj = {\n      id: `section-${count + 1}`,\n      content: nam,\n      questions: [`question-1`, `question-2`, `question-3`],\n      subSections: []\n    }\n    console.log(obj)\n    setSections([...sections, obj])\n  }\n\n  const handleAddQuestion = (arg) => {\n    console.log(arg)\n    setOpenQuestInput(true)\n    setPropQID(arg)\n    setOpen(true)\n    setQID(arg)\n  }\n\n  const handleAddSubSection = (arg) => {\n    setOpenSubSecInput(true)\n    setPropQID(arg)\n    setQID(arg)\n  }\n  const handleCloseQuestInput = () => {\n    setOpenQuestInput(false)\n  }\n  const handleSubmitQuestion = (quest) => {\n    setOpenQuestInput(false)\n    console.log(quest)\n    sections.find((item) => {\n      if (item.id === qID) {\n        item.questions.push(quest)\n      }\n    })\n\n  }\n  const handleSubmitSubSection = (subsection) => {\n    setOpenSubSecInput(false)\n    let obj = {\n      id: uuidv4(),\n      content: subsection,\n      questions: [],\n    }\n    sections.find((item) => {\n      if (item.id === qID) {\n        item.subSections.push(obj)\n      }\n    })\n  }\n  const handleCloseSubSecInput = () => {\n    setOpenSubSecInput(false)\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n  return (\n    <DragDropContext\n      onDragEnd={onDragEnd}\n      onDragUpdate={onDragUpdate}\n    >\n      <Droppable droppableId=\"droppable\" type=\"SECTIONS\">\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            style={getQuestionListStyle(snapshot.isDraggingOver)}\n          >\n            <Grid\n              item xs={12}\n              style={{ display:\"flex\", justifyContent:\"space-between\",color: \"grey\", padding: \" 3px 12px\", borderBottom: \"1px solid #cacaca\", backgroundColor: \"white\", borderTopLeftRadius: \"7px\", borderTopRightRadius: \"7px\", fontSize: \"12px\" }}  >\n              <div>Question</div>\n              <div style={{width:\"250px\"}}>Type of response</div>\n            </Grid>\n\n            {openInput\n              ? <InputChecklistName closeInputBox={handleCloseInputBox} submit={handleSubmitSection} />\n              : <div style={getItemStyle()} onClick={() => setOpenInput(true)}>\n                <Grid item xs={12} style={{ display: \"flex\", alignItems: \"center\", cursor: \"pointer\", fontSize: \"14px\", fontStyle: \"italic\", color: \"grey\" }} >\n                  <AddIcon style={{ fontSize: \"16px\" }} /> Add New Section\n              </Grid>\n              </div>}\n\n            {sections.map((section, index) => (\n              <Draggable\n                key={section.id}\n                draggableId={section.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.draggableProps.style\n                    )}\n                  >\n\n                    <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent:\"space-between\"}} >\n                      <div style={{display:\"flex\", flexDirection:\"row\"}}>\n                        <span {...provided.dragHandleProps}>\n                          <DragIndicatorIcon\n                            style={{ float: \"left\", color: \"#cacaca\" }}\n                          />\n                        </span>\n                        {open && qID === section.id\n                          ? <ArrowDropUpIcon onClick={() => handleClose(section.id)} style={{ padding: \"2px\", borderRadius: \"50px\", backgroundColor: \"blue\", color: \"white\", cursor: \"pointer\" }} />\n                          : <ArrowDropDownIcon onClick={() => handleOpen(section.id)} style={{ padding: \"2px\", borderRadius: \"50px\", backgroundColor: \"blue\", color: \"white\", cursor: \"pointer\" }} />}\n                        <div style={{ marginLeft: \"10px\" }}>\n                          <PopUp data={section.content} id={section.id} type=\"section\" addQuestion={handleAddQuestion} addSubSection={handleAddSubSection} />\n                        </div>\n                      </div>\n                      {/* <div style={{ width: \"200px\" }}>\n                        box\n                      </div> */}\n                    </Grid>\n                    <Grid item xs={12}>\n                      {open && qID === section.id ?\n                        <Question\n                          sectionNum={index}\n                          section={section}\n                          propQID={propQID}\n                          openQuestInput={openQuestInput}\n                          closeQuestInput={handleCloseQuestInput}\n                          submitQuest={handleSubmitQuestion}\n                          openSubSecInput={openSubSecInput}\n                          closeSubSecInput={handleCloseSubSecInput}\n                          submitSubSec={handleSubmitSubSection}\n                        /> : \"\"}\n                    </Grid>\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext >\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Question.js",["2205","2206","2207","2208","2209","2210"],"import React, { Component } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\n\n//material ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Chip, Grid, TextField } from \"@material-ui/core\";\nimport EditIcon from '@material-ui/icons/Edit';\n\n//material-ui-popup-state\nimport Menu from 'material-ui-popup-state/HoverMenu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\n//component\nimport { getItemStyle, getAnswerListStyle } from \"./Utils\";\nimport PopUp from \"./PopUp\";\nimport SubSection from './SubSection';\nimport InputChecklistName from \"../InputChecklistName\";\nimport { green, orange, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles(theme => ({\n  underline: {\n    \"&&&:before\": {\n      borderBottom: \"none\"\n    },\n    \"&&:after\": {\n      borderBottom: \"none\"\n    }\n  },\n  menuItem: {\n    fontSize: \"10px\",\n    color: \"blue\"\n  }\n}))\n\nconst Question = props => {\n  const { section, sectionNum, openQuestInput, closeQuestInput, submitQuest, propQID, openSubSecInput, closeSubSecInput, submitSubSec } = props;\n\n  const classes = useStyles();\n  const [responses, setResponses] = React.useState('');\n\n  const handleChange = (event) => {\n    setResponses(event.target.value);\n  };\n  const option1 = () => {\n    return (\n      <div>\n        <Chip label=\"Good\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid green\", backgroundColor:\"#94ffa5\", color: \"green\" }}/>\n        <Chip label=\"Fair\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid orange\",backgroundColor:\"#fde9c4\", color: \"orange\" }}/>\n        <Chip label=\"Poor\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid red\",backgroundColor:\"#f7c3c3\", color: \"red\" }}/>\n        <Chip label=\"N/A\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid grey\", color: \"grey\" }}/>\n      </div>\n    )\n  }\n  const option2 = () => {\n    return (\n      <div>\n        <Chip label=\"Safe\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid green\",backgroundColor:\"#94ffa5\", color: \"green\" }}/>\n        <Chip label=\"All Risk\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid red\",backgroundColor:\"#f7c3c3\",  color: \"red\" }}/>\n        <Chip label=\"N/A\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid grey\", color: \"grey\" }}/>\n      </div>\n    )\n  }\n  const option3 = () => {\n    return (\n      <div>\n        <Chip label=\"Pass\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid green\",backgroundColor:\"#94ffa5\", color: \"green\" }}/>\n        <Chip label=\"Fail\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid red\",backgroundColor:\"#f7c3c3\", color: \"red\" }}/>\n        <Chip label=\"N/A\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid grey\", color: \"grey\" }}/>\n      </div>\n    )\n  }\n  const option4 = () => {\n    return (\n      <div>\n        <Chip label=\"Yes\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid green\",backgroundColor:\"#94ffa5\", color: \"green\" }}/>\n        <Chip label=\"No\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid red\",backgroundColor:\"#f7c3c3\", color: \"red\" }}/>\n        <Chip label=\"N/A\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid grey\", color: \"grey\" }}/>\n      </div>\n    )\n  }\n  const option5 = () => {\n    return (\n      <div>\n        <Chip label=\"Compliant\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid green\",backgroundColor:\"#94ffa5\", color: \"green\" }}/>\n        <Chip label=\"Non-Compliant\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid red\",backgroundColor:\"#f7c3c3\", color: \"red\" }}/>\n        <Chip label=\"N/A\" size=\"small\" style={{marginRight:\"3px\", fontSize:\"10px\", border: \"1px solid grey\", color: \"grey\" }}/>\n      </div>\n    )\n  }\n  const options = [\n    {\n      label: \"1\",\n      value: option1(),\n      short: \"GFPN\"\n    },\n    {\n      label: \"2\",\n      value: option2(),\n      short: \"SAN\"\n    },\n    {\n      label: \"3\",\n      value: option3(),\n      short: \"PFN\"\n    },\n    {\n      label: \"4\",\n      value: option4(),\n      short: \"YNN\"\n    },\n    {\n      label: \"5\",\n      value: option5(),\n      short: \"CNN\"\n    }\n  ]\n  const handleAddQuestion = () => {\n\n  }\n  const handleAddSubSection = () => {\n\n  }\n  console.log(props)\n  console.log()\n  return (\n    <Droppable droppableId={`droppable${section.id}`} type={`${sectionNum}`}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getAnswerListStyle(snapshot.isDraggingOver)}\n        >\n          {openQuestInput && section.id === propQID\n            ? <Grid item xs={12} style={{ display: \"flex\", alignItems: \"center\" }} >\n              <InputChecklistName closeInputBox={closeQuestInput} submit={submitQuest} />\n            </Grid>\n            : openSubSecInput && section.id === propQID\n              ? <Grid item xs={12} style={{ display: \"flex\", alignItems: \"center\" }} >\n                <InputChecklistName closeInputBox={closeSubSecInput} submit={submitSubSec} />\n              </Grid>\n              : \"\"}\n          {section.questions && section.questions.map((answer, index) => {\n            return (\n              <Draggable\n                key={`${sectionNum}${index}`}\n                draggableId={`${sectionNum}${index}`}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.draggableProps.style\n                    )}\n                  >\n                    <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }} >\n                      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                        <span {...provided.dragHandleProps}>\n                          <DragIndicatorIcon\n                            style={{ float: \"left\", color: \"#cacaca\" }}\n                          />\n                        </span>\n                        <PopUp data={answer} type=\"question\" addQuestion={handleAddQuestion} addSubSection={handleAddSubSection} />\n                      </div>\n                      <div style={{ width: \"200px\" }}>\n                        <TextField\n                          id=\"standard-select-response\"\n                          select\n                          label=\"Select Response\"\n                          value={responses}\n                          onChange={handleChange}\n                          fullWidth\n                          InputProps={{ classes }}\n                        >\n                          {options.map((option) => {\n                            console.log(option)\n                            return (\n                              <MenuItem key={option.label} value={option.short}>\n                                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"100%\" }}>\n                                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                    {option.value}\n                                  </div>\n                                  <div >\n                                    <EditIcon style={{ fontSize: \"12px\" }} />\n                                  </div>\n                                </div>\n                              </MenuItem>\n                            )\n                          })}\n                        </TextField>\n                      </div>\n                    </Grid>\n                  </div>\n                )}\n              </Draggable>\n            );\n          })}\n          {section.subSections ? <SubSection subSections={section.subSections} /> : \"\"}\n          {provided.placeholder}\n        </div>\n      )\n      }\n    </Droppable>\n  );\n};\n\nexport default Question;\n","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/Utils.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/PopUp.js",[],"/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/SubSection.js",["2211","2212","2213","2214","2215","2216","2217","2218","2219","2220","2221","2222","2223","2224","2225","2226","2227","2228"],"import React, { Component, useState, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Reorder, getItemStyle, getQuestionListStyle } from \"./Utils\";\nimport SubQuestion from \"./SubQuestion.js\";\nimport PopUp from \"./PopUp\";\nimport { v4 as uuidv4 } from 'uuid';\n\n// material -ui\nimport { Grid } from \"@material-ui/core\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { makeStyles } from \"@material-ui/styles\";\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/Add';\n\n\n//material-ui-popup-state\nimport Menu from 'material-ui-popup-state/HoverMenu'\nimport MenuItem from '@material-ui/core/MenuItem'\n// import {\n//   usePopupState,\n//   bindHover,\n//   bindMenu,\n// } from 'material-ui-popup-state/hooks'\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\nimport InputChecklistName from \"../InputChecklistName\";\n\n// fake data generator\n\n\nconst useStyles = makeStyles(theme => ({\n  menuItem: {\n    fontSize: \"10px\",\n    color: \"blue\"\n  }\n}))\nexport default function SubSection(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false)\n  const [qID, setQID] = useState('')\n  const [propQID, setPropQID] = useState('')\n  const [sections, setSections] = useState(props.subSections)\n  const [openInput, setOpenInput] = useState(false)\n  const [openQuestInput, setOpenQuestInput] = useState(false)\n  const [newSectionName, setNewSectionName] = useState('')\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      //console.log(\"no-change\");\n      return;\n    }\n\n    if (result.type === \"SECTIONS\") {\n      console.log(result);\n      const section = Reorder(\n        sections,\n        result.source.index,\n        result.destination.index\n      );\n      setSections(section)\n      // this.setState({\n      //   sections\n      // });\n    } else {\n      const questions = Reorder(\n        sections[parseInt(result.type, 10)].questions,\n        // this.state.sections[parseInt(result.type, 10)].questions,\n        result.source.index,\n        result.destination.index\n      );\n      const section = JSON.parse(JSON.stringify(sections));\n      section[result.type].questions = questions;\n      setSections(section)\n      // this.setState({\n      //   sections\n      // });\n    }\n  }\n  const onDragUpdate = () => {\n\n  }\n  const handleOpen = (id) => {\n    open \n    ?\n      setQID(id) \n    :\n      setOpen(true)\n      setQID(id)\n\n  }\n  const handleClose = (id) => {\n    setOpen(false)\n    setQID('')\n  }\n  const handleCloseInputBox = () => {\n    setOpenInput(false)\n  }\n\n  const handleAddQuestion = (arg) => {\n    console.log(arg)\n    setOpenQuestInput(true)\n    setPropQID(arg)\n    setOpen(true)\n    setQID(arg)\n  }\n\n \n  const handleCloseQuestInput =() => {\n    setOpenQuestInput(false)\n  }\n  const handleSubmitQuestion = (quest) => {\n    setOpenQuestInput(false)\n    console.log(quest)\n    sections.find((item) => {\n      if(item.id === qID){\n        item.questions.push(quest)\n      }\n    })\n    \n  }\n\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n  return (\n    <DragDropContext\n      onDragEnd={onDragEnd}\n      onDragUpdate={onDragUpdate}\n    >\n      <Droppable droppableId=\"droppable\" type=\"SECTIONS\">\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            style={getQuestionListStyle(snapshot.isDraggingOver)}\n          >\n\n            {sections.map((section, index) => (\n              <Draggable\n                key={section.id}\n                draggableId={section.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.draggableProps.style\n                    )}\n                  >\n                  \n                    <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent:\"space-between\"}} >\n                      <div style={{display:\"flex\", flexDirection:\"row\"}}>\n                        <span {...provided.dragHandleProps}>\n                          <DragIndicatorIcon\n                            style={{ float: \"left\", color: \"#cacaca\" }}\n                          />\n                        </span>\n                        {open && qID === section.id \n                        ? <ArrowDropUpIcon onClick={() => handleClose(section.id)} style={{padding:\"2px\", borderRadius:\"50px\", backgroundColor:\"blue\", color: \"white\", cursor:\"pointer\"}}/> \n                        : <ArrowDropDownIcon onClick={() => handleOpen(section.id)} style={{padding:\"2px\", borderRadius:\"50px\", backgroundColor:\"blue\", color: \"white\", cursor:\"pointer\"}}/>\n                        }\n                      <div style={{marginLeft:\"10px\"}}>\n                        <PopUp data={section.content} id={section.id} type=\"section\" addQuestion={handleAddQuestion} />\n                      </div>\n                      </div>\n                      {/* <div style={{ width: \"200px\" }}>\n                        box\n                      </div> */}\n                      \n                    </Grid>\n                    <Grid item xs={12}>\n                      {open && qID === section.id ? \n                        <SubQuestion \n                          sectionNum={index} \n                          section={section}\n                          propQID={propQID} \n                          openQuestInput={openQuestInput} \n                          closeQuestInput={handleCloseQuestInput}\n                          submitQuest={handleSubmitQuestion}\n                          \n                        /> : \"\"}\n                    </Grid>\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext >\n  );\n}","/home/krushna/krushna/EquinoxLab/HQWebApp/master/src/pages/master/blankTemplate/Tabs/Component/NewContent/SubQuestion.js",["2229","2230","2231","2232","2233"],"import React, { Component } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\n\n//material ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Grid } from \"@material-ui/core\";\n\n\n//material-ui-popup-state\nimport Menu from 'material-ui-popup-state/HoverMenu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\n//component\nimport { getItemStyle, getAnswerListStyle } from \"./Utils\";\nimport PopUp from \"./PopUp\";\nimport InputChecklistName from \"../InputChecklistName\";\n\nconst useStyles = makeStyles(theme => ({\n\n  menuItem: {\n    fontSize: \"10px\",\n    color: \"blue\"\n  }\n}))\n\nconst SubQuestion = props => {\n  const { section, sectionNum, openQuestInput, closeQuestInput, submitQuest, propQID } = props; \n\n  const classes = useStyles();\n\n  \n  const handleAddQuestion = () => {\n\n  }\n  const handleAddSubSection = () => {\n\n  }\n  console.log(props)\n  return (\n    <Droppable droppableId={`droppable${section.id}`} type={`${sectionNum}`}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getAnswerListStyle(snapshot.isDraggingOver)}\n        >\n          {openQuestInput && section.id === propQID\n              ?<Grid item xs={12} style={{ display: \"flex\", alignItems: \"center\" }} >\n                  <InputChecklistName closeInputBox={closeQuestInput} submit={submitQuest}/>\n              </Grid>\n          : \"\"}\n          {section.questions && section.questions.map((answer, index) => {\n            return (\n              <Draggable\n                key={`${sectionNum}${index}`}\n                draggableId={`${sectionNum}${index}`}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.draggableProps.style\n                    )}\n                  >\n                    <span {...provided.dragHandleProps}>\n                      <DragIndicatorIcon\n                        style={{ float: \"left\", color: \"#cacaca\"  }}\n                      />\n                    </span>\n                    <PopUp data={answer}  type=\"question\" addQuestion={handleAddQuestion} addSubSection={handleAddSubSection}/>\n                  </div>\n                )}\n              </Draggable>\n            );\n          })}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n\nexport default SubQuestion;\n",{"ruleId":"2234","replacedBy":"2235"},{"ruleId":"2236","replacedBy":"2237"},{"ruleId":"2238","severity":1,"message":"2239","line":3,"column":10,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2242","line":9,"column":8,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2243","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2244","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2245","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2246","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2247","line":25,"column":26,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":30},{"ruleId":"2238","severity":1,"message":"2248","line":4,"column":10,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2249","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":19},{"ruleId":"2250","severity":1,"message":"2251","line":28,"column":1,"nodeType":"2252","endLine":30,"endColumn":3},{"ruleId":"2238","severity":1,"message":"2253","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2254","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2255","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2256","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2257","line":19,"column":52,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":63},{"ruleId":"2238","severity":1,"message":"2258","line":22,"column":10,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2259","line":36,"column":13,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2260","line":38,"column":12,"nodeType":"2240","messageId":"2241","endLine":38,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2261","line":43,"column":12,"nodeType":"2240","messageId":"2241","endLine":43,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2262","line":48,"column":26,"nodeType":"2240","messageId":"2241","endLine":48,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2263","line":60,"column":11,"nodeType":"2240","messageId":"2241","endLine":60,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2264","line":169,"column":11,"nodeType":"2240","messageId":"2241","endLine":169,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2265","line":189,"column":11,"nodeType":"2240","messageId":"2241","endLine":189,"endColumn":21},{"ruleId":"2266","severity":1,"message":"2267","line":204,"column":38,"nodeType":"2268","messageId":"2269","endLine":204,"endColumn":40},{"ruleId":"2270","severity":1,"message":"2271","line":305,"column":33,"nodeType":"2272","endLine":305,"endColumn":65},{"ruleId":"2250","severity":1,"message":"2251","line":12,"column":1,"nodeType":"2252","endLine":138,"endColumn":3},{"ruleId":"2238","severity":1,"message":"2273","line":9,"column":15,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2274","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2275","line":15,"column":18,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":30},{"ruleId":"2238","severity":1,"message":"2276","line":16,"column":17,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":28},{"ruleId":"2238","severity":1,"message":"2277","line":17,"column":16,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2278","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2279","line":30,"column":8,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2280","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2281","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2282","line":33,"column":8,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2283","line":34,"column":8,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2284","line":40,"column":8,"nodeType":"2240","messageId":"2241","endLine":40,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2285","line":41,"column":8,"nodeType":"2240","messageId":"2241","endLine":41,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2286","line":42,"column":8,"nodeType":"2240","messageId":"2241","endLine":42,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2287","line":44,"column":8,"nodeType":"2240","messageId":"2241","endLine":44,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2288","line":45,"column":8,"nodeType":"2240","messageId":"2241","endLine":45,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2289","line":50,"column":10,"nodeType":"2240","messageId":"2241","endLine":50,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2291","line":7,"column":3,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":10,"column":3,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2294","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2295","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2296","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2297","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2298","line":46,"column":10,"nodeType":"2240","messageId":"2241","endLine":46,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2299","line":46,"column":23,"nodeType":"2240","messageId":"2241","endLine":46,"endColumn":37},{"ruleId":"2238","severity":1,"message":"2300","line":47,"column":10,"nodeType":"2240","messageId":"2241","endLine":47,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2301","line":47,"column":21,"nodeType":"2240","messageId":"2241","endLine":47,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2302","line":51,"column":22,"nodeType":"2240","messageId":"2241","endLine":51,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2303","line":52,"column":10,"nodeType":"2240","messageId":"2241","endLine":52,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2304","line":52,"column":19,"nodeType":"2240","messageId":"2241","endLine":52,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2305","line":54,"column":9,"nodeType":"2240","messageId":"2241","endLine":54,"endColumn":27},{"ruleId":"2306","severity":1,"message":"2307","line":56,"column":7,"nodeType":"2308","messageId":"2309","endLine":71,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2310","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2311","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2312","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2313","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2314","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2315","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2316","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2317","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2318","line":34,"column":8,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2256","line":36,"column":8,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2319","line":37,"column":10,"nodeType":"2240","messageId":"2241","endLine":37,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2320","line":189,"column":12,"nodeType":"2240","messageId":"2241","endLine":189,"endColumn":16},{"ruleId":"2306","severity":1,"message":"2307","line":245,"column":9,"nodeType":"2308","messageId":"2309","endLine":262,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2321","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2322","severity":1,"message":"2323","line":29,"column":3,"nodeType":"2324","messageId":"2269","endLine":29,"endColumn":12},{"ruleId":"2322","severity":1,"message":"2325","line":138,"column":5,"nodeType":"2324","messageId":"2269","endLine":138,"endColumn":14},{"ruleId":"2322","severity":1,"message":"2326","line":8,"column":5,"nodeType":"2324","messageId":"2269","endLine":8,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2327","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2328","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":83,"column":11,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2330","line":85,"column":12,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2331","line":85,"column":22,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2332","line":89,"column":12,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2333","line":89,"column":21,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":31},{"ruleId":"2334","severity":1,"message":"2335","line":95,"column":8,"nodeType":"2336","endLine":95,"endColumn":20,"suggestions":"2337"},{"ruleId":"2238","severity":1,"message":"2338","line":9,"column":8,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2339","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2340","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2344","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2345","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2346","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2347","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2328","line":96,"column":9,"nodeType":"2240","messageId":"2241","endLine":96,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2348","line":99,"column":10,"nodeType":"2240","messageId":"2241","endLine":99,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2349","line":100,"column":10,"nodeType":"2240","messageId":"2241","endLine":100,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":101,"column":10,"nodeType":"2240","messageId":"2241","endLine":101,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2247","line":103,"column":9,"nodeType":"2240","messageId":"2241","endLine":103,"endColumn":13},{"ruleId":"2334","severity":1,"message":"2351","line":113,"column":6,"nodeType":"2336","endLine":113,"endColumn":8,"suggestions":"2352"},{"ruleId":"2238","severity":1,"message":"2353","line":209,"column":9,"nodeType":"2240","messageId":"2241","endLine":209,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2354","line":212,"column":9,"nodeType":"2240","messageId":"2241","endLine":212,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2355","line":215,"column":9,"nodeType":"2240","messageId":"2241","endLine":215,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2356","line":218,"column":9,"nodeType":"2240","messageId":"2241","endLine":218,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2357","line":225,"column":9,"nodeType":"2240","messageId":"2241","endLine":225,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2340","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2344","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2346","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2328","line":82,"column":9,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2247","line":89,"column":9,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":13},{"ruleId":"2334","severity":1,"message":"2351","line":99,"column":6,"nodeType":"2336","endLine":99,"endColumn":8,"suggestions":"2358"},{"ruleId":"2238","severity":1,"message":"2359","line":4,"column":3,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2360","line":6,"column":3,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2361","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2362","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2363","line":14,"column":3,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2364","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2365","line":16,"column":3,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2366","line":17,"column":3,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2367","line":18,"column":3,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2368","line":19,"column":3,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2369","line":20,"column":3,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2370","line":21,"column":3,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2371","line":22,"column":3,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2372","line":23,"column":3,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2373","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2374","line":27,"column":10,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2375","line":27,"column":19,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2340","line":36,"column":8,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2376","line":38,"column":8,"nodeType":"2240","messageId":"2241","endLine":38,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2377","line":40,"column":8,"nodeType":"2240","messageId":"2241","endLine":40,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2378","line":45,"column":8,"nodeType":"2240","messageId":"2241","endLine":45,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2379","line":48,"column":8,"nodeType":"2240","messageId":"2241","endLine":48,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2380","line":50,"column":8,"nodeType":"2240","messageId":"2241","endLine":50,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2381","line":51,"column":8,"nodeType":"2240","messageId":"2241","endLine":51,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2382","line":53,"column":8,"nodeType":"2240","messageId":"2241","endLine":53,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2256","line":55,"column":8,"nodeType":"2240","messageId":"2241","endLine":55,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2383","line":56,"column":8,"nodeType":"2240","messageId":"2241","endLine":56,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2384","line":57,"column":8,"nodeType":"2240","messageId":"2241","endLine":57,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2385","line":58,"column":8,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2386","line":62,"column":8,"nodeType":"2240","messageId":"2241","endLine":62,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2387","line":70,"column":7,"nodeType":"2240","messageId":"2241","endLine":70,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2388","line":75,"column":7,"nodeType":"2240","messageId":"2241","endLine":75,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2389","line":87,"column":9,"nodeType":"2240","messageId":"2241","endLine":87,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2390","line":111,"column":7,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2391","line":133,"column":10,"nodeType":"2240","messageId":"2241","endLine":133,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2390","line":151,"column":7,"nodeType":"2240","messageId":"2241","endLine":151,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2392","line":174,"column":10,"nodeType":"2240","messageId":"2241","endLine":174,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2390","line":187,"column":7,"nodeType":"2240","messageId":"2241","endLine":187,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2393","line":202,"column":10,"nodeType":"2240","messageId":"2241","endLine":202,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2390","line":215,"column":7,"nodeType":"2240","messageId":"2241","endLine":215,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2390","line":247,"column":7,"nodeType":"2240","messageId":"2241","endLine":247,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2394","line":292,"column":9,"nodeType":"2240","messageId":"2241","endLine":292,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2359","line":4,"column":3,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2395","line":5,"column":3,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2360","line":6,"column":3,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2396","line":7,"column":3,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2361","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2364","line":14,"column":3,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2397","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2369","line":20,"column":3,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2372","line":23,"column":3,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2376","line":33,"column":8,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2398","line":41,"column":7,"nodeType":"2240","messageId":"2241","endLine":41,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2399","line":76,"column":10,"nodeType":"2240","messageId":"2241","endLine":76,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2400","line":76,"column":26,"nodeType":"2240","messageId":"2241","endLine":76,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2401","line":79,"column":10,"nodeType":"2240","messageId":"2241","endLine":79,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2402","line":79,"column":24,"nodeType":"2240","messageId":"2241","endLine":79,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2403","line":82,"column":9,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2404","line":659,"column":10,"nodeType":"2240","messageId":"2241","endLine":659,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2256","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2405","line":9,"column":10,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2406","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2407","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2340","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":27,"column":8,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":28,"column":8,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2408","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2328","line":48,"column":11,"nodeType":"2240","messageId":"2241","endLine":48,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":49,"column":11,"nodeType":"2240","messageId":"2241","endLine":49,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2350","line":54,"column":12,"nodeType":"2240","messageId":"2241","endLine":54,"endColumn":19},{"ruleId":"2334","severity":1,"message":"2409","line":74,"column":8,"nodeType":"2336","endLine":74,"endColumn":10,"suggestions":"2410"},{"ruleId":"2238","severity":1,"message":"2355","line":561,"column":11,"nodeType":"2240","messageId":"2241","endLine":561,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2411","line":5,"column":24,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2412","line":6,"column":17,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2413","line":7,"column":17,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2414","line":9,"column":21,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":32},{"ruleId":"2238","severity":1,"message":"2415","line":10,"column":19,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":30},{"ruleId":"2238","severity":1,"message":"2416","line":11,"column":18,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2376","line":27,"column":8,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2417","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2418","line":11,"column":3,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2419","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2420","line":17,"column":18,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2411","line":18,"column":24,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2421","line":20,"column":13,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2422","line":21,"column":11,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2423","line":30,"column":10,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2361","line":30,"column":29,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2424","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2425","line":43,"column":7,"nodeType":"2240","messageId":"2241","endLine":43,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2426","line":106,"column":8,"nodeType":"2240","messageId":"2241","endLine":106,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2427","line":106,"column":18,"nodeType":"2240","messageId":"2241","endLine":106,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2428","line":107,"column":8,"nodeType":"2240","messageId":"2241","endLine":107,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2429","line":107,"column":23,"nodeType":"2240","messageId":"2241","endLine":107,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2430","line":109,"column":8,"nodeType":"2240","messageId":"2241","endLine":109,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2431","line":109,"column":31,"nodeType":"2240","messageId":"2241","endLine":109,"endColumn":55},{"ruleId":"2238","severity":1,"message":"2432","line":111,"column":8,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2433","line":111,"column":22,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2359","line":4,"column":3,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2395","line":5,"column":3,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2360","line":6,"column":3,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2396","line":7,"column":3,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2361","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2363","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2364","line":14,"column":3,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2397","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2365","line":16,"column":3,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2366","line":17,"column":3,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2367","line":18,"column":3,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2368","line":19,"column":3,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2369","line":20,"column":3,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2370","line":21,"column":3,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2371","line":22,"column":3,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2343","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2340","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2376","line":33,"column":8,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2342","line":34,"column":8,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2434","line":35,"column":8,"nodeType":"2240","messageId":"2241","endLine":35,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2435","line":48,"column":7,"nodeType":"2240","messageId":"2241","endLine":48,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2436","line":49,"column":7,"nodeType":"2240","messageId":"2241","endLine":49,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2389","line":58,"column":9,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2399","line":61,"column":10,"nodeType":"2240","messageId":"2241","endLine":61,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2400","line":61,"column":26,"nodeType":"2240","messageId":"2241","endLine":61,"endColumn":43},{"ruleId":"2306","severity":1,"message":"2307","line":109,"column":11,"nodeType":"2308","messageId":"2309","endLine":114,"endColumn":12},{"ruleId":"2250","severity":1,"message":"2251","line":1,"column":1,"nodeType":"2252","endLine":182,"endColumn":3},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2396","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2439","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":19,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":26,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2256","line":30,"column":8,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2443","line":82,"column":12,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2444","line":82,"column":20,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2445","line":83,"column":12,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2446","line":83,"column":20,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2329","line":85,"column":11,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":276,"column":41,"nodeType":"2449","endLine":276,"endColumn":67},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2396","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2439","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":19,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":26,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2256","line":30,"column":8,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2450","line":83,"column":12,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2451","line":83,"column":23,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2329","line":85,"column":11,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":274,"column":41,"nodeType":"2449","endLine":274,"endColumn":67},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2439","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":17,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":24,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2329","line":79,"column":9,"nodeType":"2240","messageId":"2241","endLine":79,"endColumn":16},{"ruleId":"2447","severity":1,"message":"2448","line":246,"column":23,"nodeType":"2449","endLine":246,"endColumn":49},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2453","line":25,"column":10,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2454","line":68,"column":12,"nodeType":"2240","messageId":"2241","endLine":68,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2455","line":68,"column":26,"nodeType":"2240","messageId":"2241","endLine":68,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2330","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2396","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2439","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":27,"column":19,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":27,"column":26,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2443","line":85,"column":12,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2444","line":85,"column":20,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2329","line":96,"column":11,"nodeType":"2240","messageId":"2241","endLine":96,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":392,"column":49,"nodeType":"2449","endLine":392,"endColumn":75},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2256","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2452","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2396","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2439","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":28,"column":19,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":28,"column":26,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2443","line":83,"column":12,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2444","line":83,"column":20,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2446","line":85,"column":20,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2331","line":86,"column":22,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2329","line":96,"column":11,"nodeType":"2240","messageId":"2241","endLine":96,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":423,"column":49,"nodeType":"2449","endLine":423,"endColumn":75},{"ruleId":"2238","severity":1,"message":"2456","line":1,"column":8,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2457","line":2,"column":26,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":42},{"ruleId":"2458","severity":1,"message":"2459","line":17,"column":3,"nodeType":"2460","messageId":"2461","endLine":20,"endColumn":4},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2441","line":23,"column":19,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":23,"column":26,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2463","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2464","line":73,"column":9,"nodeType":"2240","messageId":"2241","endLine":73,"endColumn":19},{"ruleId":"2447","severity":1,"message":"2448","line":170,"column":21,"nodeType":"2449","endLine":170,"endColumn":47},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2465","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2396","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":23,"column":10,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2329","line":62,"column":11,"nodeType":"2240","messageId":"2241","endLine":62,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2468","line":63,"column":12,"nodeType":"2240","messageId":"2241","endLine":63,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2469","line":63,"column":25,"nodeType":"2240","messageId":"2241","endLine":63,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2328","line":81,"column":9,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2349","line":85,"column":10,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":86,"column":10,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":17},{"ruleId":"2306","severity":1,"message":"2307","line":152,"column":11,"nodeType":"2308","messageId":"2309","endLine":157,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2355","line":229,"column":9,"nodeType":"2240","messageId":"2241","endLine":229,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":232,"column":9,"nodeType":"2240","messageId":"2241","endLine":232,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2340","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2328","line":82,"column":9,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":16},{"ruleId":"2334","severity":1,"message":"2470","line":100,"column":6,"nodeType":"2336","endLine":100,"endColumn":8,"suggestions":"2471"},{"ruleId":"2238","severity":1,"message":"2256","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2340","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2328","line":79,"column":9,"nodeType":"2240","messageId":"2241","endLine":79,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2340","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2343","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2328","line":89,"column":9,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2472","line":95,"column":10,"nodeType":"2240","messageId":"2241","endLine":95,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2338","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2473","line":6,"column":10,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2361","line":8,"column":40,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":46},{"ruleId":"2238","severity":1,"message":"2259","line":148,"column":52,"nodeType":"2240","messageId":"2241","endLine":148,"endColumn":57},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2361","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2340","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2342","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":83,"column":9,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":84,"column":9,"nodeType":"2240","messageId":"2241","endLine":84,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2474","line":85,"column":21,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":87,"column":10,"nodeType":"2240","messageId":"2241","endLine":87,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":88,"column":10,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2355","line":200,"column":9,"nodeType":"2240","messageId":"2241","endLine":200,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":203,"column":9,"nodeType":"2240","messageId":"2241","endLine":203,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2439","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":17,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":24,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2329","line":78,"column":9,"nodeType":"2240","messageId":"2241","endLine":78,"endColumn":16},{"ruleId":"2447","severity":1,"message":"2448","line":241,"column":23,"nodeType":"2449","endLine":241,"endColumn":49},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2453","line":21,"column":10,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":21,"column":23,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2441","line":25,"column":19,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":25,"column":26,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2464","line":92,"column":11,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":21},{"ruleId":"2447","severity":1,"message":"2448","line":180,"column":41,"nodeType":"2449","endLine":180,"endColumn":67},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2465","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":25,"column":10,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":25,"column":23,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":28,"column":8,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2441","line":31,"column":19,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":31,"column":26,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":83,"column":18,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":103,"column":11,"nodeType":"2240","messageId":"2241","endLine":103,"endColumn":18},{"ruleId":"2334","severity":1,"message":"2483","line":111,"column":8,"nodeType":"2336","endLine":111,"endColumn":32,"suggestions":"2484"},{"ruleId":"2334","severity":1,"message":"2485","line":111,"column":9,"nodeType":"2486","endLine":111,"endColumn":31},{"ruleId":"2447","severity":1,"message":"2448","line":341,"column":57,"nodeType":"2449","endLine":341,"endColumn":83},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2439","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":17,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":24,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2487","line":79,"column":9,"nodeType":"2240","messageId":"2241","endLine":79,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2329","line":80,"column":9,"nodeType":"2240","messageId":"2241","endLine":80,"endColumn":16},{"ruleId":"2447","severity":1,"message":"2448","line":244,"column":23,"nodeType":"2449","endLine":244,"endColumn":49},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2439","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":17,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":24,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2329","line":77,"column":9,"nodeType":"2240","messageId":"2241","endLine":77,"endColumn":16},{"ruleId":"2447","severity":1,"message":"2448","line":244,"column":23,"nodeType":"2449","endLine":244,"endColumn":49},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2465","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":25,"column":10,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":25,"column":23,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":28,"column":8,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2441","line":31,"column":19,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":31,"column":26,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":113,"column":18,"nodeType":"2240","messageId":"2241","endLine":113,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":133,"column":11,"nodeType":"2240","messageId":"2241","endLine":133,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":410,"column":49,"nodeType":"2449","endLine":410,"endColumn":75},{"ruleId":"2238","severity":1,"message":"2365","line":3,"column":18,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2366","line":3,"column":24,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":28},{"ruleId":"2458","severity":1,"message":"2459","line":18,"column":3,"nodeType":"2460","messageId":"2461","endLine":21,"endColumn":4},{"ruleId":"2238","severity":1,"message":"2488","line":3,"column":18,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":23},{"ruleId":"2458","severity":1,"message":"2459","line":17,"column":3,"nodeType":"2460","messageId":"2461","endLine":20,"endColumn":4},{"ruleId":"2238","severity":1,"message":"2419","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2473","line":3,"column":10,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2278","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2489","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":16,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":26,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2334","severity":1,"message":"2490","line":21,"column":8,"nodeType":"2336","endLine":21,"endColumn":14,"suggestions":"2491"},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":16,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":26,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2463","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":16,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":26,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2492","line":6,"column":12,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2493","line":9,"column":29,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":47},{"ruleId":"2238","severity":1,"message":"2494","line":10,"column":30,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":49},{"ruleId":"2238","severity":1,"message":"2495","line":11,"column":29,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":47},{"ruleId":"2238","severity":1,"message":"2496","line":12,"column":29,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":47},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2497","line":8,"column":12,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2390","line":20,"column":13,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":24},{"ruleId":"2334","severity":1,"message":"2490","line":22,"column":8,"nodeType":"2336","endLine":22,"endColumn":10,"suggestions":"2498"},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2473","line":8,"column":10,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2338","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2273","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2499","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2340","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2500","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2329","line":121,"column":9,"nodeType":"2240","messageId":"2241","endLine":121,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2501","line":124,"column":10,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2502","line":124,"column":25,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2348","line":125,"column":10,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":125,"column":21,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":126,"column":10,"nodeType":"2240","messageId":"2241","endLine":126,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2503","line":126,"column":16,"nodeType":"2240","messageId":"2241","endLine":126,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2350","line":127,"column":10,"nodeType":"2240","messageId":"2241","endLine":127,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2504","line":127,"column":19,"nodeType":"2240","messageId":"2241","endLine":127,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2505","line":131,"column":24,"nodeType":"2240","messageId":"2241","endLine":131,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2390","line":133,"column":9,"nodeType":"2240","messageId":"2241","endLine":133,"endColumn":20},{"ruleId":"2506","severity":1,"message":"2507","line":141,"column":13,"nodeType":"2240","messageId":"2508","endLine":141,"endColumn":14},{"ruleId":"2334","severity":1,"message":"2490","line":153,"column":6,"nodeType":"2336","endLine":153,"endColumn":17,"suggestions":"2509"},{"ruleId":"2238","severity":1,"message":"2510","line":234,"column":9,"nodeType":"2240","messageId":"2241","endLine":234,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2374","line":8,"column":10,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2375","line":8,"column":19,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2511","line":8,"column":28,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":34},{"ruleId":"2238","severity":1,"message":"2473","line":9,"column":10,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2338","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2273","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2361","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2499","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2340","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2500","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2329","line":120,"column":9,"nodeType":"2240","messageId":"2241","endLine":120,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2501","line":124,"column":10,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2502","line":124,"column":25,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2348","line":125,"column":10,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":125,"column":21,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":126,"column":10,"nodeType":"2240","messageId":"2241","endLine":126,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2503","line":126,"column":16,"nodeType":"2240","messageId":"2241","endLine":126,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2350","line":127,"column":10,"nodeType":"2240","messageId":"2241","endLine":127,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2504","line":127,"column":19,"nodeType":"2240","messageId":"2241","endLine":127,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2505","line":131,"column":24,"nodeType":"2240","messageId":"2241","endLine":131,"endColumn":39},{"ruleId":"2506","severity":1,"message":"2507","line":137,"column":9,"nodeType":"2240","messageId":"2508","endLine":137,"endColumn":10},{"ruleId":"2334","severity":1,"message":"2490","line":144,"column":6,"nodeType":"2336","endLine":144,"endColumn":17,"suggestions":"2512"},{"ruleId":"2238","severity":1,"message":"2510","line":225,"column":9,"nodeType":"2240","messageId":"2241","endLine":225,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2513","line":5,"column":10,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2361","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2514","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2256","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":81,"column":11,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2474","line":83,"column":23,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2482","line":84,"column":18,"nodeType":"2240","messageId":"2241","endLine":84,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2349","line":85,"column":12,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2350","line":86,"column":12,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2516","line":88,"column":12,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2517","line":88,"column":23,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2518","line":213,"column":11,"nodeType":"2240","messageId":"2241","endLine":213,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2355","line":233,"column":11,"nodeType":"2240","messageId":"2241","endLine":233,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2353","line":236,"column":11,"nodeType":"2240","messageId":"2241","endLine":236,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2519","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2513","line":6,"column":10,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2328","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":83,"column":11,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2474","line":84,"column":23,"nodeType":"2240","messageId":"2241","endLine":84,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2349","line":86,"column":12,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2350","line":87,"column":12,"nodeType":"2240","messageId":"2241","endLine":87,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2516","line":89,"column":12,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2517","line":89,"column":23,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2520","line":194,"column":13,"nodeType":"2240","messageId":"2241","endLine":194,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2521","line":205,"column":11,"nodeType":"2240","messageId":"2241","endLine":205,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2355","line":232,"column":11,"nodeType":"2240","messageId":"2241","endLine":232,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2353","line":235,"column":11,"nodeType":"2240","messageId":"2241","endLine":235,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2479","line":3,"column":35,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":40},{"ruleId":"2238","severity":1,"message":"2256","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2522","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":10,"column":13,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":10,"column":19,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":10,"column":26,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":12,"column":13,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":16},{"ruleId":"2266","severity":1,"message":"2525","line":116,"column":17,"nodeType":"2268","messageId":"2269","endLine":116,"endColumn":19},{"ruleId":"2266","severity":1,"message":"2525","line":116,"column":34,"nodeType":"2268","messageId":"2269","endLine":116,"endColumn":36},{"ruleId":"2526","severity":1,"message":"2527","line":117,"column":28,"nodeType":"2268","messageId":"2528","endLine":117,"endColumn":29},{"ruleId":"2266","severity":1,"message":"2525","line":120,"column":22,"nodeType":"2268","messageId":"2269","endLine":120,"endColumn":24},{"ruleId":"2266","severity":1,"message":"2525","line":120,"column":39,"nodeType":"2268","messageId":"2269","endLine":120,"endColumn":41},{"ruleId":"2526","severity":1,"message":"2527","line":121,"column":28,"nodeType":"2268","messageId":"2528","endLine":121,"endColumn":29},{"ruleId":"2234","replacedBy":"2529"},{"ruleId":"2236","replacedBy":"2530"},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2531","line":7,"column":3,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2278","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2359","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2395","line":10,"column":3,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2360","line":11,"column":3,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2396","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2479","line":14,"column":3,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2362","line":18,"column":3,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2363","line":19,"column":3,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2364","line":20,"column":3,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2365","line":22,"column":3,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2366","line":23,"column":3,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2367","line":24,"column":3,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2368","line":25,"column":3,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2369","line":26,"column":3,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2370","line":27,"column":3,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2371","line":28,"column":3,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2372","line":29,"column":3,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2389","line":34,"column":9,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2532","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2488","line":3,"column":20,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2256","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2533","line":22,"column":12,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2534","line":23,"column":12,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":23},{"ruleId":"2334","severity":1,"message":"2490","line":33,"column":8,"nodeType":"2336","endLine":33,"endColumn":14,"suggestions":"2535"},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2473","line":8,"column":10,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2338","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2273","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2499","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2340","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2500","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2329","line":119,"column":9,"nodeType":"2240","messageId":"2241","endLine":119,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2501","line":122,"column":10,"nodeType":"2240","messageId":"2241","endLine":122,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2502","line":122,"column":25,"nodeType":"2240","messageId":"2241","endLine":122,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2348","line":123,"column":10,"nodeType":"2240","messageId":"2241","endLine":123,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":123,"column":21,"nodeType":"2240","messageId":"2241","endLine":123,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":124,"column":10,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2503","line":124,"column":16,"nodeType":"2240","messageId":"2241","endLine":124,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2350","line":125,"column":10,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2504","line":125,"column":19,"nodeType":"2240","messageId":"2241","endLine":125,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2505","line":129,"column":24,"nodeType":"2240","messageId":"2241","endLine":129,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2390","line":131,"column":9,"nodeType":"2240","messageId":"2241","endLine":131,"endColumn":20},{"ruleId":"2506","severity":1,"message":"2507","line":139,"column":13,"nodeType":"2240","messageId":"2508","endLine":139,"endColumn":14},{"ruleId":"2334","severity":1,"message":"2490","line":151,"column":6,"nodeType":"2336","endLine":151,"endColumn":17,"suggestions":"2536"},{"ruleId":"2238","severity":1,"message":"2510","line":542,"column":9,"nodeType":"2240","messageId":"2241","endLine":542,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2256","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2405","line":9,"column":10,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2278","line":10,"column":28,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2406","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2407","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2327","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2340","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2341","line":30,"column":8,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2537","line":36,"column":8,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":49,"column":11,"nodeType":"2240","messageId":"2241","endLine":49,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":50,"column":11,"nodeType":"2240","messageId":"2241","endLine":50,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2350","line":55,"column":12,"nodeType":"2240","messageId":"2241","endLine":55,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2538","line":264,"column":11,"nodeType":"2240","messageId":"2241","endLine":264,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2355","line":420,"column":11,"nodeType":"2240","messageId":"2241","endLine":420,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2456","line":1,"column":8,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2457","line":2,"column":26,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":42},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2465","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2396","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":23,"column":10,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2329","line":61,"column":11,"nodeType":"2240","messageId":"2241","endLine":61,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2328","line":81,"column":9,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":82,"column":9,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2474","line":83,"column":21,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":85,"column":10,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":86,"column":10,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2355","line":186,"column":9,"nodeType":"2240","messageId":"2241","endLine":186,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":189,"column":9,"nodeType":"2240","messageId":"2241","endLine":189,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2531","line":6,"column":3,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2539","line":7,"column":3,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2291","line":8,"column":3,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2292","line":9,"column":3,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2359","line":12,"column":3,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2395","line":13,"column":3,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2360","line":14,"column":3,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2396","line":15,"column":3,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2361","line":16,"column":3,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":3,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2362","line":21,"column":3,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2363","line":22,"column":3,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2364","line":23,"column":3,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2365","line":25,"column":3,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2366","line":26,"column":3,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2367","line":27,"column":3,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2368","line":28,"column":3,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2369","line":29,"column":3,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":7},{"ruleId":"2238","severity":1,"message":"2370","line":30,"column":3,"nodeType":"2240","messageId":"2241","endLine":30,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2371","line":31,"column":3,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2372","line":32,"column":3,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2540","line":40,"column":8,"nodeType":"2240","messageId":"2241","endLine":40,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2541","line":42,"column":8,"nodeType":"2240","messageId":"2241","endLine":42,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2256","line":43,"column":8,"nodeType":"2240","messageId":"2241","endLine":43,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2389","line":47,"column":9,"nodeType":"2240","messageId":"2241","endLine":47,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2542","line":49,"column":10,"nodeType":"2240","messageId":"2241","endLine":49,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2543","line":53,"column":9,"nodeType":"2240","messageId":"2241","endLine":53,"endColumn":21},{"ruleId":"2334","severity":1,"message":"2544","line":58,"column":6,"nodeType":"2336","endLine":58,"endColumn":8,"suggestions":"2545"},{"ruleId":"2238","severity":1,"message":"2546","line":69,"column":12,"nodeType":"2240","messageId":"2241","endLine":69,"endColumn":20},{"ruleId":"2270","severity":1,"message":"2271","line":113,"column":19,"nodeType":"2272","endLine":113,"endColumn":38},{"ruleId":"2270","severity":1,"message":"2271","line":138,"column":19,"nodeType":"2272","endLine":138,"endColumn":38},{"ruleId":"2270","severity":1,"message":"2271","line":164,"column":19,"nodeType":"2272","endLine":164,"endColumn":39},{"ruleId":"2270","severity":1,"message":"2271","line":187,"column":19,"nodeType":"2272","endLine":187,"endColumn":39},{"ruleId":"2270","severity":1,"message":"2271","line":212,"column":19,"nodeType":"2272","endLine":212,"endColumn":37},{"ruleId":"2238","severity":1,"message":"2340","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2328","line":81,"column":9,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":82,"column":9,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2349","line":85,"column":10,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":86,"column":10,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2355","line":166,"column":9,"nodeType":"2240","messageId":"2241","endLine":166,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":169,"column":9,"nodeType":"2240","messageId":"2241","endLine":169,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2256","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2278","line":10,"column":28,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2405","line":13,"column":10,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2396","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2406","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2407","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2327","line":27,"column":8,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2537","line":39,"column":8,"nodeType":"2240","messageId":"2241","endLine":39,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":50,"column":9,"nodeType":"2240","messageId":"2241","endLine":50,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2350","line":58,"column":10,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2547","line":59,"column":16,"nodeType":"2240","messageId":"2241","endLine":59,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2548","line":60,"column":10,"nodeType":"2240","messageId":"2241","endLine":60,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2549","line":60,"column":18,"nodeType":"2240","messageId":"2241","endLine":60,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2550","line":64,"column":10,"nodeType":"2240","messageId":"2241","endLine":64,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2263","line":69,"column":9,"nodeType":"2240","messageId":"2241","endLine":69,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2551","line":70,"column":9,"nodeType":"2240","messageId":"2241","endLine":70,"endColumn":17},{"ruleId":"2334","severity":1,"message":"2335","line":77,"column":6,"nodeType":"2336","endLine":77,"endColumn":8,"suggestions":"2552"},{"ruleId":"2238","severity":1,"message":"2538","line":327,"column":9,"nodeType":"2240","messageId":"2241","endLine":327,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2520","line":329,"column":11,"nodeType":"2240","messageId":"2241","endLine":329,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2355","line":506,"column":9,"nodeType":"2240","messageId":"2241","endLine":506,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2553","line":510,"column":9,"nodeType":"2240","messageId":"2241","endLine":510,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2554","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2278","line":22,"column":28,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2540","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2537","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":141,"column":9,"nodeType":"2240","messageId":"2241","endLine":141,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":142,"column":9,"nodeType":"2240","messageId":"2241","endLine":142,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2348","line":144,"column":10,"nodeType":"2240","messageId":"2241","endLine":144,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":144,"column":21,"nodeType":"2240","messageId":"2241","endLine":144,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2350","line":147,"column":10,"nodeType":"2240","messageId":"2241","endLine":147,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2555","line":148,"column":10,"nodeType":"2240","messageId":"2241","endLine":148,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2247","line":151,"column":10,"nodeType":"2240","messageId":"2241","endLine":151,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2547","line":151,"column":16,"nodeType":"2240","messageId":"2241","endLine":151,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2556","line":157,"column":10,"nodeType":"2240","messageId":"2241","endLine":157,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2557","line":157,"column":22,"nodeType":"2240","messageId":"2241","endLine":157,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2538","line":295,"column":9,"nodeType":"2240","messageId":"2241","endLine":295,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2520","line":297,"column":11,"nodeType":"2240","messageId":"2241","endLine":297,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2558","line":454,"column":9,"nodeType":"2240","messageId":"2241","endLine":454,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2355","line":458,"column":9,"nodeType":"2240","messageId":"2241","endLine":458,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2553","line":462,"column":9,"nodeType":"2240","messageId":"2241","endLine":462,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2559","line":465,"column":9,"nodeType":"2240","messageId":"2241","endLine":465,"endColumn":25},{"ruleId":"2322","severity":1,"message":"2560","line":28,"column":5,"nodeType":"2324","messageId":"2269","endLine":28,"endColumn":20},{"ruleId":"2234","replacedBy":"2561"},{"ruleId":"2236","replacedBy":"2562"},{"ruleId":"2238","severity":1,"message":"2406","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2407","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2327","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2278","line":24,"column":28,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2256","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":103,"column":9,"nodeType":"2240","messageId":"2241","endLine":103,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":104,"column":9,"nodeType":"2240","messageId":"2241","endLine":104,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2348","line":106,"column":10,"nodeType":"2240","messageId":"2241","endLine":106,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":106,"column":21,"nodeType":"2240","messageId":"2241","endLine":106,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2350","line":111,"column":10,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2487","line":120,"column":9,"nodeType":"2240","messageId":"2241","endLine":120,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2263","line":121,"column":9,"nodeType":"2240","messageId":"2241","endLine":121,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2538","line":394,"column":9,"nodeType":"2240","messageId":"2241","endLine":394,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2520","line":396,"column":11,"nodeType":"2240","messageId":"2241","endLine":396,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2563","line":455,"column":9,"nodeType":"2240","messageId":"2241","endLine":455,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2355","line":606,"column":9,"nodeType":"2240","messageId":"2241","endLine":606,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2553","line":612,"column":9,"nodeType":"2240","messageId":"2241","endLine":612,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2456","line":1,"column":8,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2457","line":2,"column":26,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":42},{"ruleId":"2238","severity":1,"message":"2256","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2278","line":8,"column":28,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2405","line":11,"column":10,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2396","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2406","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2327","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2537","line":36,"column":8,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2564","line":38,"column":10,"nodeType":"2240","messageId":"2241","endLine":38,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2565","line":39,"column":10,"nodeType":"2240","messageId":"2241","endLine":39,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2442","line":42,"column":10,"nodeType":"2240","messageId":"2241","endLine":42,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2566","line":44,"column":8,"nodeType":"2240","messageId":"2241","endLine":44,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2328","line":58,"column":9,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2350","line":66,"column":10,"nodeType":"2240","messageId":"2241","endLine":66,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2547","line":67,"column":16,"nodeType":"2240","messageId":"2241","endLine":67,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2567","line":72,"column":20,"nodeType":"2240","messageId":"2241","endLine":72,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2472","line":74,"column":10,"nodeType":"2240","messageId":"2241","endLine":74,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2568","line":75,"column":10,"nodeType":"2240","messageId":"2241","endLine":75,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2263","line":80,"column":9,"nodeType":"2240","messageId":"2241","endLine":80,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2551","line":81,"column":9,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2538","line":365,"column":9,"nodeType":"2240","messageId":"2241","endLine":365,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2520","line":367,"column":11,"nodeType":"2240","messageId":"2241","endLine":367,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2355","line":561,"column":9,"nodeType":"2240","messageId":"2241","endLine":561,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2569","line":579,"column":9,"nodeType":"2240","messageId":"2241","endLine":579,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2570","line":583,"column":9,"nodeType":"2240","messageId":"2241","endLine":583,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2465","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2396","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":24,"column":10,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2256","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2329","line":70,"column":11,"nodeType":"2240","messageId":"2241","endLine":70,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2468","line":71,"column":12,"nodeType":"2240","messageId":"2241","endLine":71,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2469","line":71,"column":25,"nodeType":"2240","messageId":"2241","endLine":71,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2328","line":90,"column":9,"nodeType":"2240","messageId":"2241","endLine":90,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":91,"column":9,"nodeType":"2240","messageId":"2241","endLine":91,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2474","line":92,"column":21,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":94,"column":10,"nodeType":"2240","messageId":"2241","endLine":94,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":95,"column":10,"nodeType":"2240","messageId":"2241","endLine":95,"endColumn":17},{"ruleId":"2447","severity":1,"message":"2448","line":181,"column":54,"nodeType":"2449","endLine":181,"endColumn":66},{"ruleId":"2238","severity":1,"message":"2571","line":189,"column":9,"nodeType":"2240","messageId":"2241","endLine":189,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2355","line":233,"column":9,"nodeType":"2240","messageId":"2241","endLine":233,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":236,"column":9,"nodeType":"2240","messageId":"2241","endLine":236,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2532","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2396","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2439","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":26,"column":19,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":26,"column":26,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2443","line":80,"column":12,"nodeType":"2240","messageId":"2241","endLine":80,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2444","line":80,"column":20,"nodeType":"2240","messageId":"2241","endLine":80,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2445","line":81,"column":12,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2446","line":81,"column":20,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2329","line":83,"column":11,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":243,"column":41,"nodeType":"2449","endLine":243,"endColumn":67},{"ruleId":"2238","severity":1,"message":"2437","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2478","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2466","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2453","line":25,"column":10,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2519","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2463","line":33,"column":8,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2468","line":71,"column":12,"nodeType":"2240","messageId":"2241","endLine":71,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2469","line":71,"column":25,"nodeType":"2240","messageId":"2241","endLine":71,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2330","line":73,"column":11,"nodeType":"2240","messageId":"2241","endLine":73,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2329","line":74,"column":11,"nodeType":"2240","messageId":"2241","endLine":74,"endColumn":18},{"ruleId":"2334","severity":1,"message":"2335","line":82,"column":8,"nodeType":"2336","endLine":82,"endColumn":22,"suggestions":"2572"},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2513","line":5,"column":10,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2361","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2514","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2256","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":81,"column":11,"nodeType":"2240","messageId":"2241","endLine":81,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2474","line":83,"column":23,"nodeType":"2240","messageId":"2241","endLine":83,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2388","line":84,"column":12,"nodeType":"2240","messageId":"2241","endLine":84,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2482","line":84,"column":18,"nodeType":"2240","messageId":"2241","endLine":84,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2349","line":85,"column":12,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2503","line":85,"column":18,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2350","line":86,"column":12,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2504","line":86,"column":21,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2573","line":87,"column":22,"nodeType":"2240","messageId":"2241","endLine":87,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2516","line":88,"column":12,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2517","line":88,"column":23,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2465","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":25,"column":10,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":25,"column":23,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2441","line":31,"column":19,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":31,"column":26,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":113,"column":18,"nodeType":"2240","messageId":"2241","endLine":113,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":132,"column":11,"nodeType":"2240","messageId":"2241","endLine":132,"endColumn":18},{"ruleId":"2334","severity":1,"message":"2335","line":139,"column":8,"nodeType":"2336","endLine":139,"endColumn":22,"suggestions":"2574"},{"ruleId":"2447","severity":1,"message":"2448","line":387,"column":65,"nodeType":"2449","endLine":387,"endColumn":91},{"ruleId":"2238","severity":1,"message":"2479","line":3,"column":35,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":40},{"ruleId":"2238","severity":1,"message":"2256","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2522","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":9,"column":13,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":9,"column":19,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":9,"column":26,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":11,"column":13,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2454","line":69,"column":27,"nodeType":"2240","messageId":"2241","endLine":69,"endColumn":39},{"ruleId":"2334","severity":1,"message":"2575","line":77,"column":8,"nodeType":"2336","endLine":77,"endColumn":24,"suggestions":"2576"},{"ruleId":"2266","severity":1,"message":"2525","line":116,"column":17,"nodeType":"2268","messageId":"2269","endLine":116,"endColumn":19},{"ruleId":"2266","severity":1,"message":"2525","line":116,"column":34,"nodeType":"2268","messageId":"2269","endLine":116,"endColumn":36},{"ruleId":"2526","severity":1,"message":"2527","line":117,"column":28,"nodeType":"2268","messageId":"2528","endLine":117,"endColumn":29},{"ruleId":"2266","severity":1,"message":"2525","line":120,"column":22,"nodeType":"2268","messageId":"2269","endLine":120,"endColumn":24},{"ruleId":"2266","severity":1,"message":"2525","line":120,"column":39,"nodeType":"2268","messageId":"2269","endLine":120,"endColumn":41},{"ruleId":"2526","severity":1,"message":"2527","line":121,"column":28,"nodeType":"2268","messageId":"2528","endLine":121,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2479","line":3,"column":35,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":40},{"ruleId":"2238","severity":1,"message":"2256","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2522","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":9,"column":13,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":9,"column":19,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":9,"column":26,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":11,"column":13,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2454","line":69,"column":27,"nodeType":"2240","messageId":"2241","endLine":69,"endColumn":39},{"ruleId":"2334","severity":1,"message":"2575","line":77,"column":8,"nodeType":"2336","endLine":77,"endColumn":24,"suggestions":"2577"},{"ruleId":"2266","severity":1,"message":"2525","line":119,"column":17,"nodeType":"2268","messageId":"2269","endLine":119,"endColumn":19},{"ruleId":"2266","severity":1,"message":"2525","line":119,"column":34,"nodeType":"2268","messageId":"2269","endLine":119,"endColumn":36},{"ruleId":"2526","severity":1,"message":"2527","line":120,"column":28,"nodeType":"2268","messageId":"2528","endLine":120,"endColumn":29},{"ruleId":"2266","severity":1,"message":"2525","line":123,"column":22,"nodeType":"2268","messageId":"2269","endLine":123,"endColumn":24},{"ruleId":"2266","severity":1,"message":"2525","line":123,"column":39,"nodeType":"2268","messageId":"2269","endLine":123,"endColumn":41},{"ruleId":"2526","severity":1,"message":"2527","line":124,"column":28,"nodeType":"2268","messageId":"2528","endLine":124,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2531","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2539","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2291","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2578","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2278","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2359","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2360","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2396","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2479","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2579","line":24,"column":10,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2265","line":49,"column":11,"nodeType":"2240","messageId":"2241","endLine":49,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2513","line":5,"column":10,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2338","line":8,"column":8,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2361","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2581","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2514","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2339","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2359","line":5,"column":5,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":6,"column":5,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2360","line":7,"column":5,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2396","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2361","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2582","line":33,"column":12,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2583","line":33,"column":25,"nodeType":"2240","messageId":"2241","endLine":33,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2513","line":7,"column":10,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2338","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2584","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2585","line":120,"column":12,"nodeType":"2240","messageId":"2241","endLine":120,"endColumn":20},{"ruleId":"2334","severity":1,"message":"2586","line":128,"column":8,"nodeType":"2336","endLine":128,"endColumn":18,"suggestions":"2587"},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":4,"column":5,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":5,"column":5,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":7,"column":5,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2439","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2480","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2588","line":19,"column":10,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2441","line":21,"column":19,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":21,"column":26,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2487","line":78,"column":11,"nodeType":"2240","messageId":"2241","endLine":78,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2513","line":5,"column":10,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2338","line":8,"column":8,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2361","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2581","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2514","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2339","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2463","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2452","line":4,"column":5,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":5,"column":5,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":7,"column":5,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2439","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2480","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2588","line":19,"column":10,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2441","line":21,"column":19,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":21,"column":26,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2463","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2256","line":1,"column":8,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2361","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2581","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2589","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2590","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":20,"column":5,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2396","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":28,"column":10,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":28,"column":23,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2522","line":34,"column":5,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":34,"column":13,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":34,"column":19,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":34,"column":26,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":36,"column":13,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2388","line":118,"column":12,"nodeType":"2240","messageId":"2241","endLine":118,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2482","line":118,"column":18,"nodeType":"2240","messageId":"2241","endLine":118,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2501","line":128,"column":12,"nodeType":"2240","messageId":"2241","endLine":128,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2502","line":128,"column":27,"nodeType":"2240","messageId":"2241","endLine":128,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2329","line":130,"column":11,"nodeType":"2240","messageId":"2241","endLine":130,"endColumn":18},{"ruleId":"2234","replacedBy":"2591"},{"ruleId":"2236","replacedBy":"2592"},{"ruleId":"2238","severity":1,"message":"2590","line":8,"column":8,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2513","line":5,"column":10,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2361","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2514","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2256","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":86,"column":11,"nodeType":"2240","messageId":"2241","endLine":86,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2329","line":87,"column":11,"nodeType":"2240","messageId":"2241","endLine":87,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2474","line":88,"column":23,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2388","line":89,"column":12,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2482","line":89,"column":18,"nodeType":"2240","messageId":"2241","endLine":89,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2349","line":90,"column":12,"nodeType":"2240","messageId":"2241","endLine":90,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2503","line":90,"column":18,"nodeType":"2240","messageId":"2241","endLine":90,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2350","line":91,"column":12,"nodeType":"2240","messageId":"2241","endLine":91,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2504","line":91,"column":21,"nodeType":"2240","messageId":"2241","endLine":91,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2573","line":92,"column":22,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2516","line":93,"column":12,"nodeType":"2240","messageId":"2241","endLine":93,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2517","line":93,"column":23,"nodeType":"2240","messageId":"2241","endLine":93,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2589","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2590","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":20,"column":5,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":28,"column":10,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":28,"column":23,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2441","line":34,"column":19,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":34,"column":26,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":85,"column":18,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":92,"column":11,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":283,"column":33,"nodeType":"2449","endLine":283,"endColumn":59},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2589","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2590","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":20,"column":5,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":28,"column":10,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":28,"column":23,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2441","line":34,"column":19,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":34,"column":26,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":115,"column":18,"nodeType":"2240","messageId":"2241","endLine":115,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":122,"column":11,"nodeType":"2240","messageId":"2241","endLine":122,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":313,"column":33,"nodeType":"2449","endLine":313,"endColumn":59},{"ruleId":"2238","severity":1,"message":"2476","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2477","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2278","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2479","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2589","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2590","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":20,"column":5,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2467","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":28,"column":10,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":28,"column":23,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2480","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2481","line":32,"column":8,"nodeType":"2240","messageId":"2241","endLine":32,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2441","line":34,"column":19,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":34,"column":26,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2482","line":85,"column":18,"nodeType":"2240","messageId":"2241","endLine":85,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":92,"column":11,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":18},{"ruleId":"2447","severity":1,"message":"2448","line":280,"column":33,"nodeType":"2449","endLine":280,"endColumn":59},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2361","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2584","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2328","line":90,"column":9,"nodeType":"2240","messageId":"2241","endLine":90,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":91,"column":9,"nodeType":"2240","messageId":"2241","endLine":91,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2474","line":92,"column":21,"nodeType":"2240","messageId":"2241","endLine":92,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2349","line":93,"column":10,"nodeType":"2240","messageId":"2241","endLine":93,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2350","line":94,"column":10,"nodeType":"2240","messageId":"2241","endLine":94,"endColumn":17},{"ruleId":"2447","severity":1,"message":"2448","line":147,"column":54,"nodeType":"2449","endLine":147,"endColumn":66},{"ruleId":"2238","severity":1,"message":"2571","line":155,"column":9,"nodeType":"2240","messageId":"2241","endLine":155,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2355","line":198,"column":9,"nodeType":"2240","messageId":"2241","endLine":198,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2353","line":201,"column":9,"nodeType":"2240","messageId":"2241","endLine":201,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2406","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2407","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2327","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2278","line":24,"column":28,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2256","line":31,"column":8,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2328","line":108,"column":9,"nodeType":"2240","messageId":"2241","endLine":108,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2329","line":109,"column":9,"nodeType":"2240","messageId":"2241","endLine":109,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2348","line":111,"column":10,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2474","line":111,"column":21,"nodeType":"2240","messageId":"2241","endLine":111,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2350","line":116,"column":10,"nodeType":"2240","messageId":"2241","endLine":116,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2593","line":123,"column":10,"nodeType":"2240","messageId":"2241","endLine":123,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2594","line":123,"column":24,"nodeType":"2240","messageId":"2241","endLine":123,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2487","line":126,"column":9,"nodeType":"2240","messageId":"2241","endLine":126,"endColumn":20},{"ruleId":"2238","severity":1,"message":"2263","line":127,"column":9,"nodeType":"2240","messageId":"2241","endLine":127,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2538","line":449,"column":9,"nodeType":"2240","messageId":"2241","endLine":449,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2520","line":451,"column":11,"nodeType":"2240","messageId":"2241","endLine":451,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2563","line":510,"column":9,"nodeType":"2240","messageId":"2241","endLine":510,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2355","line":661,"column":9,"nodeType":"2240","messageId":"2241","endLine":661,"endColumn":29},{"ruleId":"2238","severity":1,"message":"2553","line":667,"column":9,"nodeType":"2240","messageId":"2241","endLine":667,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2361","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2291","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2581","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2293","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2478","line":16,"column":5,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2589","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2590","line":19,"column":5,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":20,"column":5,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":22,"column":8,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2466","line":23,"column":8,"nodeType":"2240","messageId":"2241","endLine":23,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2396","line":24,"column":8,"nodeType":"2240","messageId":"2241","endLine":24,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2467","line":25,"column":8,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":26,"column":8,"nodeType":"2240","messageId":"2241","endLine":26,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2453","line":28,"column":10,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2475","line":28,"column":23,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2256","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2522","line":34,"column":5,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":34,"column":13,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":34,"column":19,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":34,"column":26,"nodeType":"2240","messageId":"2241","endLine":34,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":36,"column":13,"nodeType":"2240","messageId":"2241","endLine":36,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2388","line":88,"column":12,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2482","line":88,"column":18,"nodeType":"2240","messageId":"2241","endLine":88,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2329","line":100,"column":11,"nodeType":"2240","messageId":"2241","endLine":100,"endColumn":18},{"ruleId":"2334","severity":1,"message":"2335","line":106,"column":7,"nodeType":"2336","endLine":106,"endColumn":9,"suggestions":"2595"},{"ruleId":"2238","severity":1,"message":"2554","line":2,"column":8,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2596","line":6,"column":5,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2539","line":8,"column":5,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2291","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":10,"column":5,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2578","line":11,"column":5,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2359","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2395","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2361","line":17,"column":5,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2479","line":18,"column":5,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":10},{"ruleId":"2238","severity":1,"message":"2580","line":22,"column":5,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2465","line":25,"column":5,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2597","line":28,"column":8,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2598","line":29,"column":8,"nodeType":"2240","messageId":"2241","endLine":29,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2599","line":35,"column":10,"nodeType":"2240","messageId":"2241","endLine":35,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2600","line":82,"column":11,"nodeType":"2240","messageId":"2241","endLine":82,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2601","line":90,"column":15,"nodeType":"2240","messageId":"2241","endLine":90,"endColumn":22},{"ruleId":"2602","severity":1,"message":"2603","line":90,"column":39,"nodeType":"2604","messageId":"2605","endLine":90,"endColumn":41},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2256","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":13},{"ruleId":"2238","severity":1,"message":"2554","line":4,"column":8,"nodeType":"2240","messageId":"2241","endLine":4,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2606","line":5,"column":13,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2513","line":9,"column":10,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2338","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2273","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2361","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2580","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2581","line":17,"column":8,"nodeType":"2240","messageId":"2241","endLine":17,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2514","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2515","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2339","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2584","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2452","line":22,"column":10,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2278","line":22,"column":28,"nodeType":"2240","messageId":"2241","endLine":22,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2329","line":148,"column":9,"nodeType":"2240","messageId":"2241","endLine":148,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2607","line":150,"column":21,"nodeType":"2240","messageId":"2241","endLine":150,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2468","line":151,"column":10,"nodeType":"2240","messageId":"2241","endLine":151,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2469","line":151,"column":23,"nodeType":"2240","messageId":"2241","endLine":151,"endColumn":37},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2462","line":1,"column":28,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2532","line":3,"column":8,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2437","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2438","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2452","line":9,"column":5,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2291","line":12,"column":5,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2292","line":13,"column":5,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":8},{"ruleId":"2238","severity":1,"message":"2581","line":14,"column":5,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2293","line":15,"column":5,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2439","line":19,"column":8,"nodeType":"2240","messageId":"2241","endLine":19,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2440","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2522","line":25,"column":5,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":11},{"ruleId":"2238","severity":1,"message":"2523","line":25,"column":13,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":17},{"ruleId":"2238","severity":1,"message":"2441","line":25,"column":19,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2442","line":25,"column":26,"nodeType":"2240","messageId":"2241","endLine":25,"endColumn":38},{"ruleId":"2238","severity":1,"message":"2524","line":27,"column":13,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2487","line":97,"column":11,"nodeType":"2240","messageId":"2241","endLine":97,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2329","line":98,"column":11,"nodeType":"2240","messageId":"2241","endLine":98,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2608","line":8,"column":18,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2531","line":8,"column":24,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":35},{"ruleId":"2238","severity":1,"message":"2596","line":8,"column":37,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":48},{"ruleId":"2238","severity":1,"message":"2479","line":8,"column":56,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":61},{"ruleId":"2458","severity":1,"message":"2459","line":19,"column":5,"nodeType":"2460","messageId":"2461","endLine":21,"endColumn":6},{"ruleId":"2238","severity":1,"message":"2419","line":2,"column":10,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2609","line":2,"column":16,"nodeType":"2240","messageId":"2241","endLine":2,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2608","line":5,"column":8,"nodeType":"2240","messageId":"2241","endLine":5,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2531","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2596","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2610","line":8,"column":8,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2439","line":9,"column":8,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2513","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2611","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2612","line":14,"column":18,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":30},{"ruleId":"2238","severity":1,"message":"2440","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":17},{"ruleId":"2322","severity":1,"message":"2613","line":59,"column":5,"nodeType":"2324","messageId":"2269","endLine":59,"endColumn":9},{"ruleId":"2238","severity":1,"message":"2273","line":6,"column":8,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2614","line":7,"column":8,"nodeType":"2240","messageId":"2241","endLine":7,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2421","line":8,"column":8,"nodeType":"2240","messageId":"2241","endLine":8,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2615","line":9,"column":8,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2616","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2440","line":12,"column":10,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2513","line":12,"column":21,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2278","line":12,"column":27,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":37},{"ruleId":"2238","severity":1,"message":"2617","line":18,"column":8,"nodeType":"2240","messageId":"2241","endLine":18,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2618","line":27,"column":11,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":28},{"ruleId":"2238","severity":1,"message":"2290","line":1,"column":27,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":36},{"ruleId":"2238","severity":1,"message":"2338","line":9,"column":8,"nodeType":"2240","messageId":"2241","endLine":9,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2273","line":10,"column":8,"nodeType":"2240","messageId":"2241","endLine":10,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2361","line":11,"column":8,"nodeType":"2240","messageId":"2241","endLine":11,"endColumn":14},{"ruleId":"2238","severity":1,"message":"2339","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":21},{"ruleId":"2238","severity":1,"message":"2584","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2407","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2329","line":159,"column":11,"nodeType":"2240","messageId":"2241","endLine":159,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2501","line":160,"column":12,"nodeType":"2240","messageId":"2241","endLine":160,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2502","line":160,"column":27,"nodeType":"2240","messageId":"2241","endLine":160,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2619","line":162,"column":12,"nodeType":"2240","messageId":"2241","endLine":162,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2468","line":165,"column":12,"nodeType":"2240","messageId":"2241","endLine":165,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2469","line":165,"column":25,"nodeType":"2240","messageId":"2241","endLine":165,"endColumn":39},{"ruleId":"2238","severity":1,"message":"2620","line":166,"column":12,"nodeType":"2240","messageId":"2241","endLine":166,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2621","line":166,"column":24,"nodeType":"2240","messageId":"2241","endLine":166,"endColumn":37},{"ruleId":"2238","severity":1,"message":"2355","line":230,"column":11,"nodeType":"2240","messageId":"2241","endLine":230,"endColumn":31},{"ruleId":"2238","severity":1,"message":"2357","line":232,"column":11,"nodeType":"2240","messageId":"2241","endLine":232,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2569","line":235,"column":11,"nodeType":"2240","messageId":"2241","endLine":235,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2570","line":238,"column":11,"nodeType":"2240","messageId":"2241","endLine":238,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2622","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2623","line":1,"column":38,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":44},{"ruleId":"2238","severity":1,"message":"2624","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2625","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2396","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2626","line":27,"column":8,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2627","line":27,"column":22,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2628","line":27,"column":35,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2328","line":52,"column":9,"nodeType":"2240","messageId":"2241","endLine":52,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2629","line":54,"column":18,"nodeType":"2240","messageId":"2241","endLine":54,"endColumn":27},{"ruleId":"2238","severity":1,"message":"2630","line":58,"column":10,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2631","line":58,"column":21,"nodeType":"2240","messageId":"2241","endLine":58,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2632","line":63,"column":10,"nodeType":"2240","messageId":"2241","endLine":63,"endColumn":24},{"ruleId":"2602","severity":1,"message":"2633","line":150,"column":26,"nodeType":"2604","messageId":"2605","endLine":150,"endColumn":28},{"ruleId":"2602","severity":1,"message":"2633","line":164,"column":26,"nodeType":"2604","messageId":"2605","endLine":164,"endColumn":28},{"ruleId":"2238","severity":1,"message":"2622","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2634","line":3,"column":10,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2625","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2635","line":20,"column":10,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2636","line":20,"column":17,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":23},{"ruleId":"2238","severity":1,"message":"2637","line":20,"column":25,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":28},{"ruleId":"2238","severity":1,"message":"2622","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2623","line":1,"column":38,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":44},{"ruleId":"2238","severity":1,"message":"2638","line":6,"column":16,"nodeType":"2240","messageId":"2241","endLine":6,"endColumn":22},{"ruleId":"2238","severity":1,"message":"2624","line":14,"column":8,"nodeType":"2240","messageId":"2241","endLine":14,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2240","messageId":"2241","endLine":15,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2406","line":16,"column":8,"nodeType":"2240","messageId":"2241","endLine":16,"endColumn":15},{"ruleId":"2238","severity":1,"message":"2625","line":20,"column":8,"nodeType":"2240","messageId":"2241","endLine":20,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2396","line":21,"column":8,"nodeType":"2240","messageId":"2241","endLine":21,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2626","line":27,"column":8,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":18},{"ruleId":"2238","severity":1,"message":"2627","line":27,"column":22,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":33},{"ruleId":"2238","severity":1,"message":"2628","line":27,"column":35,"nodeType":"2240","messageId":"2241","endLine":27,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2639","line":28,"column":8,"nodeType":"2240","messageId":"2241","endLine":28,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2328","line":40,"column":9,"nodeType":"2240","messageId":"2241","endLine":40,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2640","line":45,"column":10,"nodeType":"2240","messageId":"2241","endLine":45,"endColumn":19},{"ruleId":"2238","severity":1,"message":"2632","line":47,"column":10,"nodeType":"2240","messageId":"2241","endLine":47,"endColumn":24},{"ruleId":"2238","severity":1,"message":"2641","line":47,"column":26,"nodeType":"2240","messageId":"2241","endLine":47,"endColumn":43},{"ruleId":"2238","severity":1,"message":"2642","line":98,"column":9,"nodeType":"2240","messageId":"2241","endLine":98,"endColumn":28},{"ruleId":"2602","severity":1,"message":"2633","line":117,"column":26,"nodeType":"2604","messageId":"2605","endLine":117,"endColumn":28},{"ruleId":"2238","severity":1,"message":"2622","line":1,"column":17,"nodeType":"2240","messageId":"2241","endLine":1,"endColumn":26},{"ruleId":"2238","severity":1,"message":"2634","line":3,"column":10,"nodeType":"2240","messageId":"2241","endLine":3,"endColumn":25},{"ruleId":"2238","severity":1,"message":"2625","line":12,"column":8,"nodeType":"2240","messageId":"2241","endLine":12,"endColumn":12},{"ruleId":"2238","severity":1,"message":"2396","line":13,"column":8,"nodeType":"2240","messageId":"2241","endLine":13,"endColumn":16},{"ruleId":"2238","severity":1,"message":"2328","line":31,"column":9,"nodeType":"2240","messageId":"2241","endLine":31,"endColumn":16},"no-native-reassign",["2643"],"no-negated-in-lhs",["2644"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","'Pricing' is defined but never used.","'OnboardDashboard' is defined but never used.","'SiteDashboard' is defined but never used.","'ChangePassword' is defined but never used.","'role' is assigned a value but never used.","'NotificationManager' is defined but never used.","'NotifyAlert' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'urlApp' is assigned a value but never used.","'urlDemo' is assigned a value but never used.","'OtpInput' is defined but never used.","'axios' is defined but never used.","'notifyAlert' is defined but never used.","'faHome' is defined but never used.","'error' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'passwordErr' is assigned a value but never used.","'setDisableReset' is assigned a value but never used.","'emailRegex' is assigned a value but never used.","'checkValidity' is assigned a value but never used.","'yupOptions' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'IconButton' is defined but never used.","'Icon' is defined but never used.","'FacebookIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'GithubIcon' is defined but never used.","'Typography' is defined but never used.","'Notifications' is defined but never used.","'Maps' is defined but never used.","'Tables' is defined but never used.","'Icons' is defined but never used.","'Charts' is defined but never used.","'BusinessList' is defined but never used.","'CheckList' is defined but never used.","'DHLDashboard' is defined but never used.","'NewTable' is defined but never used.","'SiteTable' is defined but never used.","'RotateLeft' is defined but never used.","'useEffect' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Fade' is defined but never used.","'classnames' is defined but never used.","'logo' is defined but never used.","'google' is defined but never used.","'bgImgSide' is defined but never used.","'activeTabId' is assigned a value but never used.","'setActiveTabId' is assigned a value but never used.","'nameValue' is assigned a value but never used.","'setNameValue' is assigned a value but never used.","'setFieldError' is assigned a value but never used.","'isError' is assigned a value but never used.","'setIsError' is assigned a value but never used.","'createNotification' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'StarBorderIcon' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'ListItemText' is defined but never used.","'Avatar' is defined but never used.","'dataObj' is defined but never used.","'Redirect' is defined but never used.","'cont' is assigned a value but never used.","'bgImg' is defined but never used.","no-dupe-keys","Duplicate key 'innerCard'.","ObjectExpression","Duplicate key 'boxShadow'.","Duplicate key 'display'.","'DeleteRoundedIcon' is defined but never used.","'classes' is assigned a value but never used.","'history' is assigned a value but never used.","'masterID' is assigned a value but never used.","'setMasterID' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["2645"],"'EditRoundedIcon' is defined but never used.","'AddCircleIcon' is defined but never used.","'PageTitle' is defined but never used.","'Widget' is defined but never used.","'Table' is defined but never used.","'mock' is defined but never used.","'EditSite' is defined but never used.","'EditSiteNew' is defined but never used.","'AddBusiness' is defined but never used.","'AddSite' is defined but never used.","'indexData' is assigned a value but never used.","'open' is assigned a value but never used.","'openAdd' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'businessID'. Either include it or remove the dependency array.",["2646"],"'handleClose' is assigned a value but never used.","'handleAddNewSite' is assigned a value but never used.","'handleCloseAddButton' is assigned a value but never used.","'handleUserManager' is assigned a value but never used.","'handleReload' is assigned a value but never used.",["2647"],"'LinearProgress' is defined but never used.","'OutlinedInput' is defined but never used.","'Button' is defined but never used.","'ResponsiveContainer' is defined but never used.","'ComposedChart' is defined but never used.","'AreaChart' is defined but never used.","'Line' is defined but never used.","'Area' is defined but never used.","'PieChart' is defined but never used.","'Pie' is defined but never used.","'Cell' is defined but never used.","'YAxis' is defined but never used.","'XAxis' is defined but never used.","'Label' is defined but never used.","'moment' is defined but never used.","'subDays' is defined but never used.","'addDays' is defined but never used.","'Dot' is defined but never used.","'ReactDOM' is defined but never used.","'TrendChart' is defined but never used.","'ApexChartsR' is defined but never used.","'ReactApexChartR' is defined but never used.","'ReactApexChart1' is defined but never used.","'Barline' is defined but never used.","'Shiftdata' is defined but never used.","'ApexChartsL' is defined but never used.","'ApexChartsp' is defined but never used.","'BarChartComp' is defined but never used.","'xLabelsVisibility' is assigned a value but never used.","'data' is assigned a value but never used.","'theme' is assigned a value but never used.","'isCancelled' is assigned a value but never used.","'newDataa' is assigned a value but never used.","'newData1' is assigned a value but never used.","'newData2' is assigned a value but never used.","'ExampleCustomInput' is assigned a value but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'LineChart' is defined but never used.","'barChartData' is assigned a value but never used.","'mainChartState' is assigned a value but never used.","'setMainChartState' is assigned a value but never used.","'qcDetailData' is assigned a value but never used.","'setQCDetailData' is assigned a value but never used.","'handleTicketData' is assigned a value but never used.","'CustomLabel' is defined but never used.","'createMuiTheme' is defined but never used.","'AddIcon' is defined but never used.","'Tooltip' is defined but never used.","'EditCheckList' is defined but never used.","React Hook useEffect has a missing dependency: 'checkListID'. Either include it or remove the dependency array.",["2648"],"'NotificationsIcon' is defined but never used.","'TypographyIcon' is defined but never used.","'UIElementsIcon' is defined but never used.","'SupportIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'FAQIcon' is defined but never used.","'InputBase' is defined but never used.","'Fab' is defined but never used.","'Link' is defined but never used.","'MailIcon' is defined but never used.","'SearchIcon' is defined but never used.","'SendIcon' is defined but never used.","'Badge' is defined but never used.","'UserAvatar' is defined but never used.","'messages' is assigned a value but never used.","'mailMenu' is assigned a value but never used.","'setMailMenu' is assigned a value but never used.","'isMailsUnread' is assigned a value but never used.","'setIsMailsUnread' is assigned a value but never used.","'isNotificationsUnread' is assigned a value but never used.","'setIsNotificationsUnread' is assigned a value but never used.","'isSearchOpen' is assigned a value but never used.","'setSearchOpen' is assigned a value but never used.","'BigStat' is defined but never used.","'mainChartData' is assigned a value but never used.","'PieChartData' is assigned a value but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'CssBaseline' is defined but never used.","'Container' is defined but never used.","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'qcUser' is assigned a value but never used.","'setQCUser' is assigned a value but never used.","'siteID' is assigned a value but never used.","'setSiteID' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'openTable' is assigned a value but never used.","'setOpenTable' is assigned a value but never used.","'CircularProgress' is defined but never used.","'PhotoCamera' is defined but never used.","'checkListArr' is assigned a value but never used.","'setCheckListArr' is assigned a value but never used.","'React' is defined but never used.","'MuiThemeProvider' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useState' is defined but never used.","'axiosInstance' is defined but never used.","'handleSave' is assigned a value but never used.","'InputLabel' is defined but never used.","'Input' is defined but never used.","'FormControl' is defined but never used.","'checkListID' is assigned a value but never used.","'setCheckListID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'masterID'. Either include it or remove the dependency array.",["2649"],"'viewOptions' is assigned a value but never used.","'makeStyles' is defined but never used.","'setIndexData' is assigned a value but never used.","'Save' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'FormHelperText' is defined but never used.","'Paper' is defined but never used.","'CloseIcon' is defined but never used.","'MuiDialogTitle' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getData' and 'props.ids'. Either include them or remove the dependency array.",["2650"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'mobileRegex' is assigned a value but never used.","'Brush' is defined but never used.","'Title' is defined but never used.","React Hook useEffect has a missing dependency: 'clientID'. Either include it or remove the dependency array.",["2651"],"'auditday' is assigned a value but never used.","'setPercentagethird' is assigned a value but never used.","'setPercentagefourth' is assigned a value but never used.","'setPercentagefifth' is assigned a value but never used.","'setPercentagesixth' is assigned a value but never used.","'newData' is assigned a value but never used.",["2652"],"'TableFooter' is defined but never used.","'data' is defined but never used.","'dataTableData' is assigned a value but never used.","'setDataTableData' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'setOpenAdd' is assigned a value but never used.","'setStickyFooter' is assigned a value but never used.","no-redeclare","'d' is already defined.","redeclared",["2653"],"'footerClasses' is assigned a value but never used.","'format' is defined but never used.",["2654"],"'Grid' is defined but never used.","'CheckCircleIcon' is defined but never used.","'CancelIcon' is defined but never used.","'sectionID' is assigned a value but never used.","'setSectionID' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'Axios' is defined but never used.","'obj' is assigned a value but never used.","'getUpdatedData' is assigned a value but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'Yup' is defined but never used.","Expected '===' and instead saw '=='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["2643"],["2644"],"'CardActions' is defined but never used.","'DialogActions' is defined but never used.","'percentage' is assigned a value but never used.","'grapglabels' is assigned a value but never used.",["2655"],["2656"],"'parse' is defined but never used.","'handleDelete' is assigned a value but never used.","'AppBar' is defined but never used.","'Tablesx' is defined but never used.","'Tablesa' is defined but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTicketData'. Either include it or remove the dependency array.",["2657"],"'TabPanel' is defined but never used.","'setRole' is assigned a value but never used.","'userID' is assigned a value but never used.","'setUserID' is assigned a value but never used.","'errorMsg' is assigned a value but never used.","'roleText' is assigned a value but never used.",["2658"],"'handleOpenModal' is assigned a value but never used.","'clsx' is defined but never used.","'openModal' is assigned a value but never used.","'businessID' is assigned a value but never used.","'setBusinessID' is assigned a value but never used.","'getCheckListID' is assigned a value but never used.","'handleCloseModal' is assigned a value but never used.","Duplicate key 'Checklis_Name'.",["2643"],["2644"],"'handleClickChecklist' is assigned a value but never used.","'faLaptopHouse' is defined but never used.","'mdiTrumpet' is defined but never used.","'AddTimeSlot' is defined but never used.","'setErrorMsg' is assigned a value but never used.","'indexValue' is assigned a value but never used.","'callOnce' is assigned a value but never used.","'debounceFunction' is assigned a value but never used.","'handleView' is assigned a value but never used.",["2659"],"'setRowIndex' is assigned a value but never used.",["2660"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["2661"],["2662"],"'Box' is defined but never used.","'faBullseye' is defined but never used.","'FormControlLabel' is defined but never used.","'TextField' is defined but never used.","'viewDetails' is assigned a value but never used.","'setViewDetails' is assigned a value but never used.","'VisibilityRounded' is defined but never used.","'rowIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPlanData'. Either include it or remove the dependency array.",["2663"],"'useHistory' is defined but never used.","'RadioGroup' is defined but never used.","'FormLabel' is defined but never used.",["2643"],["2644"],"'sectionValue' is assigned a value but never used.","'setSectionValue' is assigned a value but never used.",["2664"],"'CardContent' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'ArrowDropUpIcon' is defined but never used.","'useTheme' is defined but never used.","'bull' is assigned a value but never used.","'results' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'yup' is defined but never used.","'setViewIndex' is assigned a value but never used.","'Card' is defined but never used.","'withRouter' is defined but never used.","'CardHeader' is defined but never used.","'StarIcon' is defined but never used.","'MaterialLink' is defined but never used.","Duplicate key 'link'.","'MenuIcon' is defined but never used.","'DirectionsIcon' is defined but never used.","'EditIcon' is defined but never used.","'Content' is defined but never used.","'handleEditHeading' is assigned a value but never used.","'questionName' is assigned a value but never used.","'openDialog' is assigned a value but never used.","'setOpenDialog' is assigned a value but never used.","'Component' is defined but never used.","'useRef' is defined but never used.","'Popover' is defined but never used.","'Menu' is defined but never used.","'PopupState' is defined but never used.","'bindTrigger' is defined but never used.","'bindMenu' is defined but never used.","'setCountQ' is assigned a value but never used.","'questions' is assigned a value but never used.","'setQuestions' is assigned a value but never used.","'newSectionName' is assigned a value but never used.","Array.prototype.find() expects a return value from arrow function.","'FontAwesomeIcon' is defined but never used.","'green' is defined but never used.","'orange' is defined but never used.","'red' is defined but never used.","'uuidv4' is defined but never used.","'InputChecklistName' is defined but never used.","'openInput' is assigned a value but never used.","'setNewSectionName' is assigned a value but never used.","'handleCloseInputBox' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"2665","fix":"2666"},{"desc":"2667","fix":"2668"},{"desc":"2667","fix":"2669"},{"desc":"2670","fix":"2671"},{"desc":"2672","fix":"2673"},{"desc":"2674","fix":"2675"},{"desc":"2676","fix":"2677"},{"desc":"2678","fix":"2679"},{"desc":"2680","fix":"2681"},{"desc":"2680","fix":"2682"},{"desc":"2676","fix":"2683"},{"desc":"2680","fix":"2684"},{"desc":"2685","fix":"2686"},{"desc":"2687","fix":"2688"},{"desc":"2689","fix":"2690"},{"desc":"2689","fix":"2691"},{"desc":"2692","fix":"2693"},{"desc":"2692","fix":"2694"},{"desc":"2695","fix":"2696"},{"desc":"2687","fix":"2697"},"Update the dependencies array to be: [businessID, getData]",{"range":"2698","text":"2699"},"Update the dependencies array to be: [businessID]",{"range":"2700","text":"2701"},{"range":"2702","text":"2701"},"Update the dependencies array to be: [checkListID]",{"range":"2703","text":"2704"},"Update the dependencies array to be: [masterID]",{"range":"2705","text":"2706"},"Update the dependencies array to be: [getData, props.ids]",{"range":"2707","text":"2708"},"Update the dependencies array to be: [clientID, days]",{"range":"2709","text":"2710"},"Update the dependencies array to be: [clientID]",{"range":"2711","text":"2712"},"Update the dependencies array to be: [clientID, startDate]",{"range":"2713","text":"2714"},{"range":"2715","text":"2714"},{"range":"2716","text":"2710"},{"range":"2717","text":"2714"},"Update the dependencies array to be: [getTicketData]",{"range":"2718","text":"2719"},"Update the dependencies array to be: [getData]",{"range":"2720","text":"2721"},"Update the dependencies array to be: [getData, props.siteID]",{"range":"2722","text":"2723"},{"range":"2724","text":"2723"},"Update the dependencies array to be: [props, props.editData]",{"range":"2725","text":"2726"},{"range":"2727","text":"2726"},"Update the dependencies array to be: [getPlanData, props.id]",{"range":"2728","text":"2729"},{"range":"2730","text":"2721"},[2816,2828],"[businessID, getData]",[3544,3546],"[businessID]",[2928,2930],[2935,2937],"[checkListID]",[2695,2697],"[masterID]",[3213,3237],"[getData, props.ids]",[761,767],"[clientID, days]",[832,834],"[clientID]",[4568,4579],"[clientID, startDate]",[4306,4317],[1273,1279],[4319,4330],[1316,1318],"[getTicketData]",[2969,2971],"[getData]",[2255,2269],"[getData, props.siteID]",[3882,3896],[2235,2251],"[props, props.editData]",[2238,2254],[3691,3701],"[getPlanData, props.id]",[2912,2914]]